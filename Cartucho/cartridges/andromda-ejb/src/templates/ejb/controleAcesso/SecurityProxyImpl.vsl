// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SecurityProxyImpl.vsl in andromda-ejb-cartridge.
//

#set ($generatedFile = "SecurityProxyImpl.java")
#if($stringUtils.isNotEmpty($controleAcessoDir))
package $controleAcessoDir;
#set ($generatedFile = "${stringUtils.replace($controleAcessoDir,'.','/')}/${generatedFile}")
#end

import java.lang.reflect.Method;
import java.security.AccessController;
import java.util.Collection;
import java.util.HashMap;

import javax.ejb.EJBContext;
import javax.security.auth.Subject;

import org.jboss.security.SecurityProxy;

import accessControl.exception.AcessoNegadoException;
import accessControl.exception.SubjectNaoIdentificadoException;


public class SecurityProxyImpl implements SecurityProxy {
    public void init(Class arg0, Class arg1, Object arg2)
        throws InstantiationException {
    }

    public void init(Class arg0, Class arg1, Class arg2, Class arg3, Object arg4)
        throws InstantiationException {
    }

    public void setEJBContext(EJBContext arg0) {    	
    }

    public void invokeHome(Method arg0, Object[] arg1)
        throws Exception {
    }

    public void invoke(Method arg0, Object[] arg1, Object arg2)
        throws Exception {
        Subject subject = Subject.getSubject(AccessController.getContext());
        Servico servico = new Servico(toString(arg0, arg1));       
        boolean possuiPermissao = false;
        if (subject == null) {
            throw new SubjectNaoIdentificadoException("subject.null");
        } else {
            HashMap<String, Collection<Perfil>> mapServicos = ServicosSingleton.instance().getServicos();            
        	PrincipalImpl principal = ControleAcesso.getCallerPrincipal(subject);
        	if(principal.isValido()){
        		possuiPermissao = true;
        	}else{                    
                possuiPermissao = ControleAcesso.verificaPermissao(subject,
                        mapServicos, servico, false);            		
        	}
            
            if (!possuiPermissao) {
            	Collection perfisServico = new ControleAcessoImpl().buscaPerfisServico(servico);
        		if(perfisServico != null && !perfisServico.isEmpty()){
                	if(mapServicos == null){
                		mapServicos = new HashMap<String, Collection<Perfil>>();
                	}        			
        			mapServicos.put(servico.getNome(), perfisServico);
        			ServicosSingleton.instance().setServicos(mapServicos);
        		}
        		possuiPermissao = ControleAcesso.verificaPermissao(subject, mapServicos, servico, false);            	
                if(!possuiPermissao)
                		throw new AcessoNegadoException("acesso.negado  - " + servico.getNome());                	
            }    
         }
        
    }

    public String toString(Method arg0, Object[] arg1) {
        try {        	
            StringBuffer sb = new StringBuffer();
            sb.append(arg0.getDeclaringClass().getName() + ".");
            sb.append(arg0.getName() + "(");
            Class[] params = arg0.getParameterTypes(); 
            for (int j = 0; j < params.length; j++) {
            	String nomeParam = params[j].getName();
            	String simpleNomeParam = params[j].getSimpleName();
            	if(nomeParam.startsWith("[")){
            		nomeParam = nomeParam.substring(2);
            		nomeParam = nomeParam.replace(";", "");
            		String parteSimpleNomeParam = simpleNomeParam.replace("[]", "");
            		nomeParam = nomeParam.replace(parteSimpleNomeParam, "");
            		nomeParam = nomeParam + simpleNomeParam;
            		
            	}
            		sb.append(nomeParam);
                
                if (j < (params.length - 1)) {
                    sb.append(", ");
                }
            }
            sb.append(")");
            return sb.toString();
        } catch (Exception e) {
            return "<" + e + ">";
        }
    }
}
