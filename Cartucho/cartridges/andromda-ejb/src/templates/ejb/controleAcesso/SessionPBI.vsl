#parse("templates/ejb/Parameters.vm")
#set ($pbiPackage = "${service.packageName}.${stringUtils.replace($pbiDir, '/', '.')}")
#set ($generatedFile = "$stringUtils.replace($pbiPackage, '.', '/')/${service.name}PBI.java")
#set($webService = $service.hasStereotype("$webSrv"))
#if($service.findTaggedValue("@andromda.services.shared"))
#set ($generatedFile = "../../../../../core/cs/shared/target/src/$stringUtils.replace($pbiPackage, '.', '/')/${service.name}PBI.java")
#end
// .
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SessionPBI.vsl in andromda-ejb-cartridge-coppetec.
//
package $pbiPackage;

import java.security.AccessController;
import javax.security.auth.Subject;
import ${service.packageName}.${service.name}BI;
import ${service.packageName}.${service.name}Home;
import javax.naming.NamingException;
import java.security.PrivilegedActionException;
import java.lang.reflect.Method;
import ${customTypesPackage}.${actionPackageName}.FilterAction;
import ${customTypesPackage}.${actionPackageName}.ListAction;
import ${customTypesPackage}.${actionPackageName}.ExportAction;
import ${customTypesPackage}.${actionPackageName}.ImportAction;

#macro(getParentService $service)
${service.fullyQualifiedName}BI
#end


##public class ${service.name}PBI implements ${service.name}BI
public class ${service.name}PBI 
#if ($service.generalization)
    ##implements ${service.generalization.fullyQualifiedName}PBI
    implements #getParentService($service.generalization)
#end
{

	${service.name}BI $stringUtils.lowerCase($service.name)BI;
	Subject subject;
	
	

	private static Class cls;
private static Method meth;
private static Method meth2;
private static Object[] objargs = null;
private static Object[] objargs2 = {null,"${service.fullyQualifiedName}",${service.name}Home.class};

static{
	try{
	cls = Class.forName("br.ufrj.coppetec.ServiceLocator" );
	}catch (ClassNotFoundException e){
e.printStackTrace();
//TODO
}
	Class[] varargs = null;
	Class[] varargs2 = {java.util.Hashtable.class,java.lang.String.class,java.lang.Class.class};
	try{
	meth = cls.getMethod("instance", varargs);
	meth2 = cls.getMethod("getServiceBI", varargs2);
	}
	catch(NoSuchMethodException e){
	e.printStackTrace();
//TODO
	}
}


public ${service.name}PBI(Subject subject)
	{
		try {
				Object obj = meth.invoke(null,objargs);
$stringUtils.lowerCase($service.name)BI = (${service.name}BI)meth2.invoke(obj,objargs2);
	} catch (Exception e) {
			e.printStackTrace();
			//TODO 
		}finally{
		this.subject = subject;
		}
	}
	

#set($generalizations = $service.allGeneralizations)

#set($operations = $service.operations)

#foreach($generalization in $generalizations)
	#set($var = $operations.addAll($generalization.operations))
#end
	
#set($cont = 0)	
#set($contParameter = 0)
#foreach ($operation in $operations)
#if($operation.visibility == 'public')
#set($cont = $cont + 1)

#set ($listaAtributos = '')
#set ($return = '')
#if($operation.returnType.collectionType || $operation.returnType.listType || $operation.returnType.setType )
#if($webService)
#renderParametersWSPaginacao($operation $listaAtributos true)
#renderReturnWS($operation $return)|
#else
#renderParametersPaginacao($operation $listaAtributos true)
#set($return = $operation.returnType.fullyQualifiedName)
#end
#else
#if($webService)
#renderParametersWS($operation $listaAtributos true )
#renderReturnWS($operation $return)
#else
#renderParameters($operation $listaAtributos true)
#set($return = $operation.returnType.fullyQualifiedName)
#end
#end


## Fim
	 #if ($operation.returnTypePresent)
	 $return  operacao${cont} = $operation.returnType.javaNullString;
	 #end
	 
         #set($paramNames = "")
	 #set($firstParam = true)
	
	 #foreach ( $att in $operation.parameters )		         	
         	#if($att.name != "" && !$att.return)
         	#set($contParameter = $contParameter + 1)
         #if($webService)
		#set($classe = $att.type.fullyQualifiedName)
		#if(!($stringUtils.indexOf("$classe", "$wsdPackageName") > 0))
		#set($classe = $stringUtils.replace("${classe}", "$modelPackageName", "$wsdPackageName"))
		#if($stringUtils.indexOf("$classe", "$wsdPackageName") > 0)
		#set($classe = "${classe}WS")
		#end
		#end         
         	$classe param${cont}_${contParameter} = $att.type.javaNullString;
         #else
         $att.type.fullyQualifiedName param${cont}_${contParameter} = $att.type.javaNullString;
         #end
         	#if($firstParam)	 
         	#set($paramNames = $paramNames.concat("param${cont}_${contParameter}") )
         	#set($firstParam = false)	
         	#else
         	#set($paramNames = $paramNames.concat(",param${cont}_${contParameter}") )	
	 	#end
	 	#end
	 #end
	 #if($operation.returnType.collectionType || $operation.returnType.listType || $operation.returnType.setType )	 
	 Integer pag${cont} = null;
	 #if($operation.parameters.size() > 1)
	 #set($paramNames = $paramNames.concat(",pag${cont}") )	  
	 #else
	 #set($paramNames = $paramNames.concat("pag${cont}") )	  
	 #end
	 #end
	 
	 #set($contParameter = 0)

	 $operation.visibility  $return ${operation.name} ($listaAtributos)  throws Exception #if ($operation.exceptionsPresent), ${operation.exceptionList} #end{
		#foreach ( $att in $operation.parameters )
		#if($att.name != "" && !$att.return)
		#set($contParameter = $contParameter + 1)		
		param${cont}_${contParameter} = ${att.name};
		#end
		#end
		#if($operation.returnType.collectionType || $operation.returnType.listType || $operation.returnType.setType )	 
		pag${cont} = paginacao;
		#end	
		#set($contParameter = 0)
	 	#set($securityCode = "")
	 	#set($securityCode = $operation.findTaggedValue("$operationSecurityCode"))
		#if($securityCode != "")
		java.util.HashMap mapServicos = accessControl.ServicosSingleton.instance().getServicos();
		boolean possuiPermissao = accessControl.ControleAcesso.verificaPermissao(subject,
                            mapServicos, new accessControl.Servico("$securityCode"), false);
                if(possuiPermissao){
                	accessControl.PrincipalImpl principalImpl = accessControl.ControleAcessoImpl.getCallerPrincipal(subject);
        		principalImpl.setValido(true);        		               	
                }else{
	                throw new accessControl.exception.AcessoNegadoException("acesso.negado");
                }
		#end
		try{
			Subject.doAsPrivileged(subject, new java.security.PrivilegedExceptionAction() {
			  public Object run() throws Exception{
				#if ($operation.returnTypePresent)operacao${cont} = #end $stringUtils.lowerCase($service.name)BI.${operation.name}($paramNames);										
				return null;
			  }
		}, AccessController.getContext());  
		#if ($operation.returnTypePresent) 
		return operacao${cont};
		#end
		} catch (PrivilegedActionException e) {
			throw new Exception(e);
		} 		
	  }
	  
#if($operation.returnType.collectionType || $operation.returnType.listType || $operation.returnType.setType )

#set ($listaAtributos = '')
#set ($return = '')
#if($webService)
#renderParametersWS($operation $listaAtributos true)
#renderReturnWS($operation $return)|
#else
#renderParameters($operation $listaAtributos true)
#set($return = $operation.returnType.fullyQualifiedName)
#end


	#set($cont = $cont + 1)
	#if(!$stringUtils.isEmpty($operation.typedArgumentList))
		#set($argumentList = "$operation.argumentNames, null")
	#else
		#set($argumentList = "null")
	#end
	
	$return  operacao${cont} = $operation.returnType.javaNullString;
	
         #set($paramNames = "")
	 #set($firstParam = true)
	 #foreach ( $att in $operation.parameters )	          	
         	#if($att.name != "" && !$att.return)
         	#set($contParameter = $contParameter + 1)
         #if($webService)
		#set($classe = $att.type.fullyQualifiedName)
		#if(!($stringUtils.indexOf("$classe", "$wsdPackageName") > 0))
		#set($classe = $stringUtils.replace("${classe}", "$modelPackageName", "$wsdPackageName"))
		#if($stringUtils.indexOf("$classe", "$wsdPackageName") > 0)
		#set($classe = "${classe}WS")
		#end
		#end         
         	$classe param${cont}_${contParameter} = $att.type.javaNullString;
         #else         	
         $att.type.fullyQualifiedName param${cont}_${contParameter} = $att.type.javaNullString;
         #end
         	#if($firstParam)	 
         		#set($paramNames = $paramNames.concat("param${cont}_${contParameter}") )
         		#set($firstParam = false)	
         	#else
         		#set($paramNames = $paramNames.concat(",param${cont}_${contParameter}") )	
	 	#end
	 	#end
	 #end
	 #set($contParameter = 0)
	##$operation.visibility  $return $operation.signature throws Exception #if ($operation.exceptionsPresent), ${operation.exceptionList} #end{
	$operation.visibility  $operation.returnType.fullyQualifiedName ${operation.name} ($listaAtributos) throws Exception #if ($operation.exceptionsPresent), ${operation.exceptionList} #end{
	#foreach ( $att in $operation.parameters ) 
	#if($att.name != "" && !$att.return)
	#set($contParameter = $contParameter + 1)
	param${cont}_${contParameter} = ${att.name};
	#end
	#end
	#if($firstParam)
	 #set($paramNames = $paramNames.concat("null") )
	 #else
	 #set($paramNames = $paramNames.concat(",null") )
	 #end
	 #set($contParameter = 0)
	 try{
		Subject.doAsPrivileged(subject, new java.security.PrivilegedExceptionAction() {
		public Object run() throws Exception {
			operacao${cont} = ${operation.name}($paramNames);			
			return null;
		}
		}, AccessController.getContext());  
		
		return operacao${cont};
	} catch (PrivilegedActionException e) {
		throw new Exception(e);
	}  	
	}

#end
#end
#end


#set($generalizations = $service.allGeneralizations)

#set($dependencias = $service.sourceDependencies)

#foreach($generalization in $generalizations)
	#set($var = $dependencias.addAll($generalization.sourceDependencies))
#end
##Adicao do metodo do CRUD por dependencia com entidade
#set($cont = 0)
#foreach ($dependencia in $dependencias)
#set($cont = $cont + 1)
#set($contParameter = $contParameter + 1)
#if($dependencia.targetElement.FullyQualifiedName.indexOf(".${modelPackageName}.") > 0)
	java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> manipula${cont}= null;
	${dependencia.targetElement.FullyQualifiedName} paramEntity${cont}_${contParameter} = null;
	${customTypesPackage}.${actionPackageName}.Action paramAction${cont}_${contParameter} = null;
	public java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> manipula${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name}), ${customTypesPackage}.${actionPackageName}.Action action) throws Exception, ${customTypesPackage}.${actionPackageName}.ActionException
	{
		paramEntity${cont}_${contParameter} = $stringUtils.lowerCase(${dependencia.targetElement.name});
		paramAction${cont}_${contParameter} = action;
    		try{ 
			Subject.doAsPrivileged(subject, new java.security.PrivilegedExceptionAction() {
				public Object run() throws Exception{
					//manipula${cont} = ${stringUtils.lowerCase($service.name)}BI.manipula${dependencia.targetElement.name}(paramEntity${cont}_${contParameter}, paramAction${cont}_${contParameter});															
					if(paramAction${cont}_${contParameter} instanceof ${customTypesPackage}.${actionPackageName}.FilterAction)
						manipula${cont} = ${stringUtils.lowerCase($service.name)}BI.filter${dependencia.targetElement.name}(paramEntity${cont}_${contParameter}, (${customTypesPackage}.${actionPackageName}.FilterAction)paramAction${cont}_${contParameter});	
					else if (paramAction${cont}_${contParameter} instanceof ${customTypesPackage}.${actionPackageName}.ListAction)
					    	manipula${cont} = ${stringUtils.lowerCase($service.name)}BI.list${dependencia.targetElement.name}(paramEntity${cont}_${contParameter}, (${customTypesPackage}.${actionPackageName}.ListAction)paramAction${cont}_${contParameter});	
				    	else if ((paramAction${cont}_${contParameter} instanceof ${customTypesPackage}.${actionPackageName}.ExportAction))
					    	manipula${cont} = ${stringUtils.lowerCase($service.name)}BI.export${dependencia.targetElement.name}(paramEntity${cont}_${contParameter}, (${customTypesPackage}.${actionPackageName}.ExportAction)paramAction${cont}_${contParameter});	
				    	else if ((paramAction${cont}_${contParameter} instanceof ${customTypesPackage}.${actionPackageName}.ImportAction))
					    	manipula${cont} = ${stringUtils.lowerCase($service.name)}BI.import${dependencia.targetElement.name}(paramEntity${cont}_${contParameter}, (${customTypesPackage}.${actionPackageName}.ImportAction)paramAction${cont}_${contParameter});	
					else{
						String nome = paramAction${cont}_${contParameter}.getClass().getSimpleName();
						nome = org.apache.commons.lang.StringUtils.removeEnd(nome, "Action") + "${dependencia.targetElement.name}";
						java.lang.reflect.Method method = ${service.name}BI.class.getMethod(org.apache.commons.lang.StringUtils.uncapitalize(nome), new Class[]{${dependencia.targetElement.FullyQualifiedName}.class});
						manipula${cont} = (java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity>)method.invoke(${stringUtils.lowerCase($service.name)}BI, new Object[]{paramEntity${cont}_${contParameter}});							
					}					
					return null;
				}
			}, AccessController.getContext());   
			return manipula${cont};  
		} catch (PrivilegedActionException e) {
			throw new Exception(e);
		}  
	}

#end
#end 
## Fim da adiÃ§aÃµ

}
