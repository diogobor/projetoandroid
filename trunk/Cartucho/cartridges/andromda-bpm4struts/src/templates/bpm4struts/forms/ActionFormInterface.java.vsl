#set ($generatedFile = "${operation.interfaceFullPath}.java")
// license-header java merge-point
package $operation.interfacePackageName;

/**
 * This form encapsulates the fields that are used in the execution of the
 * <code>$operation.name</code> method, which is located on the
 * <code>$operation.controller.fullyQualifiedName</code> controller.
 *
$operation.getDocumentation(" * ")
 *
 * @see ${operation.controller.fullyQualifiedName}#${operation.name}
 */
public interface $operation.interfaceName
{
###foreach ($field in $operation.formFields)
#foreach ($field in $operation.interfaceFormFields)
#set ($fieldType = $field.type.fullyQualifiedName)
#set ($fieldName = $field.name)
#set ($tableActionFound = false)
#set ($optionField = false)
#if($field.strutsAction.tableAction)
#set($tableActionFound=true)
#else
#if($field.widgetType=="radio")#set($optionField=$field)#end
#end
#if ($field.type.collectionType)
    /**
     * This field is a collection type, and this method allows you to set it into the form.
     *
$field.getDocumentation("     * ")
     *
     * @see #${field.setterName}AsArray(Object[])
     */
    public void ${field.setterName}($fieldType $fieldName);

    /**
     * This field is a collection type, and this method allows you to get it from the form.
     *
$field.getDocumentation("     * ")
     *
     * @see #${field.getterName}AsArray()
     */
    public $fieldType ${field.getterName}();

    /**
     * This field is a collection type, and this method allows you to set it as an
     * array into the form, conversion will be automatically performed.
     *
$field.getDocumentation("     * ")
     *
     * @see #${field.setterName}($fieldType)
     */
    public void ${field.setterName}AsArray(Object[] $fieldName);

    /**
     * This field is a collection type, and this method allows you to get it as an
     * array from the form, conversion will be automatically performed.
     *
$field.getDocumentation("     * ")
     *
     * @see #${field.getterName}()
     */
    public java.lang.Object[] ${field.getterName}AsArray();
#elseif($field.widgetType=="multibox")
	public ${fieldType}[] ${field.getterName}();
	public void ${field.setterName}(${fieldType}[] $fieldName);
#elseif($field.widgetType=="money")
#set ($asType = "Double")
   
   public void ${field.setterName}As${asType}(java.lang.Double $fieldName);

   
    public java.lang.Double ${field.getterName}As${asType}();

    
    public void ${field.setterName}(java.lang.String ${fieldName});

   
    public java.lang.String ${field.getterName}();
    
#elseif ($field.date || $field.time )
#if ($field.date)
#set ($asType = "Date")
#else
#set ($asType = "Time")
#end
    /**
     * This field is a date type, and this method allows you to set it into the form.
     *
$field.getDocumentation("     * ")
     *
     * @see #${field.setterName}(java.lang.String)
     */
    public void ${field.setterName}As${asType}($fieldType $fieldName);

    /**
     * This field is a date type, and this method allows you to get it from the form.
     *
$field.getDocumentation("     * ")
     *
     * @see #${field.getterName}()
     */
    public $fieldType ${field.getterName}As${asType}();

    /**
     * This field is a date type, and this method allows you to set it into the form as a String.
     *
$field.getDocumentation("     * ")
     *
     * @see #${field.setterName}As${asType}($fieldType)
     */
    public void ${field.setterName}(java.lang.String ${fieldName});

    /**
     * This field is a date type, and this method allows you to get it from the form as a String.
     *
$field.getDocumentation("     * ")
     *
     * @see #${field.getterName}As${asType}()
     */
    public java.lang.String ${field.getterName}();

#elseif ($field.type.mapType)
    /**
     * Sets the argument value for the specified key into the <code>$field.name</code> Map.
     *
$field.getDocumentation("     * ")
     *
     * @see #${field.setterName}(java.util.Map)
     */
    public void ${field.setterName}Value(java.lang.String key, java.lang.Object value);

    /**
     * Gets the argument value for the specified key from the <code>$field.name</code> Map.
     *
$field.getDocumentation("     * ")
     *
     * @see #${field.getterName}()
     */
    public java.lang.Object ${field.getterName}Value(java.lang.String key);

    /**
     * Sets the <code>$field.name</code> Map to the specified value.
     *
$field.getDocumentation("     * ")
     *
     * @see #${field.setterName}Value(java.lang.String key, java.lang.Object value)
     */
    public void ${field.setterName}(java.util.Map $fieldName);

    /**
     * Gets the <code>$field.name</code> Map.
     *
$field.getDocumentation("     * ")
     *
     * @see #${field.getterName}Value(java.lang.String)
     */
    public java.util.Map ${field.getterName}();

#elseif($field.type.enumeration)
#set($enumeration = $field.type)
#if ($enumeration.literalType.primitive)
    #set($type = ${enumeration.literalType.wrapperName})
#else
    #set($type = ${enumeration.literalType.fullyQualifiedName})
#end

    /**
     * Sets the <code>$field.name</code> field.
     *
$field.getDocumentation("     * ")
     */
    public void ${field.setterName}($type $fieldName);

    /**
     * Gets the <code>$field.name</code> field.
     *
$field.getDocumentation("     * ")
     */
    public ${enumeration.fullyQualifiedName} ${field.getterName}AsEnumeration();
    
    public $type ${field.getterName}();

#elseif ($field.file)
    /**
     * Sets the <code>$field.name</code> Struts FormFile field to the specified value.
     *
$field.getDocumentation("     * ")
     */
    public void ${field.setterName}(org.apache.struts.upload.FormFile ${field.name});


    /**
     * Gets the <code>$field.name</code> Struts FormFile field value.
     *
$field.getDocumentation("     * ")
     */
    public org.apache.struts.upload.FormFile ${field.getterName}();

##
##  if this field is used as a row selection parameter somewhere then we need to include that dedicated field too
##
#elseif ($tableActionFound)
#set ($fieldName = $field.name)
#if ($field.type.primitive)
#set ($fieldType = "$field.type.wrapperName")
#else
#set ($fieldType = "$field.type.fullyQualifiedName")
#end
#set ($accessSuffix = "RowSelection")
    /**
     * This field represents a selection of rows from the <em>$field.tableGlobalActionParameter.name</em> table
     * page-variable, this method allows you to set it into the form.
     *
$field.getDocumentation("     * ")
     *
     * @see #${field.setterName}${accessSuffix}AsArray(${fieldType}[])
     */
    public void ${field.setterName}${accessSuffix}(java.util.List $fieldName${accessSuffix});

    /**
     * This field represents a selection of rows from the <em>$field.tableGlobalActionParameter.name</em> table
     * page-variable, this method allows you to get it from the form.
     *
$field.getDocumentation("     * ")
     *
     * @see #${field.getterName}${accessSuffix}AsArray()
     */
    public java.util.List ${field.getterName}${accessSuffix}();

    /**
     * This field represents a selection of rows from the <em>$field.tableGlobalActionParameter.name</em> table
     * page-variable, this method allows you to set it as an array into the form, conversion will be
     * automatically performed.
     *
$field.getDocumentation("     * ")
     *
     * @see #${field.setterName}${accessSuffix}(java.util.List)
     */
    public void ${field.setterName}${accessSuffix}AsArray(${fieldType}[] $fieldName${accessSuffix});

    /**
     * This field represents a selection of rows from the <em>$field.tableGlobalActionParameter.name</em> table
     * page-variable, this method allows you to get it as an
     * array from the form, conversion will be automatically performed.
     *
$field.getDocumentation("     * ")
     *
     * @see #${field.getterName}${accessSuffix}()
     */
    public ${fieldType}[] ${field.getterName}${accessSuffix}AsArray();

#else
    /**
     * Sets the <code>$field.name</code> field.
     *
$field.getDocumentation("     * ")
     */
    public void ${field.setterName}($fieldType $fieldName);

    /**
     * Gets the <code>$field.name</code> field.
     *
$field.getDocumentation("     * ")
     */
    public $fieldType ${field.getterName}();
    
#if ($optionField)
    /**
     * Converts the selected option index to the corresponding value as it was modeled.
     * This method does not take i18n into account so it consistently returns the same value
     * given the same argument.
     */
    public $field.type.fullyQualifiedName ${field.getterName}OptionValue(int optionIndex);

#end
#end
    /**
     * Resets the <code>$field.name</code> field.
     */
    public void ${field.resetName}();

###if ($field.selectable)
#set ($listType = "java.lang.Object[]")
#set ($backingListName = $field.backingListName)
#set ($backingListMethod = $stringUtils.capitalize($backingListName))
#set ($valueListName = $field.valueListName)
#set ($valueListMethod = $stringUtils.capitalize($valueListName))
#set ($labelListName = $field.labelListName)
#set ($labelListMethod = $stringUtils.capitalize($labelListName))
    /**
     * The <code>$field.name</code> field can be selected from a list,
     * this method allows you to retrieve the current elements from that list.
     * <p/>
     * <i>Please note that the elements from that list are key value pairs, so you will
     * need to call <code>getLabel()</code> and <code>getValue()</code> to get the label and
     * value for this entry respectively.</i>
     *
     * @see #${field.getterName}()
     * @see #get${valueListMethod}()
     * @see #get${labelListMethod}()
     * @see #set${labelListMethod}(java.util.Collection,java.lang.String,java.lang.String)
     */
    public $listType get${backingListMethod}();
    public $listType get${backingListMethod}Double();
    public $listType get${backingListMethod}Destination();

    /**
     * Convenient method to quickly set the value and label backinglist for the
     * $field.name property. This method takes a collection of objects, as well as
     * the property names to query on these objects in order to find the corresponding
     * values and labels.
     * <p/>
     * Let's say you have a set of value objects with the following properties:
     * <ul>
     *  <li><code>id</code></li>
     *  <li><code>code</code></li>
     *  <li><code>name</code></li>
     *  <li><code>description</code></li>
     * </ul>
     * But you need to populate the $field.name backing list with the <code>id</code> properties as the values and the
     * <code>name</code> properties as the labels then you would make a call like this:
     * <code>set${backingListMethod}(valueObjects, "id", "name")</code>
     * <p/>
     * This method knows how to handle primitive property types as it simply delegates to
     * <code>org.apache.commons.beanutils.PropertyUtils.getProperty(Object, String)</code>.
     *
     * @param items The items from which to read the properties, if this argument is <code>null</code> this method
     *        will simply clear the existing values and labels
     * @param valueProperty the name of the property to query on each object to retrieve
     *        the corresponding value, cannot be <code>null</code>
     * @throws java.lang.IllegalArgumentException if the valueProperty or labelProperty is <code>null</code>
     * @throws java.lang.RuntimeException if one of the items in the collection is <code>null</code>, or
     *         if the caller does not have access one of the object's properties, if an exception was thrown while
     *         accessing a property or if the property does not exist on at least one of the items
     *
     * @see #${field.getterName}()
     * @see #get${valueListMethod}()
     * @see #get${labelListMethod}()
     * @see #get${labelListMethod}()
     */
    public void set${backingListMethod}(java.util.Collection items, String valueProperty, String labelProperty);
    public void set${backingListMethod}(java.util.Collection items, String valueProperty, String labelProperty, String labelHintProperty);
    public void set${backingListMethod}Internationalized(javax.servlet.http.HttpServletRequest request, java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty);
    public void set${backingListMethod}Internationalized(javax.servlet.http.HttpServletRequest request, java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty, String labelHintProperty);
    public void set${backingListMethod}Double(java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty, java.lang.String labelDoubleProperty);
    public void set${backingListMethod}Destination(java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty, java.lang.String labelDestinationProperty);

    /**
     * The <code>$field.name</code> field can be selected from a list,
     * this method allows you to retrieve the values from that list.
     *
     * @see #${field.getterName}()
     * @see #get${backingListMethod}()
     */
    public $listType get${valueListMethod}();

    /**
     * The <code>$field.name</code> field can be selected from a list,
     * this method allows you to set the values for that list.
     *
     * @see #${field.getterName}()
     * @see #get${backingListMethod}()
     */
    public void set${valueListMethod}($listType $valueListName);

    /**
     * The <code>$field.name</code> field can be selected from a list,
     * this method allows you to retrieve the labels from that list.
     *
     * @see #${field.getterName}()
     * @see #get${backingListMethod}()
     */
    public $listType get${labelListMethod}();
    public $listType get${labelListMethod}Double();
    public $listType get${labelListMethod}Hints();
    public $listType get${labelListMethod}Destination();

    /**
     * The <code>$field.name</code> field can be selected from a list,
     * this method allows you to set the labels for that list.
     *
     * @see #${field.getterName}()
     * @see #get${backingListMethod}()
     */
    public void set${labelListMethod}($listType $labelListName);
    public void set${labelListMethod}Double($listType ${labelListName}Double);
    public void set${labelListMethod}Hints($listType ${labelListName}Hints);
    public void set${labelListMethod}Destination($listType ${labelListName}Destination);

###end
#end
}
