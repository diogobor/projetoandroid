#set($packagePath = $stringUtils.replace("${webServiceData.packagePath}", "$modelPackageName", "$wsdPackageName"))
#set($packageName = $stringUtils.replace("${webServiceData.packageName}", "$modelPackageName", "$wsdPackageName"))
#set ($generatedFile = "${packagePath}/${webServiceData.name}WS.java")

// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: webServiceData.java..vsl in andromda-hibernate-cartridge.
//
#if ($stringUtils.isNotBlank($packageName))
package $packageName;
#end

/**
$webServiceData.getDocumentation(" * ")
 */
 
#if($jboss403 == 'false')
import javax.xml.bind.annotation.XmlType;
#set($specific = $hibernateUtils.moreSpecificPackageName("${customTypesPackage}"))
@XmlType(name = "${webServiceData.name}WS", namespace = "http://$specific/types")
#end 
public class ${webServiceData.name}WS
#if($webServiceData.generalization && $webServiceData.generalization.hasStereotype("$wsdStereotype"))
    extends ${stringUtils.replace("$webServiceData.generalization.fullyQualifiedName", "$modelPackageName", "$wsdPackageName")}WS
#else
    extends $customTypesPackage.${wsdPackageName}.AbstractWS
#end
#if(!$webServiceData.abstractions.empty)
    implements
#end
#foreach ( $parent in $webServiceData.abstractions)
        #if($velocityCount != 1), #end ${parent.packageName}.$stringUtils.capitalize(${parent.name})
#end
{

#foreach ( $attribute in $webServiceData.attributes )
#if(!$attribute.hasStereotype("$excludesWSDStereotype"))
#set ($typeName = $attribute.type.fullyQualifiedName)
#if ($attribute.containsEmbeddedObject)
#set ($typeName = $attribute.type.fullyQualifiedName)
#end

    private $typeName $attribute.name;

    /**
	$attribute.getDocumentation("     * ")
     */
    $attribute.visibility $typeName ${attribute.getterName}()
    {
        return this.${attribute.name};
    }
    
    $attribute.visibility void ${attribute.setterName}(${typeName} $attribute.name)
    {
	this.${attribute.name} = $attribute.name;
    }    
#end
#end
## Generate the associations
#foreach ($associationEnd in $webServiceData.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if ($target.navigable || ($associationEnd.child && $webServiceData.foreignHibernateGeneratorClass))
#if(!$target.hasStereotype("$excludesWSDStereotype") && $target.type.hasStereotype("$wsdStereotype"))

#set($wsdClassPackage = $target.type);
#set($wsdClassPackage = $stringUtils.replace("$wsdClassPackage.packageName", "$modelPackageName", "$wsdPackageName"))
    

#if ($target.many)
    private ${wsdClassPackage}.${target.type.name}WS[] $target.name = {};
#else
    private ${wsdClassPackage}.${target.type.name}WS $target.name;
#end

    /**
	$target.getDocumentation("     * ")
     */
    
    #if(!$target.many)
    #set($type = "${wsdClassPackage}.${target.type.name}WS")
    #else
    #set($type = "${wsdClassPackage}.${target.type.name}WS[]")
    #end
    
    public ${type} ${target.getterName}()
    {
        return ${target.name};
    }
    
    
    public void ${target.setterName}($type ${target.name})
    {
        this.${target.name} = ${target.name};
    }
#end
#end
#end

#if($webServiceData.hasStereotype("Entity"))		
    public String entidade(){
#if(!$webServiceData.abstract)	
    	return ${webServiceData.fullyQualifiedName}Impl.class.getName();
#else
	return null;
#end
    }
#end	
 	

    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link ${packageName}.${webServiceData.name}WS}.
         */
        public static final ${packageName}.${webServiceData.name}WS newInstance()
        {
            return new ${packageName}.${webServiceData.name}WS();
        }
    }


}