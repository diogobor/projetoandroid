// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: ControleAcessoUtil.vsl in andromda-ejb-cartridge.
//

#set ($generatedFile = "ControleAcessoUtil.java")
#if($stringUtils.isNotEmpty($controleAcessoDir))
package $controleAcessoDir;
#set ($generatedFile = "${stringUtils.replace($controleAcessoDir,'.','/')}/${generatedFile}")
#end

import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import accessControl.Perfil;
import accessControl.Restricao;
import accessControl.Operador;
import accessControl.Servico;
import accessControl.PrincipalImpl;
import accessControl.exception.ControleAcessoException;

public class ControleAcessoUtil {
	
	public static HashMap<String,Collection<Restricao>> getRestricoesServico(String nomeServico){
		 Operador operador = getOperador();
		 ControleAcessoImpl controleAcessoImpl = new ControleAcessoImpl();
		 HashMap<String,Collection<Restricao>> listaRestricao = null;
    	 try {
			listaRestricao = controleAcessoImpl.getRestricoes(operador, new Servico(nomeServico));
    	 } catch (ControleAcessoException e) {
			e.printStackTrace();				
    	 }
	     return  listaRestricao;	
	}
	
        public static PrincipalImpl getPrincipal(){
		 javax.security.auth.Subject subject = javax.security.auth.Subject.getSubject(java.security.AccessController.getContext());
		 return ControleAcessoImpl.getCallerPrincipal(subject);
        }

	public static Collection getPerfis(){
		 PrincipalImpl principalImpl = getPrincipal();
	     	 Collection perfis = principalImpl.getPerfis();
	     return perfis;		
	}
	public static Operador getOperador(){
		 PrincipalImpl principalImpl = getPrincipal();
	     	 Operador operador = principalImpl.getOperador();
	     return operador;
	}
	
	public static void addRestricoes(PrincipalImpl principalImpl, HashMap<String,Collection<Restricao>> listaRestricaoServico){		
		listaRestricaoServico = recuperaRestricoesDinamicas(listaRestricaoServico);
		HashMap<String,Collection<Restricao>> listaRestricao = principalImpl.getRestricoes();
		if(listaRestricao != null && !listaRestricao.isEmpty()){
        		for(Iterator it = listaRestricao.keySet().iterator(); it.hasNext();){
        			String perfil = (String)it.next();
        			Collection<Restricao>  restricoes = listaRestricao.get(perfil); 
        			//boolean contem = listaRestricaoServico.containsKey(perfil);
        				if(listaRestricaoServico != null && !listaRestricaoServico.isEmpty()){
        					Collection <Restricao> novasRestricoes = listaRestricaoServico.get(perfil);
        					if(novasRestricoes != null)
        					restricoes.addAll(novasRestricoes);
        				}
        			listaRestricao.put(perfil, restricoes);
       	 		}       
		}else{
			
			listaRestricao = listaRestricaoServico;
		}
        	principalImpl.setRestricoes(listaRestricao);
	}
	
	private static HashMap<String, Collection<Restricao>> recuperaRestricoesDinamicas(HashMap<String, Collection<Restricao>> listaRestricaoServico) {
		if(listaRestricaoServico != null && !listaRestricaoServico.isEmpty()){
			for(Iterator it = listaRestricaoServico.keySet().iterator();it.hasNext();){
				String perfil = (String) it.next();
				Collection<Restricao> restricoes = listaRestricaoServico.get(perfil);
				Collection<Restricao> restricoesClone = new java.util.ArrayList();
				restricoesClone.addAll(restricoes);
				for(Iterator itRestricao = restricoes.iterator(); itRestricao.hasNext();){
					Restricao nextRestricao = (Restricao)itRestricao.next();
					Collection valoresRestricao = nextRestricao.getValoresRestricao();
	    			for(Iterator itValor = valoresRestricao.iterator();itValor.hasNext();){
	    				Object nextValor = itValor.next();
	    				if(nextValor instanceof ValorRestricaoDinamico){
	    					ValorRestricao valor = (ValorRestricao) nextValor;
	    					try {
								Object object = ControleAcessoImpl.RestricaoDinamicaImpl.class.getMethod(valor.getValor()).invoke(new ControleAcessoImpl.RestricaoDinamicaImpl());								
								valoresRestricao.remove(valor);
								valor.setValor(object.toString());
								valoresRestricao.add(valor);								
							} catch (Exception e) {
								e.printStackTrace();
								
							}        					
	    					
	    				}
	    			}
	    			
	    			restricoesClone.remove(nextRestricao);
	    			nextRestricao.setValoresRestricao(valoresRestricao);
	    			restricoesClone.add(nextRestricao);
				}
				
				listaRestricaoServico.put(perfil, restricoesClone);
			}
		}
		return listaRestricaoServico;
	}
	
	public static void removeRestricoes(PrincipalImpl principalImpl, HashMap<String,Collection<Restricao>> listaRestricaoServico){
		HashMap<String,Collection<Restricao>> listaRestricao = principalImpl.getRestricoes();
		if(listaRestricao != null && !listaRestricao.isEmpty()){
        //adicina as restrições no servico atual na lista de restriÃƒÂ§ÃƒÂµes
        for(Iterator it = listaRestricao.keySet().iterator(); it.hasNext();){
        	String perfil = (String)it.next();
        	Collection<Restricao>  restricoes = listaRestricao.get(perfil);
        	if(listaRestricaoServico != null && !listaRestricaoServico.isEmpty()){
        	Collection <Restricao> novasRestricoes = listaRestricaoServico.get(perfil);
        	restricoes.removeAll(novasRestricoes);
        	}
        	if(!restricoes.isEmpty())
        		listaRestricao.put(perfil, restricoes);
        	else
        		listaRestricao.remove(perfil);
        }
        }else{        	
        	listaRestricao = listaRestricaoServico;        	
        }
        principalImpl.setRestricoes(listaRestricao);
	}			

}