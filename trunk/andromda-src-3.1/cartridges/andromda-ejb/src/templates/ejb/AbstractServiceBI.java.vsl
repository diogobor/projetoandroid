#parse("templates/ejb/SessionEJBGlobals.vm")
#set ($generatedFile = "${service.fullyQualifiedNamePath}.java")
// .
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: AbstractServiceBI.vsl in andromda-ejb-cartridge-coppetec.
//
#if ($stringUtils.isNotBlank($service.packageName))
  package $service.packageName;
#end

/**
 * @see $service.fullyQualifiedName
 */
public interface ${service.name}BI
#if ($service.generalization)
    extends ${service.generalization.fullyQualifiedName}BI
#end
{

#set($webService = $service.hasStereotype("$webSrv"))

#foreach ($operation in $service.operations)


	## Only expose public methods
	   /**
	$operation.getDocumentation("    * ")
	    */
	    
#set ($listaArgumentos = '')
#set ($return = '')
#if($webService)
#renderParametersWS($operation $listaArgumentos true)
#renderReturnWS($operation $return)
#else
#renderParameters($operation $listaArgumentos true)
#set($return = $operation.returnType.fullyQualifiedName)
#end

	##  public $operation.returnType.fullyQualifiedName $operation.signature
##		throws java.rmi.RemoteException;


#if ($operation.exceptionsPresent)
	  $operation.visibility  abstract $return ${operation.name} ($listaArgumentos) throws Exception, $operation.exceptionList;
#else
	  $operation.visibility  abstract $return ${operation.name} ($listaArgumentos) throws Exception;
#end



## [MOISES-COPPETEC]
## Codigo para gerar métodos que receba o grupo a ser carregado na paginação, caso este método retorne uma coleção

###if ($stringUtils.contains($operation.returnType.fullyQualifiedName, "Collection"))
#if($operation.returnType.collectionType || $operation.returnType.listType || $operation.returnType.setType )
#set ($listaArgumentos = '')
#set ($return = '')
#if($webService)
#renderParametersWSPaginacao($operation $listaArgumentos true)
#renderReturnWS($operation $return)
#else
#renderParametersPaginacao($operation $listaArgumentos true)
#set($return = $operation.returnType.fullyQualifiedName)
#end



## Fim

#if ($operation.exceptionsPresent)
	  $operation.visibility abstract $return ${operation.name} ($listaArgumentos)  throws Exception, $operation.exceptionList;
#else
	  $operation.visibility abstract $return ${operation.name} ($listaArgumentos)  throws Exception;
#end

#end
#end

	#foreach ($dependencia in $service.sourceDependencies)

#if($dependencia.targetElement.FullyQualifiedName.indexOf(".${modelPackageName}.") > 0)
#if($ejbSecurityEnabled)
	  public abstract java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> delete${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name})) 		throws Exception;
	  public abstract java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> filter${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name})) 		throws Exception;
	  public abstract java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> insert${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name})) 		throws Exception;
	  public abstract java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> insertOrUpdate${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name})) 	throws Exception;
	  public abstract java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> list${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name})) 		throws Exception;
	  public abstract java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> select${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name})) 		throws Exception;
	  public abstract java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> update${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name})) 		throws Exception;	  	  	  	  	  	  
	  public abstract java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> export${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name})) 		throws Exception;
	  public abstract java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> importa${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name})) 		throws Exception;	  
	  
#else
	  public abstract java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> manipula${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name}), ${customTypesPackage}.${actionPackageName}.Action action) throws Exception, ${customTypesPackage}.${actionPackageName}.ActionException;
#end
#end
#end 

}
