#parse("templates/ejb/SessionEJBGlobals.vm")
#set ($generatedFile = "${service.fullyQualifiedNamePath}.java")
#if($service.findTaggedValue("@andromda.services.shared"))
#set ($generatedFile = "../../../../../core/cs/shared/target/src/${service.fullyQualifiedNamePath}.java")
#end
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: Session.vsl in andromda-ejb-cartridge-coppetec.
//
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

/**
 * @see $service.fullyQualifiedName
 */
public interface $service.name
##if ($service.generalization)
##    extends $service.generalization.fullyQualifiedName , ${service.name}BI
###else
    extends javax.ejb.EJBObject, ${service.name}BI
   
###end
{

#set($generalizations = $service.allGeneralizations)

#set($operations = $service.operations)

#foreach($generalization in $generalizations)
	#set($var = $operations.addAll($generalization.operations))
#end


#set($webService = $service.hasStereotype("$webSrv"))

#foreach ($operation in $operations)

#set ($listaArgumentos = '')
#set ($return = '')
#if($webService)
#renderParametersWS($operation $listaArgumentos true)
#renderReturnWS($operation $return)
#else
#renderParameters($operation $listaArgumentos true)
#set($return = $operation.returnType.fullyQualifiedName)
#end



#if ($operation.exceptionsPresent)
	#if($operation.visibility == 'public')
		## Only expose public methods
	   /**
	$operation.getDocumentation("    * ")
	    */
		$operation.visibility  $return ${operation.name} ($listaArgumentos) throws java.rmi.RemoteException, $operation.exceptionList;
	#end
	  
#else
	#if($operation.visibility == 'public')
	## Only expose public methods
	   /**
	$operation.getDocumentation("    * ")
	    */
		$operation.visibility  $return ${operation.name} ($listaArgumentos) throws java.rmi.RemoteException;
	#end
	  
#end


## [MOISES-COPPETEC]
## Codigo para gerar métodos que receba o grupo a ser carregado na paginação, caso este método retorne uma coleção 

###if ($stringUtils.contains($operation.returnType.fullyQualifiedName, "Collection"))
#if($operation.returnType.collectionType || $operation.returnType.listType || $operation.returnType.setType )

#set ($listaArgumentos = '')
#set ($return = '')
#if($webService)
#renderParametersWSPaginacao($operation $listaArgumentos true)
#renderReturnWS($operation $return)
#else
#renderParametersPaginacao($operation $listaArgumentos true)
#set($return = $operation.returnType.fullyQualifiedName)
#end


## Fim

#if ($operation.exceptionsPresent)
	#if($operation.visibility == 'public')
		## Only expose public methods
	   /**
	$operation.getDocumentation("    * ")
	    */
	$operation.visibility  $return ${operation.name} ($listaArgumentos) throws java.rmi.RemoteException, $operation.exceptionList;
	#end
	  
#else
	#if($operation.visibility == 'public')
	## Only expose public methods
	   /**
	$operation.getDocumentation("    * ")
	    */
	$operation.visibility  $return ${operation.name} ($listaArgumentos) throws java.rmi.RemoteException;
	#end
	  
#end
#end
#end
	
	##Adicao do metodo do CRUD por dependencia com entidade
	#foreach ($dependencia in $service.sourceDependencies)
#if($dependencia.targetElement.FullyQualifiedName.indexOf(".${modelPackageName}.") > 0)
#if($ejbSecurityEnabled)          
	  public java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> delete${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name})) 		throws java.rmi.RemoteException, ${customTypesPackage}.${actionPackageName}.ActionException;
	  public java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> filter${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name}), ${customTypesPackage}.${actionPackageName}.FilterAction action) 		throws java.rmi.RemoteException, ${customTypesPackage}.${actionPackageName}.ActionException;
	  public java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> export${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name}), ${customTypesPackage}.${actionPackageName}.ExportAction action) 		throws java.rmi.RemoteException, ${customTypesPackage}.${actionPackageName}.ActionException;
	  public java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> import${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name}), ${customTypesPackage}.${actionPackageName}.ImportAction action) 		throws java.rmi.RemoteException, ${customTypesPackage}.${actionPackageName}.ActionException;
	  public java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> insert${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name})) 		throws java.rmi.RemoteException, ${customTypesPackage}.${actionPackageName}.ActionException;
	  public java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> insertOrUpdate${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name})) 	throws java.rmi.RemoteException, ${customTypesPackage}.${actionPackageName}.ActionException;
	  public java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> list${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name}), ${customTypesPackage}.${actionPackageName}.ListAction action) 		throws java.rmi.RemoteException, ${customTypesPackage}.${actionPackageName}.ActionException;
	  public java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> select${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name})) 		throws java.rmi.RemoteException, ${customTypesPackage}.${actionPackageName}.ActionException;
	  public java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> update${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name})) 		throws java.rmi.RemoteException, ${customTypesPackage}.${actionPackageName}.ActionException;  	  	  	  	  	  
#end
	  public java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> manipula${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name}), ${customTypesPackage}.${actionPackageName}.Action action) throws java.rmi.RemoteException, ${customTypesPackage}.${actionPackageName}.ActionException;

#end
#end 
}
