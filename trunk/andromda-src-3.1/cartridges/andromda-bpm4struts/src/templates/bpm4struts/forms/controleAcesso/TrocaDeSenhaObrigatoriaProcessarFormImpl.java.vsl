// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: TrocaDeSenhaObrigatoriaProcessarFormImpl.java.vsl in andromda-bpm4struts-cartridge-coppetec.
//
package $controleAcessoDir;

#set ($packageUtil = "${stringUtils.replace($utilDir,'/','.')}")
import ${packageUtil}.Constantes;



public class TrocaDeSenhaObrigatoriaProcessarFormImpl
    extends LoginFormImpl 
    implements java.io.Serializable
        , TrocaEfetuadaComSucessoForm
{

    private java.lang.String novaSenha;
    private Object[] novaSenhaValueList;
    private Object[] novaSenhaLabelList;
    private java.lang.String usuario;
    private Object[] usuarioValueList;
    private Object[] usuarioLabelList;
    private java.lang.String senha;
    private Object[] senhaValueList;
    private Object[] senhaLabelList;
    private java.lang.String confirmacao;
    private Object[] confirmacaoValueList;
    private Object[] confirmacaoLabelList;

    public TrocaDeSenhaObrigatoriaProcessarFormImpl()
    {
    }

    /**
     * Resets the given <code>novaSenha</code>.
     */
    public void resetNovaSenha()
    {
        this.novaSenha = null;
    }
    
    public void setNovaSenha(java.lang.String novaSenha)
    {
        this.novaSenha = novaSenha;
    }

    /**
     * 
     */
    public java.lang.String getNovaSenha()
    {
        return this.novaSenha;
    }
    

    public Object[] getNovaSenhaBackingList()
    {
        Object[] values = this.novaSenhaValueList;
        Object[] labels = this.novaSenhaLabelList;

        if (values == null || values.length == 0)
        {
            return values;
        }

        if (labels == null || labels.length == 0)
        {
            labels = values;
        }

        final int length = Math.min(labels.length, values.length);
        Object[] backingList = new Object[length];

        for (int i=0; i<length; i++)
        {
            backingList[i] = new LabelValue(labels[i], values[i]);
        }

        return backingList;
    }

    public Object[] getNovaSenhaValueList()
    {
        return this.novaSenhaValueList;
    }

    public void setNovaSenhaValueList(Object[] novaSenhaValueList)
    {
        this.novaSenhaValueList = novaSenhaValueList;
    }

    public Object[] getNovaSenhaLabelList()
    {
        return this.novaSenhaLabelList;
    }

    public void setNovaSenhaLabelList(Object[] novaSenhaLabelList)
    {
        this.novaSenhaLabelList = novaSenhaLabelList;
    }

    /**
     * Convenient method to quickly set the value and label backinglist for the
     * novaSenha property. This method takes a collection of objects, as well as
     * the property names to query on these objects in order to find the corresponding
     * values and labels.
     * <p/>
     * Let's say you have a set of value objects with the following properties:
     * <ul>
     *  <li><code>id</code></li>
     *  <li><code>code</code></li>
     *  <li><code>name</code></li>
     *  <li><code>description</code></li>
     * </ul>
     * But you need to populate the novaSenha backing list with the <code>id</code> properties as the values and the
     * <code>name</code> properties as the labels then you would make a call like this:
     * <code>setNovaSenhaBackingList(valueObjects, "id", "name")</code>
     * <p/>
     * This method knows how to handle primitive property types as it simply delegates to
     * <code>org.apache.commons.beanutils.PropertyUtils.getProperty(Object, String)</code>.
     *
     * @param items The items from which to read the properties, if this argument is <code>null</code> this method
     *        will simply clear the existing values and labels
     * @param valueProperty the name of the property to query on each object to retrieve
     *        the corresponding value, cannot be <code>null</code>
     * @throws java.lang.IllegalArgumentException if the valueProperty or labelProperty is <code>null</code>
     * @throws java.lang.RuntimeException if one of the items in the collection is <code>null</code>, or 
     *         if the caller does not have access one of the object's properties, if an exception was thrown while 
     *         accessing a property or if the property does not exist on at least one of the items
     */
    public void setNovaSenhaBackingList(java.util.Collection items, String valueProperty, String labelProperty)
    {
        if (valueProperty == null || labelProperty == null)
        {
            throw new IllegalArgumentException("TrocaDeSenhaObrigatoriaProcessarFormImpl.setNovaSenhaBackingList requires non-null property arguments");
        }

        this.novaSenhaValueList = null;
        this.novaSenhaLabelList = null;

        if (items != null)
        {
            this.novaSenhaValueList = new Object[items.size()];
            this.novaSenhaLabelList = new Object[items.size()];

            try
            {
                int i = 0;
                for (java.util.Iterator iterator = items.iterator(); iterator.hasNext(); i++)
                {
                    final Object item = iterator.next();

                    this.novaSenhaValueList[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, valueProperty);
                    this.novaSenhaLabelList[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, labelProperty);
                }
            }
            catch (Exception ex)
            {
                throw new RuntimeException("TrocaDeSenhaObrigatoriaProcessarFormImpl.setNovaSenhaBackingList encountered an exception", ex);
            }
        }
    }

    /**
     * Resets the given <code>usuario</code>.
     */
    public void resetUsuario()
    {
        this.usuario = null;
    }
    
    public void setUsuario(java.lang.String usuario)
    {
        this.usuario = usuario;
    }

    /**
     * 
     */
    public java.lang.String getUsuario()
    {
        return this.usuario;
    }
    

    public Object[] getUsuarioBackingList()
    {
        Object[] values = this.usuarioValueList;
        Object[] labels = this.usuarioLabelList;

        if (values == null || values.length == 0)
        {
            return values;
        }

        if (labels == null || labels.length == 0)
        {
            labels = values;
        }

        final int length = Math.min(labels.length, values.length);
        Object[] backingList = new Object[length];

        for (int i=0; i<length; i++)
        {
            backingList[i] = new LabelValue(labels[i], values[i]);
        }

        return backingList;
    }

    public Object[] getUsuarioValueList()
    {
        return this.usuarioValueList;
    }

    public void setUsuarioValueList(Object[] usuarioValueList)
    {
        this.usuarioValueList = usuarioValueList;
    }

    public Object[] getUsuarioLabelList()
    {
        return this.usuarioLabelList;
    }

    public void setUsuarioLabelList(Object[] usuarioLabelList)
    {
        this.usuarioLabelList = usuarioLabelList;
    }

    /**
     * Convenient method to quickly set the value and label backinglist for the
     * usuario property. This method takes a collection of objects, as well as
     * the property names to query on these objects in order to find the corresponding
     * values and labels.
     * <p/>
     * Let's say you have a set of value objects with the following properties:
     * <ul>
     *  <li><code>id</code></li>
     *  <li><code>code</code></li>
     *  <li><code>name</code></li>
     *  <li><code>description</code></li>
     * </ul>
     * But you need to populate the usuario backing list with the <code>id</code> properties as the values and the
     * <code>name</code> properties as the labels then you would make a call like this:
     * <code>setUsuarioBackingList(valueObjects, "id", "name")</code>
     * <p/>
     * This method knows how to handle primitive property types as it simply delegates to
     * <code>org.apache.commons.beanutils.PropertyUtils.getProperty(Object, String)</code>.
     *
     * @param items The items from which to read the properties, if this argument is <code>null</code> this method
     *        will simply clear the existing values and labels
     * @param valueProperty the name of the property to query on each object to retrieve
     *        the corresponding value, cannot be <code>null</code>
     * @throws java.lang.IllegalArgumentException if the valueProperty or labelProperty is <code>null</code>
     * @throws java.lang.RuntimeException if one of the items in the collection is <code>null</code>, or 
     *         if the caller does not have access one of the object's properties, if an exception was thrown while 
     *         accessing a property or if the property does not exist on at least one of the items
     */
    public void setUsuarioBackingList(java.util.Collection items, String valueProperty, String labelProperty)
    {
        if (valueProperty == null || labelProperty == null)
        {
            throw new IllegalArgumentException("TrocaDeSenhaObrigatoriaProcessarFormImpl.setUsuarioBackingList requires non-null property arguments");
        }

        this.usuarioValueList = null;
        this.usuarioLabelList = null;

        if (items != null)
        {
            this.usuarioValueList = new Object[items.size()];
            this.usuarioLabelList = new Object[items.size()];

            try
            {
                int i = 0;
                for (java.util.Iterator iterator = items.iterator(); iterator.hasNext(); i++)
                {
                    final Object item = iterator.next();

                    this.usuarioValueList[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, valueProperty);
                    this.usuarioLabelList[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, labelProperty);
                }
            }
            catch (Exception ex)
            {
                throw new RuntimeException("TrocaDeSenhaObrigatoriaProcessarFormImpl.setUsuarioBackingList encountered an exception", ex);
            }
        }
    }

    /**
     * Resets the given <code>senha</code>.
     */
    public void resetSenha()
    {
        this.senha = null;
    }
    
    public void setSenha(java.lang.String senha)
    {
        this.senha = senha;
    }

    /**
     * 
     */
    public java.lang.String getSenha()
    {
        return this.senha;
    }
    

    public Object[] getSenhaBackingList()
    {
        Object[] values = this.senhaValueList;
        Object[] labels = this.senhaLabelList;

        if (values == null || values.length == 0)
        {
            return values;
        }

        if (labels == null || labels.length == 0)
        {
            labels = values;
        }

        final int length = Math.min(labels.length, values.length);
        Object[] backingList = new Object[length];

        for (int i=0; i<length; i++)
        {
            backingList[i] = new LabelValue(labels[i], values[i]);
        }

        return backingList;
    }

    public Object[] getSenhaValueList()
    {
        return this.senhaValueList;
    }

    public void setSenhaValueList(Object[] senhaValueList)
    {
        this.senhaValueList = senhaValueList;
    }

    public Object[] getSenhaLabelList()
    {
        return this.senhaLabelList;
    }

    public void setSenhaLabelList(Object[] senhaLabelList)
    {
        this.senhaLabelList = senhaLabelList;
    }

    /**
     * Convenient method to quickly set the value and label backinglist for the
     * senha property. This method takes a collection of objects, as well as
     * the property names to query on these objects in order to find the corresponding
     * values and labels.
     * <p/>
     * Let's say you have a set of value objects with the following properties:
     * <ul>
     *  <li><code>id</code></li>
     *  <li><code>code</code></li>
     *  <li><code>name</code></li>
     *  <li><code>description</code></li>
     * </ul>
     * But you need to populate the senha backing list with the <code>id</code> properties as the values and the
     * <code>name</code> properties as the labels then you would make a call like this:
     * <code>setSenhaBackingList(valueObjects, "id", "name")</code>
     * <p/>
     * This method knows how to handle primitive property types as it simply delegates to
     * <code>org.apache.commons.beanutils.PropertyUtils.getProperty(Object, String)</code>.
     *
     * @param items The items from which to read the properties, if this argument is <code>null</code> this method
     *        will simply clear the existing values and labels
     * @param valueProperty the name of the property to query on each object to retrieve
     *        the corresponding value, cannot be <code>null</code>
     * @throws java.lang.IllegalArgumentException if the valueProperty or labelProperty is <code>null</code>
     * @throws java.lang.RuntimeException if one of the items in the collection is <code>null</code>, or 
     *         if the caller does not have access one of the object's properties, if an exception was thrown while 
     *         accessing a property or if the property does not exist on at least one of the items
     */
    public void setSenhaBackingList(java.util.Collection items, String valueProperty, String labelProperty)
    {
        if (valueProperty == null || labelProperty == null)
        {
            throw new IllegalArgumentException("TrocaDeSenhaObrigatoriaProcessarFormImpl.setSenhaBackingList requires non-null property arguments");
        }

        this.senhaValueList = null;
        this.senhaLabelList = null;

        if (items != null)
        {
            this.senhaValueList = new Object[items.size()];
            this.senhaLabelList = new Object[items.size()];

            try
            {
                int i = 0;
                for (java.util.Iterator iterator = items.iterator(); iterator.hasNext(); i++)
                {
                    final Object item = iterator.next();

                    this.senhaValueList[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, valueProperty);
                    this.senhaLabelList[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, labelProperty);
                }
            }
            catch (Exception ex)
            {
                throw new RuntimeException("TrocaDeSenhaObrigatoriaProcessarFormImpl.setSenhaBackingList encountered an exception", ex);
            }
        }
    }

    /**
     * Resets the given <code>confirmacao</code>.
     */
    public void resetConfirmacao()
    {
        this.confirmacao = null;
    }
    
    public void setConfirmacao(java.lang.String confirmacao)
    {
        this.confirmacao = confirmacao;
    }

    /**
     * 
     */
    public java.lang.String getConfirmacao()
    {
        return this.confirmacao;
    }
    

    public Object[] getConfirmacaoBackingList()
    {
        Object[] values = this.confirmacaoValueList;
        Object[] labels = this.confirmacaoLabelList;

        if (values == null || values.length == 0)
        {
            return values;
        }

        if (labels == null || labels.length == 0)
        {
            labels = values;
        }

        final int length = Math.min(labels.length, values.length);
        Object[] backingList = new Object[length];

        for (int i=0; i<length; i++)
        {
            backingList[i] = new LabelValue(labels[i], values[i]);
        }

        return backingList;
    }

    public Object[] getConfirmacaoValueList()
    {
        return this.confirmacaoValueList;
    }

    public void setConfirmacaoValueList(Object[] confirmacaoValueList)
    {
        this.confirmacaoValueList = confirmacaoValueList;
    }

    public Object[] getConfirmacaoLabelList()
    {
        return this.confirmacaoLabelList;
    }

    public void setConfirmacaoLabelList(Object[] confirmacaoLabelList)
    {
        this.confirmacaoLabelList = confirmacaoLabelList;
    }

    /**
     * Convenient method to quickly set the value and label backinglist for the
     * confirmacao property. This method takes a collection of objects, as well as
     * the property names to query on these objects in order to find the corresponding
     * values and labels.
     * <p/>
     * Let's say you have a set of value objects with the following properties:
     * <ul>
     *  <li><code>id</code></li>
     *  <li><code>code</code></li>
     *  <li><code>name</code></li>
     *  <li><code>description</code></li>
     * </ul>
     * But you need to populate the confirmacao backing list with the <code>id</code> properties as the values and the
     * <code>name</code> properties as the labels then you would make a call like this:
     * <code>setConfirmacaoBackingList(valueObjects, "id", "name")</code>
     * <p/>
     * This method knows how to handle primitive property types as it simply delegates to
     * <code>org.apache.commons.beanutils.PropertyUtils.getProperty(Object, String)</code>.
     *
     * @param items The items from which to read the properties, if this argument is <code>null</code> this method
     *        will simply clear the existing values and labels
     * @param valueProperty the name of the property to query on each object to retrieve
     *        the corresponding value, cannot be <code>null</code>
     * @throws java.lang.IllegalArgumentException if the valueProperty or labelProperty is <code>null</code>
     * @throws java.lang.RuntimeException if one of the items in the collection is <code>null</code>, or 
     *         if the caller does not have access one of the object's properties, if an exception was thrown while 
     *         accessing a property or if the property does not exist on at least one of the items
     */
    public void setConfirmacaoBackingList(java.util.Collection items, String valueProperty, String labelProperty)
    {
        if (valueProperty == null || labelProperty == null)
        {
            throw new IllegalArgumentException("TrocaDeSenhaObrigatoriaProcessarFormImpl.setConfirmacaoBackingList requires non-null property arguments");
        }

        this.confirmacaoValueList = null;
        this.confirmacaoLabelList = null;

        if (items != null)
        {
            this.confirmacaoValueList = new Object[items.size()];
            this.confirmacaoLabelList = new Object[items.size()];

            try
            {
                int i = 0;
                for (java.util.Iterator iterator = items.iterator(); iterator.hasNext(); i++)
                {
                    final Object item = iterator.next();

                    this.confirmacaoValueList[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, valueProperty);
                    this.confirmacaoLabelList[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, labelProperty);
                }
            }
            catch (Exception ex)
            {
                throw new RuntimeException("TrocaDeSenhaObrigatoriaProcessarFormImpl.setConfirmacaoBackingList encountered an exception", ex);
            }
        }
    }

    /**
     * @see org.apache.struts.validator.ValidatorForm#reset(org.apache.struts.action.ActionMapping,javax.servlet.http.HttpServletRequest)
     */
    public void reset(org.apache.struts.action.ActionMapping mapping, javax.servlet.http.HttpServletRequest request)
    {
    }

    public String toString()
    {
        org.apache.commons.lang.builder.ToStringBuilder builder =
            new org.apache.commons.lang.builder.ToStringBuilder(this);
        builder.append("novaSenha", "***");
        builder.append("usuario", this.usuario);
        builder.append("senha", "***");
        builder.append("confirmacao", "***");
        return builder.toString();
    }

    /**
     * Allows you to clean all values from this form. Objects will be set to <code>null</code>, numeric values will be
     * set to zero and boolean values will be set to <code>false</code>. Backinglists for selectable fields will
     * also be set to <code>null</code>.
     */
    public void clean()
    {
        this.novaSenha = null;
        this.usuario = null;
        this.senha = null;
        this.confirmacao = null;
    }

    /**
     * Override to provide population of current form with request parameters when validation fails.
     *
     * @see org.apache.struts.action.ActionForm#validate(org.apache.struts.action.ActionMapping, javax.servlet.http.HttpServletRequest)
     */
    public org.apache.struts.action.ActionErrors validate(org.apache.struts.action.ActionMapping mapping, javax.servlet.http.HttpServletRequest request)
    {
       	org.apache.struts.action.ActionErrors errors = new 	org.apache.struts.action.ActionErrors();
    	   	if(request.getParameter("menu") == null){    
        //final org.apache.struts.action.ActionErrors errors = super.validate(mapping, request);
        if (errors != null && !errors.isEmpty())
        {
			#populateCurrentFormOnError()
		}        
		}else{           
        	    request.getSession().setAttribute(Constantes.MENU, "true");      
        }
        return errors;
    }

    public final static class LabelValue
    {
        private Object label = null;
        private Object value = null;

        public LabelValue(Object label, Object value)
        {
            this.label = label;
            this.value = value;
        }

        public Object getLabel()
        {
            return this.label;
        }

        public Object getValue()
        {
            return this.value;
        }

        public String toString()
        {
            return label + "=" + value;
        }
    }
    
    public boolean isFieldVisibleInOperationMode(String field, java.util.Collection modosOperacao) {
    	return true;
    }
    
    public String getOperationModeKey(){
        return "";
    }
}
