/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.andromda.translation.ocl.node;

import java.util.*;
import org.andromda.translation.ocl.analysis.*;

public final class ADotPropertyCallExpressionTail extends PPropertyCallExpressionTail
{
    private TDot _dot_;
    private PFeatureCall _featureCall_;

    public ADotPropertyCallExpressionTail()
    {
    }

    public ADotPropertyCallExpressionTail(
        TDot _dot_,
        PFeatureCall _featureCall_)
    {
        setDot(_dot_);

        setFeatureCall(_featureCall_);

    }
    public Object clone()
    {
        return new ADotPropertyCallExpressionTail(
            (TDot) cloneNode(_dot_),
            (PFeatureCall) cloneNode(_featureCall_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADotPropertyCallExpressionTail(this);
    }

    public TDot getDot()
    {
        return _dot_;
    }

    public void setDot(TDot node)
    {
        if(_dot_ != null)
        {
            _dot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _dot_ = node;
    }

    public PFeatureCall getFeatureCall()
    {
        return _featureCall_;
    }

    public void setFeatureCall(PFeatureCall node)
    {
        if(_featureCall_ != null)
        {
            _featureCall_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _featureCall_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_dot_)
            + toString(_featureCall_);
    }

    void removeChild(Node child)
    {
        if(_dot_ == child)
        {
            _dot_ = null;
            return;
        }

        if(_featureCall_ == child)
        {
            _featureCall_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_dot_ == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        if(_featureCall_ == oldChild)
        {
            setFeatureCall((PFeatureCall) newChild);
            return;
        }

    }
}
