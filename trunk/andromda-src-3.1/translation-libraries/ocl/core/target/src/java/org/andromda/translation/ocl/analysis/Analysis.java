/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.andromda.translation.ocl.analysis;

import org.andromda.translation.ocl.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAPackageDeclaration(APackageDeclaration node);
    void caseAContextDeclaration(AContextDeclaration node);
    void caseAClassifierContextDeclaration(AClassifierContextDeclaration node);
    void caseAOperationContextDeclaration(AOperationContextDeclaration node);
    void caseAAttributeOrAssociationContextDeclaration(AAttributeOrAssociationContextDeclaration node);
    void caseAAttributeOrAssociationExpressionBody(AAttributeOrAssociationExpressionBody node);
    void caseAScopeOperatorName(AScopeOperatorName node);
    void caseAInitInitialOrDerivedValue(AInitInitialOrDerivedValue node);
    void caseADeriveInitialOrDerivedValue(ADeriveInitialOrDerivedValue node);
    void caseADefClassifierExpressionBody(ADefClassifierExpressionBody node);
    void caseAInvClassifierExpressionBody(AInvClassifierExpressionBody node);
    void caseAVariableDefinitionExpression(AVariableDefinitionExpression node);
    void caseAOperationDefinitionExpression(AOperationDefinitionExpression node);
    void caseAOperationExpressionBody(AOperationExpressionBody node);
    void caseAOperation(AOperation node);
    void caseAVariableDeclaration(AVariableDeclaration node);
    void caseATypeDeclaration(ATypeDeclaration node);
    void caseAVariableDeclarationList(AVariableDeclarationList node);
    void caseAVariableDeclarationListTail(AVariableDeclarationListTail node);
    void caseAEqualExpression(AEqualExpression node);
    void caseABodyOperationStereotype(ABodyOperationStereotype node);
    void caseAPreOperationStereotype(APreOperationStereotype node);
    void caseAPostOperationStereotype(APostOperationStereotype node);
    void caseALetExpression(ALetExpression node);
    void caseALogicalExpression(ALogicalExpression node);
    void caseAMessageExpression(AMessageExpression node);
    void caseAIfExpression(AIfExpression node);
    void caseALogicalExp(ALogicalExp node);
    void caseALogicalExpressionTail(ALogicalExpressionTail node);
    void caseARelationalExpression(ARelationalExpression node);
    void caseARelationalExpressionTail(ARelationalExpressionTail node);
    void caseAAdditiveExpression(AAdditiveExpression node);
    void caseAAdditiveExpressionTail(AAdditiveExpressionTail node);
    void caseAMultiplicativeExpression(AMultiplicativeExpression node);
    void caseAMultiplicativeExpressionTail(AMultiplicativeExpressionTail node);
    void caseAUnaryExpression(AUnaryExpression node);
    void caseAPropertyCallExpression(APropertyCallExpression node);
    void caseADotPropertyCallExpressionTail(ADotPropertyCallExpressionTail node);
    void caseAArrowPropertyCallExpressionTail(AArrowPropertyCallExpressionTail node);
    void caseALiteralPrimaryExpression(ALiteralPrimaryExpression node);
    void caseAFeaturePrimaryExpression(AFeaturePrimaryExpression node);
    void caseAParenthesesPrimaryExpression(AParenthesesPrimaryExpression node);
    void caseAIfPrimaryExpression(AIfPrimaryExpression node);
    void caseAConcreteFeatureCallParameters(AConcreteFeatureCallParameters node);
    void caseAFeatureCallParameters(AFeatureCallParameters node);
    void caseAStandardDeclarator(AStandardDeclarator node);
    void caseAIterateDeclarator(AIterateDeclarator node);
    void caseADeclaratorTail(ADeclaratorTail node);
    void caseACommaExpression(ACommaExpression node);
    void caseACommaFeatureCallParameterOption(ACommaFeatureCallParameterOption node);
    void caseAColonFeatureCallParameterOption(AColonFeatureCallParameterOption node);
    void caseAIterateFeatureCallParameterOption(AIterateFeatureCallParameterOption node);
    void caseABarFeatureCallParameterOption(ABarFeatureCallParameterOption node);
    void caseALetExp(ALetExp node);
    void caseAVariableDeclarationLetExpSub(AVariableDeclarationLetExpSub node);
    void caseAInLetExpSub(AInLetExpSub node);
    void caseALetVariableDeclaration(ALetVariableDeclaration node);
    void caseACollectionLiteral(ACollectionLiteral node);
    void caseAPrimitiveLiteral(APrimitiveLiteral node);
    void caseATupleLiteral(ATupleLiteral node);
    void caseAStringPrimitiveLit(AStringPrimitiveLit node);
    void caseARealPrimitiveLit(ARealPrimitiveLit node);
    void caseAIntegerPrimitiveLit(AIntegerPrimitiveLit node);
    void caseABooleanPrimitiveLit(ABooleanPrimitiveLit node);
    void caseATupleLit(ATupleLit node);
    void caseACollectionLit(ACollectionLit node);
    void caseAExpressionListOrRange(AExpressionListOrRange node);
    void caseAListExpressionListOrRangeTail(AListExpressionListOrRangeTail node);
    void caseARangeExpressionListOrRangeTail(ARangeExpressionListOrRangeTail node);
    void caseAFeatureCall(AFeatureCall node);
    void caseAQualifiers(AQualifiers node);
    void caseASimpleType(ASimpleType node);
    void caseACollectionType(ACollectionType node);
    void caseATupletypeType(ATupletypeType node);
    void caseASetCollectionType(ASetCollectionType node);
    void caseABagCollectionType(ABagCollectionType node);
    void caseASequenceCollectionType(ASequenceCollectionType node);
    void caseAOrderedsetCollectionType(AOrderedsetCollectionType node);
    void caseACollectionCollectionType(ACollectionCollectionType node);
    void caseATupleType(ATupleType node);
    void caseAMessageMessageExp(AMessageMessageExp node);
    void caseAIsSentMessageExp(AIsSentMessageExp node);
    void caseAMessageArguments(AMessageArguments node);
    void caseAMessageArgumentsTail(AMessageArgumentsTail node);
    void caseATypeMessageArgument(ATypeMessageArgument node);
    void caseAExpMessageArgument(AExpMessageArgument node);
    void caseAPathName(APathName node);
    void caseAPathNameTail(APathNameTail node);
    void caseAIsMarkedPre(AIsMarkedPre node);
    void caseAActualParameterList(AActualParameterList node);
    void caseAAndLogicalOperator(AAndLogicalOperator node);
    void caseAOrLogicalOperator(AOrLogicalOperator node);
    void caseAXorLogicalOperator(AXorLogicalOperator node);
    void caseAImpliesLogicalOperator(AImpliesLogicalOperator node);
    void caseASetCollectionKind(ASetCollectionKind node);
    void caseABagCollectionKind(ABagCollectionKind node);
    void caseASequenceCollectionKind(ASequenceCollectionKind node);
    void caseACollectionCollectionKind(ACollectionCollectionKind node);
    void caseAEqualRelationalOperator(AEqualRelationalOperator node);
    void caseANotEqualRelationalOperator(ANotEqualRelationalOperator node);
    void caseAGtRelationalOperator(AGtRelationalOperator node);
    void caseALtRelationalOperator(ALtRelationalOperator node);
    void caseAGteqRelationalOperator(AGteqRelationalOperator node);
    void caseALteqRelationalOperator(ALteqRelationalOperator node);
    void caseAPlusAddOperator(APlusAddOperator node);
    void caseAMinusAddOperator(AMinusAddOperator node);
    void caseAMultMultiplyOperator(AMultMultiplyOperator node);
    void caseADivMultiplyOperator(ADivMultiplyOperator node);
    void caseAMinusUnaryOperator(AMinusUnaryOperator node);
    void caseANotUnaryOperator(ANotUnaryOperator node);

    void caseTSingleLineComment(TSingleLineComment node);
    void caseTMultiLineComment(TMultiLineComment node);
    void caseTDot(TDot node);
    void caseTArrow(TArrow node);
    void caseTIsSentOperator(TIsSentOperator node);
    void caseTMessageOperator(TMessageOperator node);
    void caseTNot(TNot node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTPackage(TPackage node);
    void caseTEndpackage(TEndpackage node);
    void caseTInit(TInit node);
    void caseTDerive(TDerive node);
    void caseTDef(TDef node);
    void caseTAttr(TAttr node);
    void caseTOper(TOper node);
    void caseTContext(TContext node);
    void caseTEnum(TEnum node);
    void caseTPre(TPre node);
    void caseTPost(TPost node);
    void caseTInv(TInv node);
    void caseTBody(TBody node);
    void caseTEqual(TEqual node);
    void caseTNotEqual(TNotEqual node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTLteq(TLteq node);
    void caseTGteq(TGteq node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTXor(TXor node);
    void caseTImplies(TImplies node);
    void caseTLParen(TLParen node);
    void caseTRParen(TRParen node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTSemicolon(TSemicolon node);
    void caseTScopeOperator(TScopeOperator node);
    void caseTColon(TColon node);
    void caseTComma(TComma node);
    void caseTCommercialAt(TCommercialAt node);
    void caseTBar(TBar node);
    void caseTRange(TRange node);
    void caseTApostrophe(TApostrophe node);
    void caseTUnknown(TUnknown node);
    void caseTLet(TLet node);
    void caseTIn(TIn node);
    void caseTIf(TIf node);
    void caseTThen(TThen node);
    void caseTElse(TElse node);
    void caseTEndif(TEndif node);
    void caseTSet(TSet node);
    void caseTBag(TBag node);
    void caseTSequence(TSequence node);
    void caseTCollection(TCollection node);
    void caseTOrderedset(TOrderedset node);
    void caseTTuple(TTuple node);
    void caseTTupletype(TTupletype node);
    void caseTBoolean(TBoolean node);
    void caseTName(TName node);
    void caseTNewLine(TNewLine node);
    void caseTInt(TInt node);
    void caseTReal(TReal node);
    void caseTBlank(TBlank node);
    void caseTTab(TTab node);
    void caseTStringLit(TStringLit node);
    void caseEOF(EOF node);
}
