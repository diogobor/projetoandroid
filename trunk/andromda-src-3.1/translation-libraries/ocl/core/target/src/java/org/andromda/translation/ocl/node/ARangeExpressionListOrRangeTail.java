/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.andromda.translation.ocl.node;

import java.util.*;
import org.andromda.translation.ocl.analysis.*;

public final class ARangeExpressionListOrRangeTail extends PExpressionListOrRangeTail
{
    private TRange _range_;
    private PExpression _expression_;

    public ARangeExpressionListOrRangeTail()
    {
    }

    public ARangeExpressionListOrRangeTail(
        TRange _range_,
        PExpression _expression_)
    {
        setRange(_range_);

        setExpression(_expression_);

    }
    public Object clone()
    {
        return new ARangeExpressionListOrRangeTail(
            (TRange) cloneNode(_range_),
            (PExpression) cloneNode(_expression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARangeExpressionListOrRangeTail(this);
    }

    public TRange getRange()
    {
        return _range_;
    }

    public void setRange(TRange node)
    {
        if(_range_ != null)
        {
            _range_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _range_ = node;
    }

    public PExpression getExpression()
    {
        return _expression_;
    }

    public void setExpression(PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_range_)
            + toString(_expression_);
    }

    void removeChild(Node child)
    {
        if(_range_ == child)
        {
            _range_ = null;
            return;
        }

        if(_expression_ == child)
        {
            _expression_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_range_ == oldChild)
        {
            setRange((TRange) newChild);
            return;
        }

        if(_expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

    }
}
