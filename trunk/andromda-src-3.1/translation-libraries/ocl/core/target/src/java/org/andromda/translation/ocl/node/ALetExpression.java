/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.andromda.translation.ocl.node;

import java.util.*;
import org.andromda.translation.ocl.analysis.*;

public final class ALetExpression extends PExpression
{
    private final LinkedList _letExp_ = new TypedLinkedList(new LetExp_Cast());

    public ALetExpression()
    {
    }

    public ALetExpression(
        List _letExp_)
    {
        {
            this._letExp_.clear();
            this._letExp_.addAll(_letExp_);
        }

    }

    public ALetExpression(
        XPLetExp _letExp_)
    {
        if(_letExp_ != null)
        {
            while(_letExp_ instanceof X1PLetExp)
            {
                this._letExp_.addFirst(((X1PLetExp) _letExp_).getPLetExp());
                _letExp_ = ((X1PLetExp) _letExp_).getXPLetExp();
            }
            this._letExp_.addFirst(((X2PLetExp) _letExp_).getPLetExp());
        }

    }
    public Object clone()
    {
        return new ALetExpression(
            cloneList(_letExp_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALetExpression(this);
    }

    public LinkedList getLetExp()
    {
        return _letExp_;
    }

    public void setLetExp(List list)
    {
        _letExp_.clear();
        _letExp_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_letExp_);
    }

    void removeChild(Node child)
    {
        if(_letExp_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for(ListIterator i = _letExp_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class LetExp_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PLetExp node = (PLetExp) o;

            if((node.parent() != null) &&
                (node.parent() != ALetExpression.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ALetExpression.this))
            {
                node.parent(ALetExpression.this);
            }

            return node;
        }
    }
}
