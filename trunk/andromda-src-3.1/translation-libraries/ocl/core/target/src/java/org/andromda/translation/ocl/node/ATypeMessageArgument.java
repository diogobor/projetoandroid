/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.andromda.translation.ocl.node;

import java.util.*;
import org.andromda.translation.ocl.analysis.*;

public final class ATypeMessageArgument extends PMessageArgument
{
    private TUnknown _unknown_;
    private PTypeDeclaration _typeDeclaration_;

    public ATypeMessageArgument()
    {
    }

    public ATypeMessageArgument(
        TUnknown _unknown_,
        PTypeDeclaration _typeDeclaration_)
    {
        setUnknown(_unknown_);

        setTypeDeclaration(_typeDeclaration_);

    }
    public Object clone()
    {
        return new ATypeMessageArgument(
            (TUnknown) cloneNode(_unknown_),
            (PTypeDeclaration) cloneNode(_typeDeclaration_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATypeMessageArgument(this);
    }

    public TUnknown getUnknown()
    {
        return _unknown_;
    }

    public void setUnknown(TUnknown node)
    {
        if(_unknown_ != null)
        {
            _unknown_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _unknown_ = node;
    }

    public PTypeDeclaration getTypeDeclaration()
    {
        return _typeDeclaration_;
    }

    public void setTypeDeclaration(PTypeDeclaration node)
    {
        if(_typeDeclaration_ != null)
        {
            _typeDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _typeDeclaration_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_unknown_)
            + toString(_typeDeclaration_);
    }

    void removeChild(Node child)
    {
        if(_unknown_ == child)
        {
            _unknown_ = null;
            return;
        }

        if(_typeDeclaration_ == child)
        {
            _typeDeclaration_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_unknown_ == oldChild)
        {
            setUnknown((TUnknown) newChild);
            return;
        }

        if(_typeDeclaration_ == oldChild)
        {
            setTypeDeclaration((PTypeDeclaration) newChild);
            return;
        }

    }
}
