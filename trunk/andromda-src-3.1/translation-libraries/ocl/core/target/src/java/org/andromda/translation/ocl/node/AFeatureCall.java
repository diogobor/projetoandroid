/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.andromda.translation.ocl.node;

import java.util.*;
import org.andromda.translation.ocl.analysis.*;

public final class AFeatureCall extends PFeatureCall
{
    private PPathName _pathName_;
    private PIsMarkedPre _isMarkedPre_;
    private PQualifiers _qualifiers_;
    private PFeatureCallParameters _featureCallParameters_;

    public AFeatureCall()
    {
    }

    public AFeatureCall(
        PPathName _pathName_,
        PIsMarkedPre _isMarkedPre_,
        PQualifiers _qualifiers_,
        PFeatureCallParameters _featureCallParameters_)
    {
        setPathName(_pathName_);

        setIsMarkedPre(_isMarkedPre_);

        setQualifiers(_qualifiers_);

        setFeatureCallParameters(_featureCallParameters_);

    }
    public Object clone()
    {
        return new AFeatureCall(
            (PPathName) cloneNode(_pathName_),
            (PIsMarkedPre) cloneNode(_isMarkedPre_),
            (PQualifiers) cloneNode(_qualifiers_),
            (PFeatureCallParameters) cloneNode(_featureCallParameters_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFeatureCall(this);
    }

    public PPathName getPathName()
    {
        return _pathName_;
    }

    public void setPathName(PPathName node)
    {
        if(_pathName_ != null)
        {
            _pathName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _pathName_ = node;
    }

    public PIsMarkedPre getIsMarkedPre()
    {
        return _isMarkedPre_;
    }

    public void setIsMarkedPre(PIsMarkedPre node)
    {
        if(_isMarkedPre_ != null)
        {
            _isMarkedPre_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _isMarkedPre_ = node;
    }

    public PQualifiers getQualifiers()
    {
        return _qualifiers_;
    }

    public void setQualifiers(PQualifiers node)
    {
        if(_qualifiers_ != null)
        {
            _qualifiers_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _qualifiers_ = node;
    }

    public PFeatureCallParameters getFeatureCallParameters()
    {
        return _featureCallParameters_;
    }

    public void setFeatureCallParameters(PFeatureCallParameters node)
    {
        if(_featureCallParameters_ != null)
        {
            _featureCallParameters_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _featureCallParameters_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_pathName_)
            + toString(_isMarkedPre_)
            + toString(_qualifiers_)
            + toString(_featureCallParameters_);
    }

    void removeChild(Node child)
    {
        if(_pathName_ == child)
        {
            _pathName_ = null;
            return;
        }

        if(_isMarkedPre_ == child)
        {
            _isMarkedPre_ = null;
            return;
        }

        if(_qualifiers_ == child)
        {
            _qualifiers_ = null;
            return;
        }

        if(_featureCallParameters_ == child)
        {
            _featureCallParameters_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_pathName_ == oldChild)
        {
            setPathName((PPathName) newChild);
            return;
        }

        if(_isMarkedPre_ == oldChild)
        {
            setIsMarkedPre((PIsMarkedPre) newChild);
            return;
        }

        if(_qualifiers_ == oldChild)
        {
            setQualifiers((PQualifiers) newChild);
            return;
        }

        if(_featureCallParameters_ == oldChild)
        {
            setFeatureCallParameters((PFeatureCallParameters) newChild);
            return;
        }

    }
}
