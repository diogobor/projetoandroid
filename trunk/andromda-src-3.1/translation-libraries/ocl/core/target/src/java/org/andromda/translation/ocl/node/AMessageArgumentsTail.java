/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.andromda.translation.ocl.node;

import java.util.*;
import org.andromda.translation.ocl.analysis.*;

public final class AMessageArgumentsTail extends PMessageArgumentsTail
{
    private TComma _comma_;
    private PMessageArgument _messageArgument_;

    public AMessageArgumentsTail()
    {
    }

    public AMessageArgumentsTail(
        TComma _comma_,
        PMessageArgument _messageArgument_)
    {
        setComma(_comma_);

        setMessageArgument(_messageArgument_);

    }
    public Object clone()
    {
        return new AMessageArgumentsTail(
            (TComma) cloneNode(_comma_),
            (PMessageArgument) cloneNode(_messageArgument_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMessageArgumentsTail(this);
    }

    public TComma getComma()
    {
        return _comma_;
    }

    public void setComma(TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comma_ = node;
    }

    public PMessageArgument getMessageArgument()
    {
        return _messageArgument_;
    }

    public void setMessageArgument(PMessageArgument node)
    {
        if(_messageArgument_ != null)
        {
            _messageArgument_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _messageArgument_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_comma_)
            + toString(_messageArgument_);
    }

    void removeChild(Node child)
    {
        if(_comma_ == child)
        {
            _comma_ = null;
            return;
        }

        if(_messageArgument_ == child)
        {
            _messageArgument_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(_messageArgument_ == oldChild)
        {
            setMessageArgument((PMessageArgument) newChild);
            return;
        }

    }
}
