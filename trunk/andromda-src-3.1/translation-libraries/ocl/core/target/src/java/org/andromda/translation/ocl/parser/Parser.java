/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.andromda.translation.ocl.parser;

import org.andromda.translation.ocl.lexer.*;
import org.andromda.translation.ocl.node.*;
import org.andromda.translation.ocl.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected Node node;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    protected void filter() throws ParserException, LexerException, IOException
    {
    }

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int state, Node node, boolean filter) throws ParserException, LexerException, IOException
    {
        this.node = node;

        if(filter)
        {
            filter();
        }

        if(!stack.hasNext())
        {
            stack.add(new State(state, this.node));
            return;
        }

        State s = (State) stack.next();
        s.state = state;
        s.node = this.node;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private Node pop()
    {
        return (Node) ((State) stack.previous()).node;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, false);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
                    push(action[1], lexer.next(), true);
                    last_shift = action[1];
                    break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0: { Node node = new0(); push(goTo(0), node, true); } break;
                    case 1: { Node node = new1(); push(goTo(0), node, true); } break;
                    case 2: { Node node = new2(); push(goTo(62), node, false); } break;
                    case 3: { Node node = new3(); push(goTo(62), node, false); } break;
                    case 4: { Node node = new4(); push(goTo(0), node, true); } break;
                    case 5: { Node node = new5(); push(goTo(63), node, false); } break;
                    case 6: { Node node = new6(); push(goTo(63), node, false); } break;
                    case 7: { Node node = new7(); push(goTo(0), node, true); } break;
                    case 8: { Node node = new8(); push(goTo(0), node, true); } break;
                    case 9: { Node node = new9(); push(goTo(0), node, true); } break;
                    case 10: { Node node = new10(); push(goTo(1), node, true); } break;
                    case 11: { Node node = new11(); push(goTo(64), node, false); } break;
                    case 12: { Node node = new12(); push(goTo(64), node, false); } break;
                    case 13: { Node node = new13(); push(goTo(1), node, true); } break;
                    case 14: { Node node = new14(); push(goTo(1), node, true); } break;
                    case 15: { Node node = new15(); push(goTo(65), node, false); } break;
                    case 16: { Node node = new16(); push(goTo(65), node, false); } break;
                    case 17: { Node node = new17(); push(goTo(1), node, true); } break;
                    case 18: { Node node = new18(); push(goTo(1), node, true); } break;
                    case 19: { Node node = new19(); push(goTo(66), node, false); } break;
                    case 20: { Node node = new20(); push(goTo(66), node, false); } break;
                    case 21: { Node node = new21(); push(goTo(1), node, true); } break;
                    case 22: { Node node = new22(); push(goTo(2), node, true); } break;
                    case 23: { Node node = new23(); push(goTo(3), node, true); } break;
                    case 24: { Node node = new24(); push(goTo(4), node, true); } break;
                    case 25: { Node node = new25(); push(goTo(4), node, true); } break;
                    case 26: { Node node = new26(); push(goTo(4), node, true); } break;
                    case 27: { Node node = new27(); push(goTo(4), node, true); } break;
                    case 28: { Node node = new28(); push(goTo(5), node, true); } break;
                    case 29: { Node node = new29(); push(goTo(5), node, true); } break;
                    case 30: { Node node = new30(); push(goTo(5), node, true); } break;
                    case 31: { Node node = new31(); push(goTo(5), node, true); } break;
                    case 32: { Node node = new32(); push(goTo(6), node, true); } break;
                    case 33: { Node node = new33(); push(goTo(6), node, true); } break;
                    case 34: { Node node = new34(); push(goTo(6), node, true); } break;
                    case 35: { Node node = new35(); push(goTo(6), node, true); } break;
                    case 36: { Node node = new36(); push(goTo(7), node, true); } break;
                    case 37: { Node node = new37(); push(goTo(7), node, true); } break;
                    case 38: { Node node = new38(); push(goTo(8), node, true); } break;
                    case 39: { Node node = new39(); push(goTo(8), node, true); } break;
                    case 40: { Node node = new40(); push(goTo(8), node, true); } break;
                    case 41: { Node node = new41(); push(goTo(8), node, true); } break;
                    case 42: { Node node = new42(); push(goTo(9), node, true); } break;
                    case 43: { Node node = new43(); push(goTo(9), node, true); } break;
                    case 44: { Node node = new44(); push(goTo(10), node, true); } break;
                    case 45: { Node node = new45(); push(goTo(11), node, true); } break;
                    case 46: { Node node = new46(); push(goTo(11), node, true); } break;
                    case 47: { Node node = new47(); push(goTo(11), node, true); } break;
                    case 48: { Node node = new48(); push(goTo(67), node, false); } break;
                    case 49: { Node node = new49(); push(goTo(67), node, false); } break;
                    case 50: { Node node = new50(); push(goTo(11), node, true); } break;
                    case 51: { Node node = new51(); push(goTo(12), node, true); } break;
                    case 52: { Node node = new52(); push(goTo(12), node, true); } break;
                    case 53: { Node node = new53(); push(goTo(13), node, true); } break;
                    case 54: { Node node = new54(); push(goTo(14), node, true); } break;
                    case 55: { Node node = new55(); push(goTo(14), node, true); } break;
                    case 56: { Node node = new56(); push(goTo(14), node, true); } break;
                    case 57: { Node node = new57(); push(goTo(15), node, true); } break;
                    case 58: { Node node = new58(); push(goTo(68), node, false); } break;
                    case 59: { Node node = new59(); push(goTo(68), node, false); } break;
                    case 60: { Node node = new60(); push(goTo(15), node, true); } break;
                    case 61: { Node node = new61(); push(goTo(15), node, true); } break;
                    case 62: { Node node = new62(); push(goTo(16), node, true); } break;
                    case 63: { Node node = new63(); push(goTo(17), node, true); } break;
                    case 64: { Node node = new64(); push(goTo(17), node, true); } break;
                    case 65: { Node node = new65(); push(goTo(69), node, false); } break;
                    case 66: { Node node = new66(); push(goTo(69), node, false); } break;
                    case 67: { Node node = new67(); push(goTo(18), node, true); } break;
                    case 68: { Node node = new68(); push(goTo(19), node, true); } break;
                    case 69: { Node node = new69(); push(goTo(19), node, true); } break;
                    case 70: { Node node = new70(); push(goTo(20), node, true); } break;
                    case 71: { Node node = new71(); push(goTo(21), node, true); } break;
                    case 72: { Node node = new72(); push(goTo(21), node, true); } break;
                    case 73: { Node node = new73(); push(goTo(70), node, false); } break;
                    case 74: { Node node = new74(); push(goTo(70), node, false); } break;
                    case 75: { Node node = new75(); push(goTo(22), node, true); } break;
                    case 76: { Node node = new76(); push(goTo(23), node, true); } break;
                    case 77: { Node node = new77(); push(goTo(23), node, true); } break;
                    case 78: { Node node = new78(); push(goTo(71), node, false); } break;
                    case 79: { Node node = new79(); push(goTo(71), node, false); } break;
                    case 80: { Node node = new80(); push(goTo(24), node, true); } break;
                    case 81: { Node node = new81(); push(goTo(25), node, true); } break;
                    case 82: { Node node = new82(); push(goTo(25), node, true); } break;
                    case 83: { Node node = new83(); push(goTo(26), node, true); } break;
                    case 84: { Node node = new84(); push(goTo(26), node, true); } break;
                    case 85: { Node node = new85(); push(goTo(72), node, false); } break;
                    case 86: { Node node = new86(); push(goTo(72), node, false); } break;
                    case 87: { Node node = new87(); push(goTo(27), node, true); } break;
                    case 88: { Node node = new88(); push(goTo(27), node, true); } break;
                    case 89: { Node node = new89(); push(goTo(28), node, true); } break;
                    case 90: { Node node = new90(); push(goTo(28), node, true); } break;
                    case 91: { Node node = new91(); push(goTo(28), node, true); } break;
                    case 92: { Node node = new92(); push(goTo(28), node, true); } break;
                    case 93: { Node node = new93(); push(goTo(28), node, true); } break;
                    case 94: { Node node = new94(); push(goTo(28), node, true); } break;
                    case 95: { Node node = new95(); push(goTo(28), node, true); } break;
                    case 96: { Node node = new96(); push(goTo(28), node, true); } break;
                    case 97: { Node node = new97(); push(goTo(28), node, true); } break;
                    case 98: { Node node = new98(); push(goTo(28), node, true); } break;
                    case 99: { Node node = new99(); push(goTo(28), node, true); } break;
                    case 100: { Node node = new100(); push(goTo(29), node, true); } break;
                    case 101: { Node node = new101(); push(goTo(29), node, true); } break;
                    case 102: { Node node = new102(); push(goTo(29), node, true); } break;
                    case 103: { Node node = new103(); push(goTo(73), node, false); } break;
                    case 104: { Node node = new104(); push(goTo(73), node, false); } break;
                    case 105: { Node node = new105(); push(goTo(29), node, true); } break;
                    case 106: { Node node = new106(); push(goTo(30), node, true); } break;
                    case 107: { Node node = new107(); push(goTo(30), node, true); } break;
                    case 108: { Node node = new108(); push(goTo(30), node, true); } break;
                    case 109: { Node node = new109(); push(goTo(31), node, true); } break;
                    case 110: { Node node = new110(); push(goTo(32), node, true); } break;
                    case 111: { Node node = new111(); push(goTo(33), node, true); } break;
                    case 112: { Node node = new112(); push(goTo(33), node, true); } break;
                    case 113: { Node node = new113(); push(goTo(33), node, true); } break;
                    case 114: { Node node = new114(); push(goTo(33), node, true); } break;
                    case 115: { Node node = new115(); push(goTo(34), node, true); } break;
                    case 116: { Node node = new116(); push(goTo(35), node, true); } break;
                    case 117: { Node node = new117(); push(goTo(35), node, true); } break;
                    case 118: { Node node = new118(); push(goTo(36), node, true); } break;
                    case 119: { Node node = new119(); push(goTo(37), node, true); } break;
                    case 120: { Node node = new120(); push(goTo(37), node, true); } break;
                    case 121: { Node node = new121(); push(goTo(37), node, true); } break;
                    case 122: { Node node = new122(); push(goTo(38), node, true); } break;
                    case 123: { Node node = new123(); push(goTo(38), node, true); } break;
                    case 124: { Node node = new124(); push(goTo(38), node, true); } break;
                    case 125: { Node node = new125(); push(goTo(38), node, true); } break;
                    case 126: { Node node = new126(); push(goTo(39), node, true); } break;
                    case 127: { Node node = new127(); push(goTo(40), node, true); } break;
                    case 128: { Node node = new128(); push(goTo(40), node, true); } break;
                    case 129: { Node node = new129(); push(goTo(41), node, true); } break;
                    case 130: { Node node = new130(); push(goTo(41), node, true); } break;
                    case 131: { Node node = new131(); push(goTo(42), node, true); } break;
                    case 132: { Node node = new132(); push(goTo(74), node, false); } break;
                    case 133: { Node node = new133(); push(goTo(74), node, false); } break;
                    case 134: { Node node = new134(); push(goTo(42), node, true); } break;
                    case 135: { Node node = new135(); push(goTo(43), node, true); } break;
                    case 136: { Node node = new136(); push(goTo(43), node, true); } break;
                    case 137: { Node node = new137(); push(goTo(43), node, true); } break;
                    case 138: { Node node = new138(); push(goTo(43), node, true); } break;
                    case 139: { Node node = new139(); push(goTo(43), node, true); } break;
                    case 140: { Node node = new140(); push(goTo(43), node, true); } break;
                    case 141: { Node node = new141(); push(goTo(43), node, true); } break;
                    case 142: { Node node = new142(); push(goTo(43), node, true); } break;
                    case 143: { Node node = new143(); push(goTo(44), node, true); } break;
                    case 144: { Node node = new144(); push(goTo(45), node, true); } break;
                    case 145: { Node node = new145(); push(goTo(45), node, true); } break;
                    case 146: { Node node = new146(); push(goTo(45), node, true); } break;
                    case 147: { Node node = new147(); push(goTo(46), node, true); } break;
                    case 148: { Node node = new148(); push(goTo(46), node, true); } break;
                    case 149: { Node node = new149(); push(goTo(46), node, true); } break;
                    case 150: { Node node = new150(); push(goTo(46), node, true); } break;
                    case 151: { Node node = new151(); push(goTo(46), node, true); } break;
                    case 152: { Node node = new152(); push(goTo(47), node, true); } break;
                    case 153: { Node node = new153(); push(goTo(47), node, true); } break;
                    case 154: { Node node = new154(); push(goTo(48), node, true); } break;
                    case 155: { Node node = new155(); push(goTo(48), node, true); } break;
                    case 156: { Node node = new156(); push(goTo(48), node, true); } break;
                    case 157: { Node node = new157(); push(goTo(48), node, true); } break;
                    case 158: { Node node = new158(); push(goTo(49), node, true); } break;
                    case 159: { Node node = new159(); push(goTo(49), node, true); } break;
                    case 160: { Node node = new160(); push(goTo(75), node, false); } break;
                    case 161: { Node node = new161(); push(goTo(75), node, false); } break;
                    case 162: { Node node = new162(); push(goTo(50), node, true); } break;
                    case 163: { Node node = new163(); push(goTo(51), node, true); } break;
                    case 164: { Node node = new164(); push(goTo(51), node, true); } break;
                    case 165: { Node node = new165(); push(goTo(51), node, true); } break;
                    case 166: { Node node = new166(); push(goTo(52), node, true); } break;
                    case 167: { Node node = new167(); push(goTo(52), node, true); } break;
                    case 168: { Node node = new168(); push(goTo(53), node, true); } break;
                    case 169: { Node node = new169(); push(goTo(54), node, true); } break;
                    case 170: { Node node = new170(); push(goTo(55), node, true); } break;
                    case 171: { Node node = new171(); push(goTo(55), node, true); } break;
                    case 172: { Node node = new172(); push(goTo(56), node, true); } break;
                    case 173: { Node node = new173(); push(goTo(56), node, true); } break;
                    case 174: { Node node = new174(); push(goTo(56), node, true); } break;
                    case 175: { Node node = new175(); push(goTo(56), node, true); } break;
                    case 176: { Node node = new176(); push(goTo(57), node, true); } break;
                    case 177: { Node node = new177(); push(goTo(57), node, true); } break;
                    case 178: { Node node = new178(); push(goTo(57), node, true); } break;
                    case 179: { Node node = new179(); push(goTo(57), node, true); } break;
                    case 180: { Node node = new180(); push(goTo(58), node, true); } break;
                    case 181: { Node node = new181(); push(goTo(58), node, true); } break;
                    case 182: { Node node = new182(); push(goTo(58), node, true); } break;
                    case 183: { Node node = new183(); push(goTo(58), node, true); } break;
                    case 184: { Node node = new184(); push(goTo(58), node, true); } break;
                    case 185: { Node node = new185(); push(goTo(58), node, true); } break;
                    case 186: { Node node = new186(); push(goTo(59), node, true); } break;
                    case 187: { Node node = new187(); push(goTo(59), node, true); } break;
                    case 188: { Node node = new188(); push(goTo(60), node, true); } break;
                    case 189: { Node node = new189(); push(goTo(60), node, true); } break;
                    case 190: { Node node = new190(); push(goTo(61), node, true); } break;
                    case 191: { Node node = new191(); push(goTo(61), node, true); } break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PDeclaration node1 = (PDeclaration) pop();
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    Node new0()
    {
        TEndpackage node5 = (TEndpackage) pop();
        XPContextDeclaration node4 = null;
        XPPathNameTail node3 = null;
        TName node2 = (TName) pop();
        TPackage node1 = (TPackage) pop();
        APackageDeclaration node = new APackageDeclaration(node1, node2, node3, node4, node5);
        return node;
    }

    Node new1()
    {
        TEndpackage node5 = (TEndpackage) pop();
        XPContextDeclaration node4 = null;
        XPPathNameTail node3 = (XPPathNameTail) pop();
        TName node2 = (TName) pop();
        TPackage node1 = (TPackage) pop();
        APackageDeclaration node = new APackageDeclaration(node1, node2, node3, node4, node5);
        return node;
    }

    Node new2()
    {
        PPathNameTail node2 = (PPathNameTail) pop();
        XPPathNameTail node1 = (XPPathNameTail) pop();
        X1PPathNameTail node = new X1PPathNameTail(node1, node2);
        return node;
    }

    Node new3()
    {
        PPathNameTail node1 = (PPathNameTail) pop();
        X2PPathNameTail node = new X2PPathNameTail(node1);
        return node;
    }

    Node new4()
    {
        TEndpackage node5 = (TEndpackage) pop();
        XPContextDeclaration node4 = (XPContextDeclaration) pop();
        XPPathNameTail node3 = null;
        TName node2 = (TName) pop();
        TPackage node1 = (TPackage) pop();
        APackageDeclaration node = new APackageDeclaration(node1, node2, node3, node4, node5);
        return node;
    }

    Node new5()
    {
        PContextDeclaration node2 = (PContextDeclaration) pop();
        XPContextDeclaration node1 = (XPContextDeclaration) pop();
        X1PContextDeclaration node = new X1PContextDeclaration(node1, node2);
        return node;
    }

    Node new6()
    {
        PContextDeclaration node1 = (PContextDeclaration) pop();
        X2PContextDeclaration node = new X2PContextDeclaration(node1);
        return node;
    }

    Node new7()
    {
        TEndpackage node5 = (TEndpackage) pop();
        XPContextDeclaration node4 = (XPContextDeclaration) pop();
        XPPathNameTail node3 = (XPPathNameTail) pop();
        TName node2 = (TName) pop();
        TPackage node1 = (TPackage) pop();
        APackageDeclaration node = new APackageDeclaration(node1, node2, node3, node4, node5);
        return node;
    }

    Node new8()
    {
        XPContextDeclaration node1 = null;
        AContextDeclaration node = new AContextDeclaration(node1);
        return node;
    }

    Node new9()
    {
        XPContextDeclaration node1 = (XPContextDeclaration) pop();
        AContextDeclaration node = new AContextDeclaration(node1);
        return node;
    }

    Node new10()
    {
        XPClassifierExpressionBody node4 = (XPClassifierExpressionBody) pop();
        XPPathNameTail node3 = null;
        TName node2 = (TName) pop();
        TContext node1 = (TContext) pop();
        AClassifierContextDeclaration node = new AClassifierContextDeclaration(node1, node2, node3, node4);
        return node;
    }

    Node new11()
    {
        PClassifierExpressionBody node2 = (PClassifierExpressionBody) pop();
        XPClassifierExpressionBody node1 = (XPClassifierExpressionBody) pop();
        X1PClassifierExpressionBody node = new X1PClassifierExpressionBody(node1, node2);
        return node;
    }

    Node new12()
    {
        PClassifierExpressionBody node1 = (PClassifierExpressionBody) pop();
        X2PClassifierExpressionBody node = new X2PClassifierExpressionBody(node1);
        return node;
    }

    Node new13()
    {
        XPClassifierExpressionBody node4 = (XPClassifierExpressionBody) pop();
        XPPathNameTail node3 = (XPPathNameTail) pop();
        TName node2 = (TName) pop();
        TContext node1 = (TContext) pop();
        AClassifierContextDeclaration node = new AClassifierContextDeclaration(node1, node2, node3, node4);
        return node;
    }

    Node new14()
    {
        XPOperationExpressionBody node6 = (XPOperationExpressionBody) pop();
        POperation node5 = (POperation) pop();
        TScopeOperator node4 = (TScopeOperator) pop();
        XPPathNameTail node3 = null;
        TName node2 = (TName) pop();
        TContext node1 = (TContext) pop();
        AOperationContextDeclaration node = new AOperationContextDeclaration(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new15()
    {
        POperationExpressionBody node2 = (POperationExpressionBody) pop();
        XPOperationExpressionBody node1 = (XPOperationExpressionBody) pop();
        X1POperationExpressionBody node = new X1POperationExpressionBody(node1, node2);
        return node;
    }

    Node new16()
    {
        POperationExpressionBody node1 = (POperationExpressionBody) pop();
        X2POperationExpressionBody node = new X2POperationExpressionBody(node1);
        return node;
    }

    Node new17()
    {
        XPOperationExpressionBody node6 = (XPOperationExpressionBody) pop();
        POperation node5 = (POperation) pop();
        TScopeOperator node4 = (TScopeOperator) pop();
        XPPathNameTail node3 = (XPPathNameTail) pop();
        TName node2 = (TName) pop();
        TContext node1 = (TContext) pop();
        AOperationContextDeclaration node = new AOperationContextDeclaration(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new18()
    {
        XPAttributeOrAssociationExpressionBody node5 = (XPAttributeOrAssociationExpressionBody) pop();
        TScopeOperator node4 = (TScopeOperator) pop();
        XPPathNameTail node3 = null;
        TName node2 = (TName) pop();
        TContext node1 = (TContext) pop();
        AAttributeOrAssociationContextDeclaration node = new AAttributeOrAssociationContextDeclaration(node1, node2, node3, node4, node5);
        return node;
    }

    Node new19()
    {
        PAttributeOrAssociationExpressionBody node2 = (PAttributeOrAssociationExpressionBody) pop();
        XPAttributeOrAssociationExpressionBody node1 = (XPAttributeOrAssociationExpressionBody) pop();
        X1PAttributeOrAssociationExpressionBody node = new X1PAttributeOrAssociationExpressionBody(node1, node2);
        return node;
    }

    Node new20()
    {
        PAttributeOrAssociationExpressionBody node1 = (PAttributeOrAssociationExpressionBody) pop();
        X2PAttributeOrAssociationExpressionBody node = new X2PAttributeOrAssociationExpressionBody(node1);
        return node;
    }

    Node new21()
    {
        XPAttributeOrAssociationExpressionBody node5 = (XPAttributeOrAssociationExpressionBody) pop();
        TScopeOperator node4 = (TScopeOperator) pop();
        XPPathNameTail node3 = (XPPathNameTail) pop();
        TName node2 = (TName) pop();
        TContext node1 = (TContext) pop();
        AAttributeOrAssociationContextDeclaration node = new AAttributeOrAssociationContextDeclaration(node1, node2, node3, node4, node5);
        return node;
    }

    Node new22()
    {
        PInitialOrDerivedValue node3 = (PInitialOrDerivedValue) pop();
        PTypeDeclaration node2 = (PTypeDeclaration) pop();
        TName node1 = (TName) pop();
        AAttributeOrAssociationExpressionBody node = new AAttributeOrAssociationExpressionBody(node1, node2, node3);
        return node;
    }

    Node new23()
    {
        TName node2 = (TName) pop();
        TScopeOperator node1 = (TScopeOperator) pop();
        AScopeOperatorName node = new AScopeOperatorName(node1, node2);
        return node;
    }

    Node new24()
    {
        PInitialOrDerivedValue node4 = null;
        PExpression node3 = (PExpression) pop();
        TColon node2 = (TColon) pop();
        TInit node1 = (TInit) pop();
        AInitInitialOrDerivedValue node = new AInitInitialOrDerivedValue(node1, node2, node3, node4);
        return node;
    }

    Node new25()
    {
        PInitialOrDerivedValue node4 = (PInitialOrDerivedValue) pop();
        PExpression node3 = (PExpression) pop();
        TColon node2 = (TColon) pop();
        TInit node1 = (TInit) pop();
        AInitInitialOrDerivedValue node = new AInitInitialOrDerivedValue(node1, node2, node3, node4);
        return node;
    }

    Node new26()
    {
        PInitialOrDerivedValue node4 = null;
        PExpression node3 = (PExpression) pop();
        TColon node2 = (TColon) pop();
        TDerive node1 = (TDerive) pop();
        ADeriveInitialOrDerivedValue node = new ADeriveInitialOrDerivedValue(node1, node2, node3, node4);
        return node;
    }

    Node new27()
    {
        PInitialOrDerivedValue node4 = (PInitialOrDerivedValue) pop();
        PExpression node3 = (PExpression) pop();
        TColon node2 = (TColon) pop();
        TDerive node1 = (TDerive) pop();
        ADeriveInitialOrDerivedValue node = new ADeriveInitialOrDerivedValue(node1, node2, node3, node4);
        return node;
    }

    Node new28()
    {
        PDefinitionExpression node4 = (PDefinitionExpression) pop();
        TColon node3 = (TColon) pop();
        TName node2 = null;
        TDef node1 = (TDef) pop();
        ADefClassifierExpressionBody node = new ADefClassifierExpressionBody(node1, node2, node3, node4);
        return node;
    }

    Node new29()
    {
        PDefinitionExpression node4 = (PDefinitionExpression) pop();
        TColon node3 = (TColon) pop();
        TName node2 = (TName) pop();
        TDef node1 = (TDef) pop();
        ADefClassifierExpressionBody node = new ADefClassifierExpressionBody(node1, node2, node3, node4);
        return node;
    }

    Node new30()
    {
        PExpression node4 = (PExpression) pop();
        TColon node3 = (TColon) pop();
        TName node2 = null;
        TInv node1 = (TInv) pop();
        AInvClassifierExpressionBody node = new AInvClassifierExpressionBody(node1, node2, node3, node4);
        return node;
    }

    Node new31()
    {
        PExpression node4 = (PExpression) pop();
        TColon node3 = (TColon) pop();
        TName node2 = (TName) pop();
        TInv node1 = (TInv) pop();
        AInvClassifierExpressionBody node = new AInvClassifierExpressionBody(node1, node2, node3, node4);
        return node;
    }

    Node new32()
    {
        PExpression node4 = (PExpression) pop();
        TEqual node3 = (TEqual) pop();
        PTypeDeclaration node2 = null;
        TName node1 = (TName) pop();
        AVariableDefinitionExpression node = new AVariableDefinitionExpression(node1, node2, node3, node4);
        return node;
    }

    Node new33()
    {
        PExpression node4 = (PExpression) pop();
        TEqual node3 = (TEqual) pop();
        PTypeDeclaration node2 = (PTypeDeclaration) pop();
        TName node1 = (TName) pop();
        AVariableDefinitionExpression node = new AVariableDefinitionExpression(node1, node2, node3, node4);
        return node;
    }

    Node new34()
    {
        PExpression node3 = null;
        TEqual node2 = (TEqual) pop();
        POperation node1 = (POperation) pop();
        AOperationDefinitionExpression node = new AOperationDefinitionExpression(node1, node2, node3);
        return node;
    }

    Node new35()
    {
        PExpression node3 = (PExpression) pop();
        TEqual node2 = (TEqual) pop();
        POperation node1 = (POperation) pop();
        AOperationDefinitionExpression node = new AOperationDefinitionExpression(node1, node2, node3);
        return node;
    }

    Node new36()
    {
        PExpression node4 = (PExpression) pop();
        TColon node3 = (TColon) pop();
        TName node2 = null;
        POperationStereotype node1 = (POperationStereotype) pop();
        AOperationExpressionBody node = new AOperationExpressionBody(node1, node2, node3, node4);
        return node;
    }

    Node new37()
    {
        PExpression node4 = (PExpression) pop();
        TColon node3 = (TColon) pop();
        TName node2 = (TName) pop();
        POperationStereotype node1 = (POperationStereotype) pop();
        AOperationExpressionBody node = new AOperationExpressionBody(node1, node2, node3, node4);
        return node;
    }

    Node new38()
    {
        PTypeDeclaration node5 = null;
        TRParen node4 = (TRParen) pop();
        PVariableDeclarationList node3 = null;
        TLParen node2 = (TLParen) pop();
        TName node1 = (TName) pop();
        AOperation node = new AOperation(node1, node2, node3, node4, node5);
        return node;
    }

    Node new39()
    {
        PTypeDeclaration node5 = null;
        TRParen node4 = (TRParen) pop();
        PVariableDeclarationList node3 = (PVariableDeclarationList) pop();
        TLParen node2 = (TLParen) pop();
        TName node1 = (TName) pop();
        AOperation node = new AOperation(node1, node2, node3, node4, node5);
        return node;
    }

    Node new40()
    {
        PTypeDeclaration node5 = (PTypeDeclaration) pop();
        TRParen node4 = (TRParen) pop();
        PVariableDeclarationList node3 = null;
        TLParen node2 = (TLParen) pop();
        TName node1 = (TName) pop();
        AOperation node = new AOperation(node1, node2, node3, node4, node5);
        return node;
    }

    Node new41()
    {
        PTypeDeclaration node5 = (PTypeDeclaration) pop();
        TRParen node4 = (TRParen) pop();
        PVariableDeclarationList node3 = (PVariableDeclarationList) pop();
        TLParen node2 = (TLParen) pop();
        TName node1 = (TName) pop();
        AOperation node = new AOperation(node1, node2, node3, node4, node5);
        return node;
    }

    Node new42()
    {
        PTypeDeclaration node2 = null;
        TName node1 = (TName) pop();
        AVariableDeclaration node = new AVariableDeclaration(node1, node2);
        return node;
    }

    Node new43()
    {
        PTypeDeclaration node2 = (PTypeDeclaration) pop();
        TName node1 = (TName) pop();
        AVariableDeclaration node = new AVariableDeclaration(node1, node2);
        return node;
    }

    Node new44()
    {
        PType node2 = (PType) pop();
        TColon node1 = (TColon) pop();
        ATypeDeclaration node = new ATypeDeclaration(node1, node2);
        return node;
    }

    Node new45()
    {
        XPVariableDeclarationListTail node3 = null;
        PEqualExpression node2 = null;
        PVariableDeclaration node1 = (PVariableDeclaration) pop();
        AVariableDeclarationList node = new AVariableDeclarationList(node1, node2, node3);
        return node;
    }

    Node new46()
    {
        XPVariableDeclarationListTail node3 = null;
        PEqualExpression node2 = (PEqualExpression) pop();
        PVariableDeclaration node1 = (PVariableDeclaration) pop();
        AVariableDeclarationList node = new AVariableDeclarationList(node1, node2, node3);
        return node;
    }

    Node new47()
    {
        XPVariableDeclarationListTail node3 = (XPVariableDeclarationListTail) pop();
        PEqualExpression node2 = null;
        PVariableDeclaration node1 = (PVariableDeclaration) pop();
        AVariableDeclarationList node = new AVariableDeclarationList(node1, node2, node3);
        return node;
    }

    Node new48()
    {
        PVariableDeclarationListTail node2 = (PVariableDeclarationListTail) pop();
        XPVariableDeclarationListTail node1 = (XPVariableDeclarationListTail) pop();
        X1PVariableDeclarationListTail node = new X1PVariableDeclarationListTail(node1, node2);
        return node;
    }

    Node new49()
    {
        PVariableDeclarationListTail node1 = (PVariableDeclarationListTail) pop();
        X2PVariableDeclarationListTail node = new X2PVariableDeclarationListTail(node1);
        return node;
    }

    Node new50()
    {
        XPVariableDeclarationListTail node3 = (XPVariableDeclarationListTail) pop();
        PEqualExpression node2 = (PEqualExpression) pop();
        PVariableDeclaration node1 = (PVariableDeclaration) pop();
        AVariableDeclarationList node = new AVariableDeclarationList(node1, node2, node3);
        return node;
    }

    Node new51()
    {
        PEqualExpression node3 = null;
        PVariableDeclaration node2 = (PVariableDeclaration) pop();
        TComma node1 = (TComma) pop();
        AVariableDeclarationListTail node = new AVariableDeclarationListTail(node1, node2, node3);
        return node;
    }

    Node new52()
    {
        PEqualExpression node3 = (PEqualExpression) pop();
        PVariableDeclaration node2 = (PVariableDeclaration) pop();
        TComma node1 = (TComma) pop();
        AVariableDeclarationListTail node = new AVariableDeclarationListTail(node1, node2, node3);
        return node;
    }

    Node new53()
    {
        PExpression node2 = (PExpression) pop();
        TEqual node1 = (TEqual) pop();
        AEqualExpression node = new AEqualExpression(node1, node2);
        return node;
    }

    Node new54()
    {
        TBody node1 = (TBody) pop();
        ABodyOperationStereotype node = new ABodyOperationStereotype(node1);
        return node;
    }

    Node new55()
    {
        TPre node1 = (TPre) pop();
        APreOperationStereotype node = new APreOperationStereotype(node1);
        return node;
    }

    Node new56()
    {
        TPost node1 = (TPost) pop();
        APostOperationStereotype node = new APostOperationStereotype(node1);
        return node;
    }

    Node new57()
    {
        XPLetExp node1 = (XPLetExp) pop();
        ALetExpression node = new ALetExpression(node1);
        return node;
    }

    Node new58()
    {
        PLetExp node2 = (PLetExp) pop();
        XPLetExp node1 = (XPLetExp) pop();
        X1PLetExp node = new X1PLetExp(node1, node2);
        return node;
    }

    Node new59()
    {
        PLetExp node1 = (PLetExp) pop();
        X2PLetExp node = new X2PLetExp(node1);
        return node;
    }

    Node new60()
    {
        PLogicalExp node1 = (PLogicalExp) pop();
        ALogicalExpression node = new ALogicalExpression(node1);
        return node;
    }

    Node new61()
    {
        PMessageExp node1 = (PMessageExp) pop();
        AMessageExpression node = new AMessageExpression(node1);
        return node;
    }

    Node new62()
    {
        TEndif node7 = (TEndif) pop();
        PExpression node6 = (PExpression) pop();
        TElse node5 = (TElse) pop();
        PExpression node4 = (PExpression) pop();
        TThen node3 = (TThen) pop();
        PExpression node2 = (PExpression) pop();
        TIf node1 = (TIf) pop();
        AIfExpression node = new AIfExpression(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new63()
    {
        XPLogicalExpressionTail node2 = null;
        PRelationalExpression node1 = (PRelationalExpression) pop();
        ALogicalExp node = new ALogicalExp(node1, node2);
        return node;
    }

    Node new64()
    {
        XPLogicalExpressionTail node2 = (XPLogicalExpressionTail) pop();
        PRelationalExpression node1 = (PRelationalExpression) pop();
        ALogicalExp node = new ALogicalExp(node1, node2);
        return node;
    }

    Node new65()
    {
        PLogicalExpressionTail node2 = (PLogicalExpressionTail) pop();
        XPLogicalExpressionTail node1 = (XPLogicalExpressionTail) pop();
        X1PLogicalExpressionTail node = new X1PLogicalExpressionTail(node1, node2);
        return node;
    }

    Node new66()
    {
        PLogicalExpressionTail node1 = (PLogicalExpressionTail) pop();
        X2PLogicalExpressionTail node = new X2PLogicalExpressionTail(node1);
        return node;
    }

    Node new67()
    {
        PRelationalExpression node2 = (PRelationalExpression) pop();
        PLogicalOperator node1 = (PLogicalOperator) pop();
        ALogicalExpressionTail node = new ALogicalExpressionTail(node1, node2);
        return node;
    }

    Node new68()
    {
        PRelationalExpressionTail node2 = null;
        PAdditiveExpression node1 = (PAdditiveExpression) pop();
        ARelationalExpression node = new ARelationalExpression(node1, node2);
        return node;
    }

    Node new69()
    {
        PRelationalExpressionTail node2 = (PRelationalExpressionTail) pop();
        PAdditiveExpression node1 = (PAdditiveExpression) pop();
        ARelationalExpression node = new ARelationalExpression(node1, node2);
        return node;
    }

    Node new70()
    {
        PAdditiveExpression node2 = (PAdditiveExpression) pop();
        PRelationalOperator node1 = (PRelationalOperator) pop();
        ARelationalExpressionTail node = new ARelationalExpressionTail(node1, node2);
        return node;
    }

    Node new71()
    {
        XPAdditiveExpressionTail node2 = null;
        PMultiplicativeExpression node1 = (PMultiplicativeExpression) pop();
        AAdditiveExpression node = new AAdditiveExpression(node1, node2);
        return node;
    }

    Node new72()
    {
        XPAdditiveExpressionTail node2 = (XPAdditiveExpressionTail) pop();
        PMultiplicativeExpression node1 = (PMultiplicativeExpression) pop();
        AAdditiveExpression node = new AAdditiveExpression(node1, node2);
        return node;
    }

    Node new73()
    {
        PAdditiveExpressionTail node2 = (PAdditiveExpressionTail) pop();
        XPAdditiveExpressionTail node1 = (XPAdditiveExpressionTail) pop();
        X1PAdditiveExpressionTail node = new X1PAdditiveExpressionTail(node1, node2);
        return node;
    }

    Node new74()
    {
        PAdditiveExpressionTail node1 = (PAdditiveExpressionTail) pop();
        X2PAdditiveExpressionTail node = new X2PAdditiveExpressionTail(node1);
        return node;
    }

    Node new75()
    {
        PMultiplicativeExpression node2 = (PMultiplicativeExpression) pop();
        PAddOperator node1 = (PAddOperator) pop();
        AAdditiveExpressionTail node = new AAdditiveExpressionTail(node1, node2);
        return node;
    }

    Node new76()
    {
        XPMultiplicativeExpressionTail node2 = null;
        PUnaryExpression node1 = (PUnaryExpression) pop();
        AMultiplicativeExpression node = new AMultiplicativeExpression(node1, node2);
        return node;
    }

    Node new77()
    {
        XPMultiplicativeExpressionTail node2 = (XPMultiplicativeExpressionTail) pop();
        PUnaryExpression node1 = (PUnaryExpression) pop();
        AMultiplicativeExpression node = new AMultiplicativeExpression(node1, node2);
        return node;
    }

    Node new78()
    {
        PMultiplicativeExpressionTail node2 = (PMultiplicativeExpressionTail) pop();
        XPMultiplicativeExpressionTail node1 = (XPMultiplicativeExpressionTail) pop();
        X1PMultiplicativeExpressionTail node = new X1PMultiplicativeExpressionTail(node1, node2);
        return node;
    }

    Node new79()
    {
        PMultiplicativeExpressionTail node1 = (PMultiplicativeExpressionTail) pop();
        X2PMultiplicativeExpressionTail node = new X2PMultiplicativeExpressionTail(node1);
        return node;
    }

    Node new80()
    {
        PUnaryExpression node2 = (PUnaryExpression) pop();
        PMultiplyOperator node1 = (PMultiplyOperator) pop();
        AMultiplicativeExpressionTail node = new AMultiplicativeExpressionTail(node1, node2);
        return node;
    }

    Node new81()
    {
        PPropertyCallExpression node2 = (PPropertyCallExpression) pop();
        PUnaryOperator node1 = null;
        AUnaryExpression node = new AUnaryExpression(node1, node2);
        return node;
    }

    Node new82()
    {
        PPropertyCallExpression node2 = (PPropertyCallExpression) pop();
        PUnaryOperator node1 = (PUnaryOperator) pop();
        AUnaryExpression node = new AUnaryExpression(node1, node2);
        return node;
    }

    Node new83()
    {
        XPPropertyCallExpressionTail node2 = null;
        PPrimaryExpression node1 = (PPrimaryExpression) pop();
        APropertyCallExpression node = new APropertyCallExpression(node1, node2);
        return node;
    }

    Node new84()
    {
        XPPropertyCallExpressionTail node2 = (XPPropertyCallExpressionTail) pop();
        PPrimaryExpression node1 = (PPrimaryExpression) pop();
        APropertyCallExpression node = new APropertyCallExpression(node1, node2);
        return node;
    }

    Node new85()
    {
        PPropertyCallExpressionTail node2 = (PPropertyCallExpressionTail) pop();
        XPPropertyCallExpressionTail node1 = (XPPropertyCallExpressionTail) pop();
        X1PPropertyCallExpressionTail node = new X1PPropertyCallExpressionTail(node1, node2);
        return node;
    }

    Node new86()
    {
        PPropertyCallExpressionTail node1 = (PPropertyCallExpressionTail) pop();
        X2PPropertyCallExpressionTail node = new X2PPropertyCallExpressionTail(node1);
        return node;
    }

    Node new87()
    {
        PFeatureCall node2 = (PFeatureCall) pop();
        TDot node1 = (TDot) pop();
        ADotPropertyCallExpressionTail node = new ADotPropertyCallExpressionTail(node1, node2);
        return node;
    }

    Node new88()
    {
        PFeatureCall node2 = (PFeatureCall) pop();
        TArrow node1 = (TArrow) pop();
        AArrowPropertyCallExpressionTail node = new AArrowPropertyCallExpressionTail(node1, node2);
        return node;
    }

    Node new89()
    {
        PLiteral node1 = (PLiteral) pop();
        ALiteralPrimaryExpression node = new ALiteralPrimaryExpression(node1);
        return node;
    }

    Node new90()
    {
        PFeatureCallParameters node4 = null;
        PQualifiers node3 = null;
        PIsMarkedPre node2 = null;
        PPathName node1 = (PPathName) pop();
        AFeaturePrimaryExpression node = new AFeaturePrimaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new91()
    {
        PFeatureCallParameters node4 = null;
        PQualifiers node3 = null;
        PIsMarkedPre node2 = (PIsMarkedPre) pop();
        PPathName node1 = (PPathName) pop();
        AFeaturePrimaryExpression node = new AFeaturePrimaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new92()
    {
        PFeatureCallParameters node4 = null;
        PQualifiers node3 = (PQualifiers) pop();
        PIsMarkedPre node2 = null;
        PPathName node1 = (PPathName) pop();
        AFeaturePrimaryExpression node = new AFeaturePrimaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new93()
    {
        PFeatureCallParameters node4 = null;
        PQualifiers node3 = (PQualifiers) pop();
        PIsMarkedPre node2 = (PIsMarkedPre) pop();
        PPathName node1 = (PPathName) pop();
        AFeaturePrimaryExpression node = new AFeaturePrimaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new94()
    {
        PFeatureCallParameters node4 = (PFeatureCallParameters) pop();
        PQualifiers node3 = null;
        PIsMarkedPre node2 = null;
        PPathName node1 = (PPathName) pop();
        AFeaturePrimaryExpression node = new AFeaturePrimaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new95()
    {
        PFeatureCallParameters node4 = (PFeatureCallParameters) pop();
        PQualifiers node3 = null;
        PIsMarkedPre node2 = (PIsMarkedPre) pop();
        PPathName node1 = (PPathName) pop();
        AFeaturePrimaryExpression node = new AFeaturePrimaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new96()
    {
        PFeatureCallParameters node4 = (PFeatureCallParameters) pop();
        PQualifiers node3 = (PQualifiers) pop();
        PIsMarkedPre node2 = null;
        PPathName node1 = (PPathName) pop();
        AFeaturePrimaryExpression node = new AFeaturePrimaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new97()
    {
        PFeatureCallParameters node4 = (PFeatureCallParameters) pop();
        PQualifiers node3 = (PQualifiers) pop();
        PIsMarkedPre node2 = (PIsMarkedPre) pop();
        PPathName node1 = (PPathName) pop();
        AFeaturePrimaryExpression node = new AFeaturePrimaryExpression(node1, node2, node3, node4);
        return node;
    }

    Node new98()
    {
        TRParen node3 = (TRParen) pop();
        PExpression node2 = (PExpression) pop();
        TLParen node1 = (TLParen) pop();
        AParenthesesPrimaryExpression node = new AParenthesesPrimaryExpression(node1, node2, node3);
        return node;
    }

    Node new99()
    {
        PIfExpression node1 = (PIfExpression) pop();
        AIfPrimaryExpression node = new AIfPrimaryExpression(node1);
        return node;
    }

    Node new100()
    {
        TRParen node4 = (TRParen) pop();
        XPFeatureCallParameterOption node3 = null;
        PExpression node2 = null;
        TLParen node1 = (TLParen) pop();
        AConcreteFeatureCallParameters node = new AConcreteFeatureCallParameters(node1, node2, node3, node4);
        return node;
    }

    Node new101()
    {
        TRParen node4 = (TRParen) pop();
        XPFeatureCallParameterOption node3 = null;
        PExpression node2 = (PExpression) pop();
        TLParen node1 = (TLParen) pop();
        AConcreteFeatureCallParameters node = new AConcreteFeatureCallParameters(node1, node2, node3, node4);
        return node;
    }

    Node new102()
    {
        TRParen node4 = (TRParen) pop();
        XPFeatureCallParameterOption node3 = (XPFeatureCallParameterOption) pop();
        PExpression node2 = null;
        TLParen node1 = (TLParen) pop();
        AConcreteFeatureCallParameters node = new AConcreteFeatureCallParameters(node1, node2, node3, node4);
        return node;
    }

    Node new103()
    {
        PFeatureCallParameterOption node2 = (PFeatureCallParameterOption) pop();
        XPFeatureCallParameterOption node1 = (XPFeatureCallParameterOption) pop();
        X1PFeatureCallParameterOption node = new X1PFeatureCallParameterOption(node1, node2);
        return node;
    }

    Node new104()
    {
        PFeatureCallParameterOption node1 = (PFeatureCallParameterOption) pop();
        X2PFeatureCallParameterOption node = new X2PFeatureCallParameterOption(node1);
        return node;
    }

    Node new105()
    {
        TRParen node4 = (TRParen) pop();
        XPFeatureCallParameterOption node3 = (XPFeatureCallParameterOption) pop();
        PExpression node2 = (PExpression) pop();
        TLParen node1 = (TLParen) pop();
        AConcreteFeatureCallParameters node = new AConcreteFeatureCallParameters(node1, node2, node3, node4);
        return node;
    }

    Node new106()
    {
        TBar node2 = (TBar) pop();
        PVariableDeclarationList node1 = (PVariableDeclarationList) pop();
        AStandardDeclarator node = new AStandardDeclarator(node1, node2);
        return node;
    }

    Node new107()
    {
        TBar node5 = (TBar) pop();
        PEqualExpression node4 = null;
        PVariableDeclaration node3 = (PVariableDeclaration) pop();
        TSemicolon node2 = (TSemicolon) pop();
        PVariableDeclaration node1 = (PVariableDeclaration) pop();
        AIterateDeclarator node = new AIterateDeclarator(node1, node2, node3, node4, node5);
        return node;
    }

    Node new108()
    {
        TBar node5 = (TBar) pop();
        PEqualExpression node4 = (PEqualExpression) pop();
        PVariableDeclaration node3 = (PVariableDeclaration) pop();
        TSemicolon node2 = (TSemicolon) pop();
        PVariableDeclaration node1 = (PVariableDeclaration) pop();
        AIterateDeclarator node = new AIterateDeclarator(node1, node2, node3, node4, node5);
        return node;
    }

    Node new109()
    {
        TName node2 = (TName) pop();
        TComma node1 = (TComma) pop();
        ADeclaratorTail node = new ADeclaratorTail(node1, node2);
        return node;
    }

    Node new110()
    {
        PExpression node2 = (PExpression) pop();
        TComma node1 = (TComma) pop();
        ACommaExpression node = new ACommaExpression(node1, node2);
        return node;
    }

    Node new111()
    {
        PExpression node2 = (PExpression) pop();
        TComma node1 = (TComma) pop();
        ACommaFeatureCallParameterOption node = new ACommaFeatureCallParameterOption(node1, node2);
        return node;
    }

    Node new112()
    {
        PTypeDeclaration node1 = (PTypeDeclaration) pop();
        AColonFeatureCallParameterOption node = new AColonFeatureCallParameterOption(node1);
        return node;
    }

    Node new113()
    {
        PExpression node5 = (PExpression) pop();
        TEqual node4 = (TEqual) pop();
        PTypeDeclaration node3 = (PTypeDeclaration) pop();
        TName node2 = (TName) pop();
        TSemicolon node1 = (TSemicolon) pop();
        AIterateFeatureCallParameterOption node = new AIterateFeatureCallParameterOption(node1, node2, node3, node4, node5);
        return node;
    }

    Node new114()
    {
        PExpression node2 = (PExpression) pop();
        TBar node1 = (TBar) pop();
        ABarFeatureCallParameterOption node = new ABarFeatureCallParameterOption(node1, node2);
        return node;
    }

    Node new115()
    {
        PLetExpSub node3 = (PLetExpSub) pop();
        PLetVariableDeclaration node2 = (PLetVariableDeclaration) pop();
        TLet node1 = (TLet) pop();
        ALetExp node = new ALetExp(node1, node2, node3);
        return node;
    }

    Node new116()
    {
        PLetExpSub node3 = (PLetExpSub) pop();
        PLetVariableDeclaration node2 = (PLetVariableDeclaration) pop();
        TComma node1 = (TComma) pop();
        AVariableDeclarationLetExpSub node = new AVariableDeclarationLetExpSub(node1, node2, node3);
        return node;
    }

    Node new117()
    {
        PLogicalExp node2 = (PLogicalExp) pop();
        TIn node1 = (TIn) pop();
        AInLetExpSub node = new AInLetExpSub(node1, node2);
        return node;
    }

    Node new118()
    {
        PExpression node3 = (PExpression) pop();
        TEqual node2 = (TEqual) pop();
        PVariableDeclaration node1 = (PVariableDeclaration) pop();
        ALetVariableDeclaration node = new ALetVariableDeclaration(node1, node2, node3);
        return node;
    }

    Node new119()
    {
        PCollectionLit node1 = (PCollectionLit) pop();
        ACollectionLiteral node = new ACollectionLiteral(node1);
        return node;
    }

    Node new120()
    {
        PPrimitiveLit node1 = (PPrimitiveLit) pop();
        APrimitiveLiteral node = new APrimitiveLiteral(node1);
        return node;
    }

    Node new121()
    {
        PTupleLit node1 = (PTupleLit) pop();
        ATupleLiteral node = new ATupleLiteral(node1);
        return node;
    }

    Node new122()
    {
        TStringLit node1 = (TStringLit) pop();
        AStringPrimitiveLit node = new AStringPrimitiveLit(node1);
        return node;
    }

    Node new123()
    {
        TReal node1 = (TReal) pop();
        ARealPrimitiveLit node = new ARealPrimitiveLit(node1);
        return node;
    }

    Node new124()
    {
        TInt node1 = (TInt) pop();
        AIntegerPrimitiveLit node = new AIntegerPrimitiveLit(node1);
        return node;
    }

    Node new125()
    {
        TBoolean node1 = (TBoolean) pop();
        ABooleanPrimitiveLit node = new ABooleanPrimitiveLit(node1);
        return node;
    }

    Node new126()
    {
        TRBrace node4 = (TRBrace) pop();
        PVariableDeclarationList node3 = (PVariableDeclarationList) pop();
        TLBrace node2 = (TLBrace) pop();
        TTuple node1 = (TTuple) pop();
        ATupleLit node = new ATupleLit(node1, node2, node3, node4);
        return node;
    }

    Node new127()
    {
        TRBrace node4 = (TRBrace) pop();
        PExpressionListOrRange node3 = null;
        TLBrace node2 = (TLBrace) pop();
        PCollectionKind node1 = (PCollectionKind) pop();
        ACollectionLit node = new ACollectionLit(node1, node2, node3, node4);
        return node;
    }

    Node new128()
    {
        TRBrace node4 = (TRBrace) pop();
        PExpressionListOrRange node3 = (PExpressionListOrRange) pop();
        TLBrace node2 = (TLBrace) pop();
        PCollectionKind node1 = (PCollectionKind) pop();
        ACollectionLit node = new ACollectionLit(node1, node2, node3, node4);
        return node;
    }

    Node new129()
    {
        PExpressionListOrRangeTail node2 = null;
        PExpression node1 = (PExpression) pop();
        AExpressionListOrRange node = new AExpressionListOrRange(node1, node2);
        return node;
    }

    Node new130()
    {
        PExpressionListOrRangeTail node2 = (PExpressionListOrRangeTail) pop();
        PExpression node1 = (PExpression) pop();
        AExpressionListOrRange node = new AExpressionListOrRange(node1, node2);
        return node;
    }

    Node new131()
    {
        XPCommaExpression node1 = (XPCommaExpression) pop();
        AListExpressionListOrRangeTail node = new AListExpressionListOrRangeTail(node1);
        return node;
    }

    Node new132()
    {
        PCommaExpression node2 = (PCommaExpression) pop();
        XPCommaExpression node1 = (XPCommaExpression) pop();
        X1PCommaExpression node = new X1PCommaExpression(node1, node2);
        return node;
    }

    Node new133()
    {
        PCommaExpression node1 = (PCommaExpression) pop();
        X2PCommaExpression node = new X2PCommaExpression(node1);
        return node;
    }

    Node new134()
    {
        PExpression node2 = (PExpression) pop();
        TRange node1 = (TRange) pop();
        ARangeExpressionListOrRangeTail node = new ARangeExpressionListOrRangeTail(node1, node2);
        return node;
    }

    Node new135()
    {
        PFeatureCallParameters node4 = null;
        PQualifiers node3 = null;
        PIsMarkedPre node2 = null;
        PPathName node1 = (PPathName) pop();
        AFeatureCall node = new AFeatureCall(node1, node2, node3, node4);
        return node;
    }

    Node new136()
    {
        PFeatureCallParameters node4 = null;
        PQualifiers node3 = null;
        PIsMarkedPre node2 = (PIsMarkedPre) pop();
        PPathName node1 = (PPathName) pop();
        AFeatureCall node = new AFeatureCall(node1, node2, node3, node4);
        return node;
    }

    Node new137()
    {
        PFeatureCallParameters node4 = null;
        PQualifiers node3 = (PQualifiers) pop();
        PIsMarkedPre node2 = null;
        PPathName node1 = (PPathName) pop();
        AFeatureCall node = new AFeatureCall(node1, node2, node3, node4);
        return node;
    }

    Node new138()
    {
        PFeatureCallParameters node4 = null;
        PQualifiers node3 = (PQualifiers) pop();
        PIsMarkedPre node2 = (PIsMarkedPre) pop();
        PPathName node1 = (PPathName) pop();
        AFeatureCall node = new AFeatureCall(node1, node2, node3, node4);
        return node;
    }

    Node new139()
    {
        PFeatureCallParameters node4 = (PFeatureCallParameters) pop();
        PQualifiers node3 = null;
        PIsMarkedPre node2 = null;
        PPathName node1 = (PPathName) pop();
        AFeatureCall node = new AFeatureCall(node1, node2, node3, node4);
        return node;
    }

    Node new140()
    {
        PFeatureCallParameters node4 = (PFeatureCallParameters) pop();
        PQualifiers node3 = null;
        PIsMarkedPre node2 = (PIsMarkedPre) pop();
        PPathName node1 = (PPathName) pop();
        AFeatureCall node = new AFeatureCall(node1, node2, node3, node4);
        return node;
    }

    Node new141()
    {
        PFeatureCallParameters node4 = (PFeatureCallParameters) pop();
        PQualifiers node3 = (PQualifiers) pop();
        PIsMarkedPre node2 = null;
        PPathName node1 = (PPathName) pop();
        AFeatureCall node = new AFeatureCall(node1, node2, node3, node4);
        return node;
    }

    Node new142()
    {
        PFeatureCallParameters node4 = (PFeatureCallParameters) pop();
        PQualifiers node3 = (PQualifiers) pop();
        PIsMarkedPre node2 = (PIsMarkedPre) pop();
        PPathName node1 = (PPathName) pop();
        AFeatureCall node = new AFeatureCall(node1, node2, node3, node4);
        return node;
    }

    Node new143()
    {
        TRBracket node3 = (TRBracket) pop();
        PActualParameterList node2 = (PActualParameterList) pop();
        TLBracket node1 = (TLBracket) pop();
        AQualifiers node = new AQualifiers(node1, node2, node3);
        return node;
    }

    Node new144()
    {
        PPathName node1 = (PPathName) pop();
        ASimpleType node = new ASimpleType(node1);
        return node;
    }

    Node new145()
    {
        PCollectionType node1 = (PCollectionType) pop();
        ACollectionType node = new ACollectionType(node1);
        return node;
    }

    Node new146()
    {
        PTupleType node1 = (PTupleType) pop();
        ATupletypeType node = new ATupletypeType(node1);
        return node;
    }

    Node new147()
    {
        TRParen node4 = (TRParen) pop();
        PType node3 = (PType) pop();
        TLParen node2 = (TLParen) pop();
        TSet node1 = (TSet) pop();
        ASetCollectionType node = new ASetCollectionType(node1, node2, node3, node4);
        return node;
    }

    Node new148()
    {
        TRParen node4 = (TRParen) pop();
        PType node3 = (PType) pop();
        TLParen node2 = (TLParen) pop();
        TBag node1 = (TBag) pop();
        ABagCollectionType node = new ABagCollectionType(node1, node2, node3, node4);
        return node;
    }

    Node new149()
    {
        TRParen node4 = (TRParen) pop();
        PType node3 = (PType) pop();
        TLParen node2 = (TLParen) pop();
        TSequence node1 = (TSequence) pop();
        ASequenceCollectionType node = new ASequenceCollectionType(node1, node2, node3, node4);
        return node;
    }

    Node new150()
    {
        TRParen node4 = (TRParen) pop();
        PType node3 = (PType) pop();
        TLParen node2 = (TLParen) pop();
        TOrderedset node1 = (TOrderedset) pop();
        AOrderedsetCollectionType node = new AOrderedsetCollectionType(node1, node2, node3, node4);
        return node;
    }

    Node new151()
    {
        TRParen node4 = (TRParen) pop();
        PType node3 = (PType) pop();
        TLParen node2 = (TLParen) pop();
        TCollection node1 = (TCollection) pop();
        ACollectionCollectionType node = new ACollectionCollectionType(node1, node2, node3, node4);
        return node;
    }

    Node new152()
    {
        TRParen node4 = (TRParen) pop();
        PVariableDeclarationList node3 = null;
        TLParen node2 = (TLParen) pop();
        TTupletype node1 = (TTupletype) pop();
        ATupleType node = new ATupleType(node1, node2, node3, node4);
        return node;
    }

    Node new153()
    {
        TRParen node4 = (TRParen) pop();
        PVariableDeclarationList node3 = (PVariableDeclarationList) pop();
        TLParen node2 = (TLParen) pop();
        TTupletype node1 = (TTupletype) pop();
        ATupleType node = new ATupleType(node1, node2, node3, node4);
        return node;
    }

    Node new154()
    {
        TRParen node6 = (TRParen) pop();
        PMessageArguments node5 = null;
        TLParen node4 = (TLParen) pop();
        TName node3 = (TName) pop();
        TMessageOperator node2 = (TMessageOperator) pop();
        PExpression node1 = (PExpression) pop();
        AMessageMessageExp node = new AMessageMessageExp(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new155()
    {
        TRParen node6 = (TRParen) pop();
        PMessageArguments node5 = (PMessageArguments) pop();
        TLParen node4 = (TLParen) pop();
        TName node3 = (TName) pop();
        TMessageOperator node2 = (TMessageOperator) pop();
        PExpression node1 = (PExpression) pop();
        AMessageMessageExp node = new AMessageMessageExp(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new156()
    {
        TRParen node6 = (TRParen) pop();
        PMessageArguments node5 = null;
        TLParen node4 = (TLParen) pop();
        TName node3 = (TName) pop();
        TIsSentOperator node2 = (TIsSentOperator) pop();
        PExpression node1 = (PExpression) pop();
        AIsSentMessageExp node = new AIsSentMessageExp(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new157()
    {
        TRParen node6 = (TRParen) pop();
        PMessageArguments node5 = (PMessageArguments) pop();
        TLParen node4 = (TLParen) pop();
        TName node3 = (TName) pop();
        TIsSentOperator node2 = (TIsSentOperator) pop();
        PExpression node1 = (PExpression) pop();
        AIsSentMessageExp node = new AIsSentMessageExp(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new158()
    {
        XPMessageArgumentsTail node2 = null;
        PMessageArgument node1 = (PMessageArgument) pop();
        AMessageArguments node = new AMessageArguments(node1, node2);
        return node;
    }

    Node new159()
    {
        XPMessageArgumentsTail node2 = (XPMessageArgumentsTail) pop();
        PMessageArgument node1 = (PMessageArgument) pop();
        AMessageArguments node = new AMessageArguments(node1, node2);
        return node;
    }

    Node new160()
    {
        PMessageArgumentsTail node2 = (PMessageArgumentsTail) pop();
        XPMessageArgumentsTail node1 = (XPMessageArgumentsTail) pop();
        X1PMessageArgumentsTail node = new X1PMessageArgumentsTail(node1, node2);
        return node;
    }

    Node new161()
    {
        PMessageArgumentsTail node1 = (PMessageArgumentsTail) pop();
        X2PMessageArgumentsTail node = new X2PMessageArgumentsTail(node1);
        return node;
    }

    Node new162()
    {
        PMessageArgument node2 = (PMessageArgument) pop();
        TComma node1 = (TComma) pop();
        AMessageArgumentsTail node = new AMessageArgumentsTail(node1, node2);
        return node;
    }

    Node new163()
    {
        PTypeDeclaration node2 = null;
        TUnknown node1 = (TUnknown) pop();
        ATypeMessageArgument node = new ATypeMessageArgument(node1, node2);
        return node;
    }

    Node new164()
    {
        PTypeDeclaration node2 = (PTypeDeclaration) pop();
        TUnknown node1 = (TUnknown) pop();
        ATypeMessageArgument node = new ATypeMessageArgument(node1, node2);
        return node;
    }

    Node new165()
    {
        PExpression node1 = (PExpression) pop();
        AExpMessageArgument node = new AExpMessageArgument(node1);
        return node;
    }

    Node new166()
    {
        XPPathNameTail node2 = null;
        TName node1 = (TName) pop();
        APathName node = new APathName(node1, node2);
        return node;
    }

    Node new167()
    {
        XPPathNameTail node2 = (XPPathNameTail) pop();
        TName node1 = (TName) pop();
        APathName node = new APathName(node1, node2);
        return node;
    }

    Node new168()
    {
        TName node2 = (TName) pop();
        TScopeOperator node1 = (TScopeOperator) pop();
        APathNameTail node = new APathNameTail(node1, node2);
        return node;
    }

    Node new169()
    {
        TPre node2 = (TPre) pop();
        TCommercialAt node1 = (TCommercialAt) pop();
        AIsMarkedPre node = new AIsMarkedPre(node1, node2);
        return node;
    }

    Node new170()
    {
        XPCommaExpression node2 = null;
        PExpression node1 = (PExpression) pop();
        AActualParameterList node = new AActualParameterList(node1, node2);
        return node;
    }

    Node new171()
    {
        XPCommaExpression node2 = (XPCommaExpression) pop();
        PExpression node1 = (PExpression) pop();
        AActualParameterList node = new AActualParameterList(node1, node2);
        return node;
    }

    Node new172()
    {
        TAnd node1 = (TAnd) pop();
        AAndLogicalOperator node = new AAndLogicalOperator(node1);
        return node;
    }

    Node new173()
    {
        TOr node1 = (TOr) pop();
        AOrLogicalOperator node = new AOrLogicalOperator(node1);
        return node;
    }

    Node new174()
    {
        TXor node1 = (TXor) pop();
        AXorLogicalOperator node = new AXorLogicalOperator(node1);
        return node;
    }

    Node new175()
    {
        TImplies node1 = (TImplies) pop();
        AImpliesLogicalOperator node = new AImpliesLogicalOperator(node1);
        return node;
    }

    Node new176()
    {
        TSet node1 = (TSet) pop();
        ASetCollectionKind node = new ASetCollectionKind(node1);
        return node;
    }

    Node new177()
    {
        TBag node1 = (TBag) pop();
        ABagCollectionKind node = new ABagCollectionKind(node1);
        return node;
    }

    Node new178()
    {
        TSequence node1 = (TSequence) pop();
        ASequenceCollectionKind node = new ASequenceCollectionKind(node1);
        return node;
    }

    Node new179()
    {
        TCollection node1 = (TCollection) pop();
        ACollectionCollectionKind node = new ACollectionCollectionKind(node1);
        return node;
    }

    Node new180()
    {
        TEqual node1 = (TEqual) pop();
        AEqualRelationalOperator node = new AEqualRelationalOperator(node1);
        return node;
    }

    Node new181()
    {
        TNotEqual node1 = (TNotEqual) pop();
        ANotEqualRelationalOperator node = new ANotEqualRelationalOperator(node1);
        return node;
    }

    Node new182()
    {
        TGt node1 = (TGt) pop();
        AGtRelationalOperator node = new AGtRelationalOperator(node1);
        return node;
    }

    Node new183()
    {
        TLt node1 = (TLt) pop();
        ALtRelationalOperator node = new ALtRelationalOperator(node1);
        return node;
    }

    Node new184()
    {
        TGteq node1 = (TGteq) pop();
        AGteqRelationalOperator node = new AGteqRelationalOperator(node1);
        return node;
    }

    Node new185()
    {
        TLteq node1 = (TLteq) pop();
        ALteqRelationalOperator node = new ALteqRelationalOperator(node1);
        return node;
    }

    Node new186()
    {
        TPlus node1 = (TPlus) pop();
        APlusAddOperator node = new APlusAddOperator(node1);
        return node;
    }

    Node new187()
    {
        TMinus node1 = (TMinus) pop();
        AMinusAddOperator node = new AMinusAddOperator(node1);
        return node;
    }

    Node new188()
    {
        TMult node1 = (TMult) pop();
        AMultMultiplyOperator node = new AMultMultiplyOperator(node1);
        return node;
    }

    Node new189()
    {
        TDiv node1 = (TDiv) pop();
        ADivMultiplyOperator node = new ADivMultiplyOperator(node1);
        return node;
    }

    Node new190()
    {
        TMinus node1 = (TMinus) pop();
        AMinusUnaryOperator node = new AMinusUnaryOperator(node1);
        return node;
    }

    Node new191()
    {
        TNot node1 = (TNot) pop();
        ANotUnaryOperator node = new ANotUnaryOperator(node1);
        return node;
    }

    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 8}, {9, SHIFT, 1}, {16, SHIFT, 2}, },
			{{-1, ERROR, 1}, {61, SHIFT, 6}, },
			{{-1, ERROR, 2}, {61, SHIFT, 7}, },
			{{-1, ERROR, 3}, {65, ACCEPT, -1}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 9}, {16, SHIFT, 2}, },
			{{-1, ERROR, 6}, {10, SHIFT, 9}, {16, SHIFT, 2}, {39, SHIFT, 10}, },
			{{-1, ERROR, 7}, {13, SHIFT, 14}, {20, SHIFT, 15}, {39, SHIFT, 16}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 10}, {61, SHIFT, 20}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 12}, {10, SHIFT, 21}, {16, SHIFT, 2}, {39, SHIFT, 10}, },
			{{-1, ERROR, 13}, {10, SHIFT, 24}, {16, SHIFT, 2}, },
			{{-1, ERROR, 14}, {40, SHIFT, 25}, {61, SHIFT, 26}, },
			{{-1, ERROR, 15}, {40, SHIFT, 27}, {61, SHIFT, 28}, },
			{{-1, ERROR, 16}, {61, SHIFT, 29}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 18}, {13, SHIFT, 14}, {20, SHIFT, 15}, {39, SHIFT, 33}, },
			{{-1, REDUCE, 10}, {13, SHIFT, 14}, {20, SHIFT, 15}, },
			{{-1, REDUCE, 168}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 23}, {10, SHIFT, 36}, {16, SHIFT, 2}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 25}, {61, SHIFT, 37}, },
			{{-1, ERROR, 26}, {40, SHIFT, 40}, },
			{{-1, ERROR, 27}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, ERROR, 28}, {40, SHIFT, 75}, },
			{{-1, REDUCE, 168}, {32, SHIFT, 76}, {40, SHIFT, 77}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 31}, {18, SHIFT, 79}, {19, SHIFT, 80}, {21, SHIFT, 81}, },
			{{-1, REDUCE, 18}, {61, SHIFT, 85}, },
			{{-1, ERROR, 33}, {61, SHIFT, 29}, },
			{{-1, REDUCE, 13}, {13, SHIFT, 14}, {20, SHIFT, 15}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 37}, {22, SHIFT, 89}, {32, SHIFT, 76}, {40, SHIFT, 77}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 39}, {22, SHIFT, 91}, },
			{{-1, ERROR, 40}, {61, SHIFT, 37}, },
			{{-1, REDUCE, 191}, },
			{{-1, REDUCE, 190}, },
			{{-1, ERROR, 43}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, ERROR, 44}, {61, SHIFT, 94}, },
			{{-1, ERROR, 45}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, REDUCE, 176}, },
			{{-1, REDUCE, 177}, },
			{{-1, REDUCE, 178}, },
			{{-1, REDUCE, 179}, },
			{{-1, ERROR, 50}, {36, SHIFT, 98}, },
			{{-1, REDUCE, 125}, },
			{{-1, REDUCE, 166}, {39, SHIFT, 10}, },
			{{-1, REDUCE, 124}, },
			{{-1, REDUCE, 123}, },
			{{-1, REDUCE, 122}, },
			{{-1, REDUCE, 30}, {2, SHIFT, 100}, {3, SHIFT, 101}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 63}, {28, SHIFT, 102}, {29, SHIFT, 103}, {30, SHIFT, 104}, {31, SHIFT, 105}, },
			{{-1, REDUCE, 68}, {22, SHIFT, 109}, {23, SHIFT, 110}, {24, SHIFT, 111}, {25, SHIFT, 112}, {26, SHIFT, 113}, {27, SHIFT, 114}, },
			{{-1, REDUCE, 71}, {7, SHIFT, 117}, {8, SHIFT, 118}, },
			{{-1, REDUCE, 76}, {5, SHIFT, 122}, {6, SHIFT, 123}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 83}, {0, SHIFT, 127}, {1, SHIFT, 128}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 120}, },
			{{-1, REDUCE, 121}, },
			{{-1, REDUCE, 119}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 90}, {32, SHIFT, 131}, {34, SHIFT, 132}, {42, SHIFT, 133}, },
			{{-1, ERROR, 72}, {36, SHIFT, 137}, },
			{{-1, ERROR, 73}, {32, SHIFT, 43}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, REDUCE, 57}, {47, SHIFT, 44}, },
			{{-1, ERROR, 75}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, ERROR, 76}, {33, SHIFT, 141}, {61, SHIFT, 94}, },
			{{-1, ERROR, 77}, {53, SHIFT, 144}, {54, SHIFT, 145}, {55, SHIFT, 146}, {56, SHIFT, 147}, {57, SHIFT, 148}, {59, SHIFT, 149}, {61, SHIFT, 52}, },
			{{-1, ERROR, 78}, {11, SHIFT, 154}, {12, SHIFT, 155}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 83}, {40, SHIFT, 157}, {61, SHIFT, 158}, },
			{{-1, REDUCE, 14}, {18, SHIFT, 79}, {19, SHIFT, 80}, {21, SHIFT, 81}, },
			{{-1, ERROR, 85}, {40, SHIFT, 77}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 87}, {18, SHIFT, 79}, {19, SHIFT, 80}, {21, SHIFT, 81}, },
			{{-1, REDUCE, 21}, {61, SHIFT, 85}, },
			{{-1, ERROR, 89}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, ERROR, 90}, {22, SHIFT, 162}, },
			{{-1, REDUCE, 34}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 93}, {2, SHIFT, 100}, {3, SHIFT, 101}, {33, SHIFT, 164}, },
			{{-1, REDUCE, 42}, {40, SHIFT, 77}, },
			{{-1, ERROR, 95}, {22, SHIFT, 166}, },
			{{-1, ERROR, 96}, {41, SHIFT, 167}, {48, SHIFT, 168}, },
			{{-1, ERROR, 97}, {2, SHIFT, 100}, {3, SHIFT, 101}, {50, SHIFT, 170}, },
			{{-1, ERROR, 98}, {61, SHIFT, 94}, },
			{{-1, REDUCE, 167}, {39, SHIFT, 10}, },
			{{-1, ERROR, 100}, {61, SHIFT, 172}, },
			{{-1, ERROR, 101}, {61, SHIFT, 173}, },
			{{-1, REDUCE, 172}, },
			{{-1, REDUCE, 173}, },
			{{-1, REDUCE, 174}, },
			{{-1, REDUCE, 175}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 107}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, REDUCE, 64}, {28, SHIFT, 102}, {29, SHIFT, 103}, {30, SHIFT, 104}, {31, SHIFT, 105}, },
			{{-1, REDUCE, 180}, },
			{{-1, REDUCE, 181}, },
			{{-1, REDUCE, 183}, },
			{{-1, REDUCE, 182}, },
			{{-1, REDUCE, 185}, },
			{{-1, REDUCE, 184}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 116}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, REDUCE, 186}, },
			{{-1, REDUCE, 187}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 120}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, REDUCE, 72}, {7, SHIFT, 117}, {8, SHIFT, 118}, },
			{{-1, REDUCE, 188}, },
			{{-1, REDUCE, 189}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 125}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, REDUCE, 77}, {5, SHIFT, 122}, {6, SHIFT, 123}, },
			{{-1, ERROR, 127}, {61, SHIFT, 52}, },
			{{-1, ERROR, 128}, {61, SHIFT, 52}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 84}, {0, SHIFT, 127}, {1, SHIFT, 128}, },
			{{-1, ERROR, 131}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {33, SHIFT, 185}, {38, SHIFT, 186}, {40, SHIFT, 77}, {41, SHIFT, 187}, {43, SHIFT, 188}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, ERROR, 132}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, ERROR, 133}, {18, SHIFT, 195}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 92}, {32, SHIFT, 131}, },
			{{-1, REDUCE, 91}, {32, SHIFT, 131}, {34, SHIFT, 132}, },
			{{-1, ERROR, 137}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {37, SHIFT, 199}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 31}, {2, SHIFT, 100}, {3, SHIFT, 101}, },
			{{-1, REDUCE, 38}, {40, SHIFT, 77}, },
			{{-1, REDUCE, 45}, {22, SHIFT, 203}, {41, SHIFT, 204}, },
			{{-1, ERROR, 143}, {33, SHIFT, 208}, },
			{{-1, ERROR, 144}, {32, SHIFT, 209}, },
			{{-1, ERROR, 145}, {32, SHIFT, 210}, },
			{{-1, ERROR, 146}, {32, SHIFT, 211}, },
			{{-1, ERROR, 147}, {32, SHIFT, 212}, },
			{{-1, ERROR, 148}, {32, SHIFT, 213}, },
			{{-1, ERROR, 149}, {32, SHIFT, 214}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 145}, },
			{{-1, REDUCE, 146}, },
			{{-1, REDUCE, 144}, },
			{{-1, ERROR, 154}, {40, SHIFT, 215}, },
			{{-1, ERROR, 155}, {40, SHIFT, 216}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 157}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, ERROR, 158}, {40, SHIFT, 218}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 17}, {18, SHIFT, 79}, {19, SHIFT, 80}, {21, SHIFT, 81}, },
			{{-1, REDUCE, 32}, {2, SHIFT, 100}, {3, SHIFT, 101}, },
			{{-1, ERROR, 162}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, REDUCE, 35}, {2, SHIFT, 100}, {3, SHIFT, 101}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 166}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, ERROR, 167}, {61, SHIFT, 94}, },
			{{-1, ERROR, 168}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, REDUCE, 115}, },
			{{-1, ERROR, 170}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, ERROR, 171}, {37, SHIFT, 224}, },
			{{-1, ERROR, 172}, {32, SHIFT, 225}, },
			{{-1, ERROR, 173}, {32, SHIFT, 226}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 135}, {32, SHIFT, 131}, {34, SHIFT, 132}, {42, SHIFT, 133}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 100}, },
			{{-1, ERROR, 186}, {61, SHIFT, 230}, },
			{{-1, ERROR, 187}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, ERROR, 188}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, REDUCE, 112}, },
			{{-1, ERROR, 190}, {2, SHIFT, 100}, {3, SHIFT, 101}, {33, SHIFT, 233}, {38, SHIFT, 186}, {40, SHIFT, 77}, {41, SHIFT, 187}, {43, SHIFT, 188}, },
			{{-1, REDUCE, 104}, },
			{{-1, ERROR, 192}, {33, SHIFT, 235}, {38, SHIFT, 186}, {40, SHIFT, 77}, {41, SHIFT, 187}, {43, SHIFT, 188}, },
			{{-1, REDUCE, 170}, {2, SHIFT, 100}, {3, SHIFT, 101}, {41, SHIFT, 237}, },
			{{-1, ERROR, 194}, {35, SHIFT, 240}, },
			{{-1, REDUCE, 169}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 93}, {32, SHIFT, 131}, },
			{{-1, REDUCE, 127}, },
			{{-1, REDUCE, 129}, {2, SHIFT, 100}, {3, SHIFT, 101}, {41, SHIFT, 237}, {44, SHIFT, 242}, },
			{{-1, ERROR, 201}, {37, SHIFT, 245}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 203}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, ERROR, 204}, {61, SHIFT, 94}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 46}, {41, SHIFT, 204}, },
			{{-1, REDUCE, 47}, {41, SHIFT, 204}, },
			{{-1, REDUCE, 39}, {40, SHIFT, 77}, },
			{{-1, ERROR, 209}, {53, SHIFT, 144}, {54, SHIFT, 145}, {55, SHIFT, 146}, {56, SHIFT, 147}, {57, SHIFT, 148}, {59, SHIFT, 149}, {61, SHIFT, 52}, },
			{{-1, ERROR, 210}, {53, SHIFT, 144}, {54, SHIFT, 145}, {55, SHIFT, 146}, {56, SHIFT, 147}, {57, SHIFT, 148}, {59, SHIFT, 149}, {61, SHIFT, 52}, },
			{{-1, ERROR, 211}, {53, SHIFT, 144}, {54, SHIFT, 145}, {55, SHIFT, 146}, {56, SHIFT, 147}, {57, SHIFT, 148}, {59, SHIFT, 149}, {61, SHIFT, 52}, },
			{{-1, ERROR, 212}, {53, SHIFT, 144}, {54, SHIFT, 145}, {55, SHIFT, 146}, {56, SHIFT, 147}, {57, SHIFT, 148}, {59, SHIFT, 149}, {61, SHIFT, 52}, },
			{{-1, ERROR, 213}, {53, SHIFT, 144}, {54, SHIFT, 145}, {55, SHIFT, 146}, {56, SHIFT, 147}, {57, SHIFT, 148}, {59, SHIFT, 149}, {61, SHIFT, 52}, },
			{{-1, ERROR, 214}, {33, SHIFT, 256}, {61, SHIFT, 94}, },
			{{-1, ERROR, 215}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, ERROR, 216}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, REDUCE, 36}, {2, SHIFT, 100}, {3, SHIFT, 101}, },
			{{-1, ERROR, 218}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, REDUCE, 33}, {2, SHIFT, 100}, {3, SHIFT, 101}, },
			{{-1, REDUCE, 118}, {2, SHIFT, 100}, {3, SHIFT, 101}, },
			{{-1, ERROR, 221}, {41, SHIFT, 167}, {48, SHIFT, 168}, },
			{{-1, REDUCE, 117}, },
			{{-1, ERROR, 223}, {2, SHIFT, 100}, {3, SHIFT, 101}, {51, SHIFT, 262}, },
			{{-1, REDUCE, 126}, },
			{{-1, ERROR, 225}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {33, SHIFT, 263}, {46, SHIFT, 264}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, ERROR, 226}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {33, SHIFT, 268}, {46, SHIFT, 264}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, REDUCE, 139}, },
			{{-1, REDUCE, 137}, {32, SHIFT, 131}, },
			{{-1, REDUCE, 136}, {32, SHIFT, 131}, {34, SHIFT, 132}, },
			{{-1, ERROR, 230}, {40, SHIFT, 77}, },
			{{-1, REDUCE, 111}, {2, SHIFT, 100}, {3, SHIFT, 101}, },
			{{-1, REDUCE, 114}, {2, SHIFT, 100}, {3, SHIFT, 101}, },
			{{-1, REDUCE, 101}, },
			{{-1, ERROR, 234}, {33, SHIFT, 274}, {38, SHIFT, 186}, {40, SHIFT, 77}, {41, SHIFT, 187}, {43, SHIFT, 188}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 103}, },
			{{-1, ERROR, 237}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, REDUCE, 133}, },
			{{-1, REDUCE, 171}, {41, SHIFT, 237}, },
			{{-1, REDUCE, 143}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 242}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, REDUCE, 130}, },
			{{-1, REDUCE, 131}, {41, SHIFT, 237}, },
			{{-1, REDUCE, 128}, },
			{{-1, REDUCE, 53}, {2, SHIFT, 100}, {3, SHIFT, 101}, },
			{{-1, REDUCE, 51}, {22, SHIFT, 203}, },
			{{-1, REDUCE, 50}, {41, SHIFT, 204}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 251}, {33, SHIFT, 279}, },
			{{-1, ERROR, 252}, {33, SHIFT, 280}, },
			{{-1, ERROR, 253}, {33, SHIFT, 281}, },
			{{-1, ERROR, 254}, {33, SHIFT, 282}, },
			{{-1, ERROR, 255}, {33, SHIFT, 283}, },
			{{-1, REDUCE, 152}, },
			{{-1, ERROR, 257}, {33, SHIFT, 284}, },
			{{-1, REDUCE, 24}, {2, SHIFT, 100}, {3, SHIFT, 101}, {11, SHIFT, 154}, {12, SHIFT, 155}, },
			{{-1, REDUCE, 26}, {2, SHIFT, 100}, {3, SHIFT, 101}, {11, SHIFT, 154}, {12, SHIFT, 155}, },
			{{-1, REDUCE, 37}, {2, SHIFT, 100}, {3, SHIFT, 101}, },
			{{-1, REDUCE, 116}, },
			{{-1, ERROR, 262}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, REDUCE, 156}, },
			{{-1, REDUCE, 163}, {40, SHIFT, 77}, },
			{{-1, REDUCE, 165}, {2, SHIFT, 100}, {3, SHIFT, 101}, },
			{{-1, ERROR, 266}, {33, SHIFT, 289}, },
			{{-1, REDUCE, 158}, {41, SHIFT, 290}, },
			{{-1, REDUCE, 154}, },
			{{-1, ERROR, 269}, {33, SHIFT, 293}, },
			{{-1, REDUCE, 141}, },
			{{-1, REDUCE, 140}, },
			{{-1, REDUCE, 138}, {32, SHIFT, 131}, },
			{{-1, ERROR, 273}, {22, SHIFT, 295}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 110}, {2, SHIFT, 100}, {3, SHIFT, 101}, },
			{{-1, REDUCE, 132}, },
			{{-1, REDUCE, 134}, {2, SHIFT, 100}, {3, SHIFT, 101}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 147}, },
			{{-1, REDUCE, 148}, },
			{{-1, REDUCE, 149}, },
			{{-1, REDUCE, 151}, },
			{{-1, REDUCE, 150}, },
			{{-1, REDUCE, 153}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 287}, {2, SHIFT, 100}, {3, SHIFT, 101}, {52, SHIFT, 296}, },
			{{-1, REDUCE, 164}, },
			{{-1, REDUCE, 157}, },
			{{-1, ERROR, 290}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {46, SHIFT, 264}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, REDUCE, 161}, },
			{{-1, REDUCE, 159}, {41, SHIFT, 290}, },
			{{-1, REDUCE, 155}, },
			{{-1, REDUCE, 142}, },
			{{-1, ERROR, 295}, {4, SHIFT, 41}, {8, SHIFT, 42}, {32, SHIFT, 43}, {47, SHIFT, 44}, {49, SHIFT, 45}, {53, SHIFT, 46}, {54, SHIFT, 47}, {55, SHIFT, 48}, {56, SHIFT, 49}, {58, SHIFT, 50}, {60, SHIFT, 51}, {61, SHIFT, 52}, {62, SHIFT, 53}, {63, SHIFT, 54}, {64, SHIFT, 55}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 162}, },
			{{-1, REDUCE, 160}, },
			{{-1, REDUCE, 113}, {2, SHIFT, 100}, {3, SHIFT, 101}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, {5, 8}, {13, 8}, {23, 8}, },
			{{-1, 30}, {32, 86}, {88, 86}, },
			{{-1, -1}, },
			{{-1, 156}, {258, 285}, {259, 286}, },
			{{-1, 17}, {19, 35}, {34, 35}, },
			{{-1, 38}, {40, 92}, },
			{{-1, 82}, {84, 159}, {160, 159}, },
			{{-1, 39}, {16, 31}, {33, 87}, },
			{{-1, 142}, {44, 95}, {167, 95}, {204, 247}, },
			{{-1, 189}, {29, 78}, {37, 90}, {85, 78}, {94, 165}, {141, 202}, {208, 250}, {230, 273}, {264, 288}, },
			{{-1, 143}, {98, 171}, {214, 257}, },
			{{-1, 205}, {207, 249}, {248, 249}, },
			{{-1, 206}, {247, 278}, },
			{{-1, 83}, },
			{{-1, 265}, {27, 56}, {43, 93}, {45, 97}, {75, 140}, {89, 161}, {91, 163}, {131, 190}, {132, 193}, {137, 200}, {157, 217}, {162, 219}, {166, 220}, {170, 223}, {187, 231}, {188, 232}, {203, 246}, {215, 258}, {216, 259}, {218, 260}, {237, 275}, {242, 277}, {262, 287}, {295, 299}, },
			{{-1, 57}, },
			{{-1, 58}, {168, 222}, },
			{{-1, 106}, {108, 175}, },
			{{-1, 59}, {107, 174}, },
			{{-1, 115}, },
			{{-1, 60}, {116, 176}, },
			{{-1, 119}, {121, 178}, },
			{{-1, 61}, {120, 177}, },
			{{-1, 124}, {126, 180}, },
			{{-1, 62}, {125, 179}, },
			{{-1, 63}, {73, 138}, },
			{{-1, 129}, {130, 184}, },
			{{-1, 64}, },
			{{-1, 134}, {135, 196}, {136, 197}, {182, 227}, {198, 241}, {228, 270}, {229, 271}, {272, 294}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 238}, {239, 276}, {244, 276}, },
			{{-1, 191}, {192, 236}, {234, 236}, },
			{{-1, 65}, {74, 139}, },
			{{-1, 169}, {221, 261}, },
			{{-1, 96}, {167, 221}, },
			{{-1, 66}, },
			{{-1, 67}, },
			{{-1, 68}, },
			{{-1, 69}, },
			{{-1, 201}, },
			{{-1, 243}, },
			{{-1, 181}, {128, 183}, },
			{{-1, 135}, {136, 198}, {182, 228}, {229, 272}, },
			{{-1, 150}, {209, 251}, {210, 252}, {211, 253}, {212, 254}, {213, 255}, },
			{{-1, 151}, },
			{{-1, 152}, },
			{{-1, 70}, },
			{{-1, 266}, {226, 269}, },
			{{-1, 291}, {292, 298}, },
			{{-1, 267}, {290, 297}, },
			{{-1, 71}, {77, 153}, {127, 182}, {128, 182}, {209, 153}, {210, 153}, {211, 153}, {212, 153}, {213, 153}, },
			{{-1, 11}, {12, 22}, {18, 22}, {99, 22}, },
			{{-1, 136}, {182, 229}, },
			{{-1, 194}, },
			{{-1, 107}, },
			{{-1, 72}, },
			{{-1, 116}, },
			{{-1, 120}, },
			{{-1, 125}, },
			{{-1, 73}, },
			{{-1, 12}, {7, 18}, {52, 99}, },
			{{-1, 5}, {6, 13}, {12, 23}, },
			{{-1, 19}, {18, 34}, },
			{{-1, 84}, {87, 160}, },
			{{-1, 32}, {33, 88}, },
			{{-1, 207}, {206, 248}, },
			{{-1, 74}, },
			{{-1, 108}, },
			{{-1, 121}, },
			{{-1, 126}, },
			{{-1, 130}, },
			{{-1, 192}, {190, 234}, },
			{{-1, 239}, {200, 244}, },
			{{-1, 292}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'package', 'context', EOF",
			"expecting: name",
			"expecting: EOF",
			"expecting: 'endpackage', 'context', EOF",
			"expecting: 'context', EOF",
			"expecting: 'endpackage', 'context', '::'",
			"expecting: 'def', 'inv', '::'",
			"expecting: '.', '->', '^', '^^', '*', '/', '+', '-', 'endpackage', 'init', 'derive', 'def', 'context', 'pre', 'post', 'inv', 'body', '=', '<>', '<', '>', '<=', '>=', 'and', 'or', 'xor', 'implies', '(', ')', '[', ']', '}', ';', '::', ':', ',', '@', '|', '..', 'let', 'in', 'then', 'else', 'endif', name, EOF",
			"expecting: 'endpackage', 'context'",
			"expecting: ':', name",
			"expecting: 'endpackage', 'def', 'context', 'inv', EOF",
			"expecting: ':'",
			"expecting: 'not', '-', '(', 'let', 'if', set, bag, sequence, collection, tuple, boolean, name, int, real, string lit",
			"expecting: 'def', 'inv', '(', '::', ':'",
			"expecting: 'endpackage', 'context', name, EOF",
			"expecting: 'pre', 'post', 'body'",
			"expecting: '=', '(', ':'",
			"expecting: '='",
			"expecting: '(', 'if', set, bag, sequence, collection, tuple, boolean, name, int, real, string lit",
			"expecting: '{'",
			"expecting: '.', '->', '^', '^^', '*', '/', '+', '-', 'endpackage', 'init', 'derive', 'def', 'context', 'pre', 'post', 'inv', 'body', '=', '<>', '<', '>', '<=', '>=', 'and', 'or', 'xor', 'implies', ')', ']', '}', ';', ':', ',', '|', '..', 'let', 'in', 'then', 'else', 'endif', name, EOF",
			"expecting: '^', '^^', 'endpackage', 'def', 'context', 'inv', EOF",
			"expecting: '^', '^^', 'endpackage', 'init', 'derive', 'def', 'context', 'pre', 'post', 'inv', 'body', ')', ']', '}', ';', ':', ',', '|', '..', 'in', 'then', 'else', 'endif', name, EOF",
			"expecting: '^', '^^', 'endpackage', 'init', 'derive', 'def', 'context', 'pre', 'post', 'inv', 'body', 'and', 'or', 'xor', 'implies', ')', ']', '}', ';', ':', ',', '|', '..', 'let', 'in', 'then', 'else', 'endif', name, EOF",
			"expecting: '^', '^^', 'endpackage', 'init', 'derive', 'def', 'context', 'pre', 'post', 'inv', 'body', '=', '<>', '<', '>', '<=', '>=', 'and', 'or', 'xor', 'implies', ')', ']', '}', ';', ':', ',', '|', '..', 'let', 'in', 'then', 'else', 'endif', name, EOF",
			"expecting: '^', '^^', '+', '-', 'endpackage', 'init', 'derive', 'def', 'context', 'pre', 'post', 'inv', 'body', '=', '<>', '<', '>', '<=', '>=', 'and', 'or', 'xor', 'implies', ')', ']', '}', ';', ':', ',', '|', '..', 'let', 'in', 'then', 'else', 'endif', name, EOF",
			"expecting: '^', '^^', '*', '/', '+', '-', 'endpackage', 'init', 'derive', 'def', 'context', 'pre', 'post', 'inv', 'body', '=', '<>', '<', '>', '<=', '>=', 'and', 'or', 'xor', 'implies', ')', ']', '}', ';', ':', ',', '|', '..', 'let', 'in', 'then', 'else', 'endif', name, EOF",
			"expecting: '^', '^^', 'endpackage', 'init', 'derive', 'def', 'context', 'pre', 'post', 'inv', 'body', ')', ']', '}', ';', ':', ',', '|', '..', 'let', 'in', 'then', 'else', 'endif', name, EOF",
			"expecting: '.', '->', '^', '^^', '*', '/', '+', '-', 'endpackage', 'init', 'derive', 'def', 'context', 'pre', 'post', 'inv', 'body', '=', '<>', '<', '>', '<=', '>=', 'and', 'or', 'xor', 'implies', '(', ')', '[', ']', '}', ';', ':', ',', '@', '|', '..', 'let', 'in', 'then', 'else', 'endif', name, EOF",
			"expecting: ')', name",
			"expecting: set, bag, sequence, collection, orderedset, tupletype, name",
			"expecting: 'init', 'derive'",
			"expecting: 'endpackage', 'context', 'pre', 'post', 'body', EOF",
			"expecting: 'not', '-', 'endpackage', 'def', 'context', 'inv', '(', 'let', 'if', set, bag, sequence, collection, tuple, boolean, name, int, real, string lit, EOF",
			"expecting: '^', '^^', ')'",
			"expecting: '=', ')', '}', ':', ','",
			"expecting: ',', 'in'",
			"expecting: '^', '^^', 'then'",
			"expecting: 'not', '-', '(', 'if', set, bag, sequence, collection, tuple, boolean, name, int, real, string lit",
			"expecting: 'not', '-', '(', ')', ';', ':', ',', '|', 'let', 'if', set, bag, sequence, collection, tuple, boolean, name, int, real, string lit",
			"expecting: 'pre'",
			"expecting: '.', '->', '^', '^^', '*', '/', '+', '-', 'endpackage', 'init', 'derive', 'def', 'context', 'pre', 'post', 'inv', 'body', '=', '<>', '<', '>', '<=', '>=', 'and', 'or', 'xor', 'implies', '(', ')', ']', '}', ';', ':', ',', '|', '..', 'let', 'in', 'then', 'else', 'endif', name, EOF",
			"expecting: '.', '->', '^', '^^', '*', '/', '+', '-', 'endpackage', 'init', 'derive', 'def', 'context', 'pre', 'post', 'inv', 'body', '=', '<>', '<', '>', '<=', '>=', 'and', 'or', 'xor', 'implies', '(', ')', '[', ']', '}', ';', ':', ',', '|', '..', 'let', 'in', 'then', 'else', 'endif', name, EOF",
			"expecting: 'not', '-', '(', '}', 'let', 'if', set, bag, sequence, collection, tuple, boolean, name, int, real, string lit",
			"expecting: 'pre', 'post', 'body', '=', ':'",
			"expecting: '=', ')', '}', ','",
			"expecting: ')'",
			"expecting: '('",
			"expecting: 'init', 'derive', 'pre', 'post', 'body', '=', ')', '}', ';', ':', ',', '|'",
			"expecting: '}'",
			"expecting: ')', ';', ':', ',', '|'",
			"expecting: '^', '^^', ')', ';', ':', ',', '|'",
			"expecting: '^', '^^', ']', ','",
			"expecting: ']'",
			"expecting: '^', '^^', '}', ',', '..'",
			"expecting: 'pre', 'post', 'body', '='",
			"expecting: ')', '}', ','",
			"expecting: '^', '^^', 'endpackage', 'context', 'pre', 'post', 'body', EOF",
			"expecting: '^', '^^', ',', 'in'",
			"expecting: '^', '^^', 'else'",
			"expecting: 'not', '-', '(', ')', '?', 'let', 'if', set, bag, sequence, collection, tuple, boolean, name, int, real, string lit",
			"expecting: ']', '}', ','",
			"expecting: ']', ','",
			"expecting: '}', ','",
			"expecting: '^', '^^', ')', '}', ','",
			"expecting: '^', '^^', 'endpackage', 'init', 'derive', 'context', name, EOF",
			"expecting: ')', ':', ','",
			"expecting: '^', '^^', ')', ','",
			"expecting: ')', ','",
			"expecting: '^', '^^', ']', '}', ','",
			"expecting: '^', '^^', '}'",
			"expecting: '^', '^^', 'endif'",
			"expecting: 'not', '-', '(', '?', 'let', 'if', set, bag, sequence, collection, tuple, boolean, name, int, real, string lit",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 3, 4, 5, 6, 3, 2, 1, 7, 5, 8, 9, 9, 1, 10, 6, 10, 7, 2, 7, 8, 2, 1, 11, 12, 11, 13, 14, 15, 14, 1, 10, 10, 2, 16, 10, 17, 1, 18, 18, 12, 1, 12, 19, 19, 19, 19, 19, 20, 7, 20, 20, 20, 21, 20, 22, 23, 24, 25, 26, 26, 20, 27, 20, 20, 20, 20, 22, 28, 19, 18, 27, 12, 29, 30, 31, 9, 9, 9, 32, 9, 32, 11, 14, 15, 14, 12, 17, 33, 10, 34, 35, 17, 36, 37, 1, 7, 1, 1, 38, 38, 38, 38, 23, 38, 23, 38, 38, 38, 38, 38, 38, 23, 38, 38, 38, 25, 38, 25, 38, 38, 26, 38, 26, 1, 1, 20, 20, 39, 12, 40, 20, 41, 42, 43, 26, 27, 21, 44, 45, 46, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 11, 11, 14, 12, 11, 32, 32, 21, 12, 21, 20, 45, 12, 1, 38, 27, 12, 49, 47, 47, 23, 23, 23, 25, 25, 26, 26, 20, 28, 20, 20, 20, 1, 12, 12, 50, 51, 50, 50, 52, 53, 42, 20, 20, 41, 20, 54, 49, 55, 12, 1, 56, 56, 56, 44, 30, 30, 30, 30, 30, 29, 12, 12, 57, 12, 21, 58, 36, 27, 59, 20, 60, 60, 20, 41, 42, 11, 51, 51, 20, 50, 20, 50, 12, 61, 62, 41, 20, 12, 49, 63, 20, 64, 45, 56, 56, 55, 46, 46, 46, 46, 46, 48, 46, 65, 65, 57, 27, 12, 22, 66, 67, 46, 68, 22, 46, 20, 20, 41, 17, 20, 69, 61, 70, 56, 48, 48, 48, 48, 48, 48, 14, 14, 71, 68, 22, 72, 68, 68, 22, 20, 12, 20, 68, 68, 51, 
        };*/
}
