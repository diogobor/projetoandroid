/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.andromda.translation.ocl.node;

import java.util.*;
import org.andromda.translation.ocl.analysis.*;

public final class ALogicalExp extends PLogicalExp
{
    private PRelationalExpression _relationalExpression_;
    private final LinkedList _logicalExpressionTail_ = new TypedLinkedList(new LogicalExpressionTail_Cast());

    public ALogicalExp()
    {
    }

    public ALogicalExp(
        PRelationalExpression _relationalExpression_,
        List _logicalExpressionTail_)
    {
        setRelationalExpression(_relationalExpression_);

        {
            this._logicalExpressionTail_.clear();
            this._logicalExpressionTail_.addAll(_logicalExpressionTail_);
        }

    }

    public ALogicalExp(
        PRelationalExpression _relationalExpression_,
        XPLogicalExpressionTail _logicalExpressionTail_)
    {
        setRelationalExpression(_relationalExpression_);

        if(_logicalExpressionTail_ != null)
        {
            while(_logicalExpressionTail_ instanceof X1PLogicalExpressionTail)
            {
                this._logicalExpressionTail_.addFirst(((X1PLogicalExpressionTail) _logicalExpressionTail_).getPLogicalExpressionTail());
                _logicalExpressionTail_ = ((X1PLogicalExpressionTail) _logicalExpressionTail_).getXPLogicalExpressionTail();
            }
            this._logicalExpressionTail_.addFirst(((X2PLogicalExpressionTail) _logicalExpressionTail_).getPLogicalExpressionTail());
        }

    }
    public Object clone()
    {
        return new ALogicalExp(
            (PRelationalExpression) cloneNode(_relationalExpression_),
            cloneList(_logicalExpressionTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALogicalExp(this);
    }

    public PRelationalExpression getRelationalExpression()
    {
        return _relationalExpression_;
    }

    public void setRelationalExpression(PRelationalExpression node)
    {
        if(_relationalExpression_ != null)
        {
            _relationalExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _relationalExpression_ = node;
    }

    public LinkedList getLogicalExpressionTail()
    {
        return _logicalExpressionTail_;
    }

    public void setLogicalExpressionTail(List list)
    {
        _logicalExpressionTail_.clear();
        _logicalExpressionTail_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_relationalExpression_)
            + toString(_logicalExpressionTail_);
    }

    void removeChild(Node child)
    {
        if(_relationalExpression_ == child)
        {
            _relationalExpression_ = null;
            return;
        }

        if(_logicalExpressionTail_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_relationalExpression_ == oldChild)
        {
            setRelationalExpression((PRelationalExpression) newChild);
            return;
        }

        for(ListIterator i = _logicalExpressionTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class LogicalExpressionTail_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PLogicalExpressionTail node = (PLogicalExpressionTail) o;

            if((node.parent() != null) &&
                (node.parent() != ALogicalExp.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ALogicalExp.this))
            {
                node.parent(ALogicalExp.this);
            }

            return node;
        }
    }
}
