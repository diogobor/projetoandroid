#parse("templates/ejb/SessionEJBGlobals.vm")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SessionEJBLocator.vsl in andromda-ejb-cartridge.
//

#set ($generatedFile = "${serviceLocatorName}.java")
#if($stringUtils.isNotEmpty($customTypesPackage))
package $customTypesPackage;
#set ($generatedFile = "${stringUtils.replace($customTypesPackage,'.','/')}/${generatedFile}")
#end

import java.lang.reflect.Method;
import java.util.HashMap;

/**
 * Locates and provides all available application services.
 */
public class $serviceLocatorName
{
    /**
	 * The shared instance of this ServiceLocator.
	 */
	private static $serviceLocatorName instance;
	private $serviceLocatorName()
	{
		// shouldn't be instantiated
	}

    /**
	 * Gets the shared instance of this Class
	 *
	 * @return the shared service locator instance.
	 */
	public static final $serviceLocatorName instance()
	{
		if (instance == null)
		{
			instance = new $serviceLocatorName();
		}
		return instance;
	}

    private Object getService(java.util.Hashtable environment, String jndiName, Class narrowTo)
    {
        try
        {
            Object home = lookupHome(environment,jndiName,narrowTo);
            Class cls = home.getClass();
	    Class[] varargs = null;
	    Method meth = cls.getMethod("create", varargs);
	    return meth.invoke(home,varargs);
	}
        catch (Exception ex)
        {
            throw new javax.ejb.EJBException(ex);
        }
    }

    private Object getServiceLocal(String jndiName)
	{
		try
		{
			Object home = lookupLocalHome(jndiName+"Local");
			Class cls = home.getClass();
			Class[] varargs = null;
			Method meth = cls.getMethod("create", varargs);
			return meth.invoke(home,varargs);
		}
		catch (Exception ex)
		{
			throw new javax.ejb.EJBException(ex);
		}
	}

	public Object getServiceBI(java.util.Hashtable environment, String jndiName, Class narrowTo)
	{
		Object bi = null;

		try
		{
			//tenta pegar o bean localmente
			bi = getServiceLocal(jndiName);
			return bi;
		}catch (Exception ex1)
		{
			try
			{
				//tenta pegar o bean remotamente
				bi = getService(environment, jndiName, narrowTo);
				return bi;
			}catch(Exception ex2)
			{
				throw new javax.ejb.EJBException(ex2);
			}
		}
	}

	private Object getHome(java.util.Hashtable environment,	String jndiName, Class narrowTo)
		throws javax.naming.NamingException
	{
		return ServiceLocator.lookupHome(environment,jndiName,narrowTo);
	}

	private static Object lookupHome(java.util.Hashtable environment, String jndiName, Class narrowTo)
		throws javax.naming.NamingException
	{
		javax.naming.InitialContext initialContext = new javax.naming.InitialContext(environment);
		try
		{
			Object object = initialContext.lookup(jndiName);
			// only narrow if necessary
			if (narrowTo.isInstance(java.rmi.Remote.class))
			{
				object = javax.rmi.PortableRemoteObject.narrow(object, narrowTo);
			}
			return object;
		}
		finally
		{
			initialContext.close();
		}
	}

	private static Object lookupLocalHome(String jndiName) throws javax.naming.NamingException 
	{
		javax.naming.InitialContext initialContext = new javax.naming.InitialContext(null);
		Object object = initialContext.lookup(jndiName);
		return object;
	}

#foreach ($service in $services)

#if(!$service.findTaggedValue("@andromda.services.shared"))
##gera codigo para pegar o bean remoto
#set ($home = "${stringUtils.uncapitalize($service.name)}Home")
#set ($homeClassName = "${service.fullyQualifiedName}Home")
	/**
	 * Gets an instance of <code>$service.fullyQualifiedName</code>
	 */
	private final $service.fullyQualifiedName get${service.name}()
	{
		try
		{
			$homeClassName $home = ($homeClassName)lookupHome(
				null,
				${homeClassName}.JNDI_NAME,
				${homeClassName}.class);

			return ${home}.create();
		}
		catch (Exception ex)
		{
			throw new javax.ejb.EJBException(ex);
		}
	}
##fim gera codigo para pegar o bean remoto

##gera codigo para pegar o bean local
#set ($home = "${stringUtils.uncapitalize($service.name)}LocalHome")
#set ($homeClassName = "${service.fullyQualifiedName}LocalHome")
	/**
	 * Gets an instance of <code>${service.fullyQualifiedName}Local</code>
	 */
	private final ${service.fullyQualifiedName}Local get${service.name}Local()
	{
		try
		{
			$homeClassName $home = ($homeClassName)lookupLocalHome(${homeClassName}.JNDI_NAME);

			return ${home}.create();
		}
		catch (Exception ex)
		{
			throw new javax.ejb.EJBException(ex);
		}
	}
##fim gera codigo para pegar o bean remoto

##gera codigo para pegar o bean BI
	/**
	 * Gets an instance of <code>${service.fullyQualifiedName}BI</code>
	 */
	public final ${service.fullyQualifiedName}BI get${service.name}BI()
	{
		${service.fullyQualifiedName}BI bi;
		try
		{
			//tenta pegar o bean localmente
			bi = get${service.name}Local();
		}
		catch (Exception ex1)
		{
			try
			{
				//tenta pegar o bean remotamente
				bi = get${service.name}();
			}
			catch(Exception ex2)
			{
				throw new javax.ejb.EJBException(ex2);
			}
		}

		return bi;
	}
##fim gera codigo para pegar o bean BI
#end
#end

	private final ${customTypesPackage}.UtilServiceHandler getUtilServiceHandler()
	{
		try
		{
			${customTypesPackage}.UtilServiceHandlerHome utilServiceHandlerHome = (${customTypesPackage}.UtilServiceHandlerHome)lookupHome(
				null,
				${customTypesPackage}.UtilServiceHandlerHome.JNDI_NAME,
				${customTypesPackage}.UtilServiceHandlerHome.class);

			return utilServiceHandlerHome.create();
		}
		catch (Exception ex)
		{
			throw new javax.ejb.EJBException(ex);
		}
	}

	private final ${customTypesPackage}.UtilServiceHandlerLocal getUtilServiceHandlerLocal()
	{
		try
		{
			${customTypesPackage}.UtilServiceHandlerLocalHome utilServiceHandlerLocalHome = (${customTypesPackage}.UtilServiceHandlerLocalHome)lookupLocalHome(${customTypesPackage}.UtilServiceHandlerLocalHome.JNDI_NAME);

			return utilServiceHandlerLocalHome.create();
		}
		catch (Exception ex)
		{
			throw new javax.ejb.EJBException(ex);
		}
	}

    public final ${customTypesPackage}.UtilServiceHandlerBI getUtilServiceHandlerBI()
    {
		${customTypesPackage}.UtilServiceHandlerBI bi;
		try
		{
			//tenta pegar o bean localmente
			bi = getUtilServiceHandlerLocal();
		}
		catch (Exception ex1)
		{
			try
			{
				//tenta pegar o bean remotamente
				bi = getUtilServiceHandler();
			}
			catch(Exception ex2)
			{
				throw new javax.ejb.EJBException(ex2);
			}
		}

		return bi;
	}
}
