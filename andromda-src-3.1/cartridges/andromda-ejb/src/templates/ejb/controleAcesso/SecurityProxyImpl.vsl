// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SecurityProxyImpl.vsl in andromda-ejb-cartridge.
//

#set ($generatedFile = "SecurityProxyImpl.java")
#if($stringUtils.isNotEmpty($controleAcessoDir))
package $controleAcessoDir;
#set ($generatedFile = "${stringUtils.replace($controleAcessoDir,'.','/')}/${generatedFile}")
#end

public class SecurityProxyImpl implements SecurityProxy {
	private String ejbUsername = null;
	private String ejbPassword = null;
	private String ejbProjectName = null;

	public void init(Class beanHome, Class beanRemote, Object securityMgr)
		throws InstantiationException {
	}

	public void init(Class beanHome, Class beanRemote, Class beanLocalHome, Class beanLocal, Object securityMgr)
		throws InstantiationException {
	}

	public void setEJBContext(EJBContext ctx) {
		try {
			if (SecurityHolder.getSubject() == null && SecurityHolder.getUsername() == null && SecurityHolder.getPassword() == null && SecurityHolder.getProjectName() == null) {

				/* tentado usar o SecurityAssociation - casos em que o EJB é chamado externamente */
				if (ctx.getCallerPrincipal() != null) {
					Object principal = SecurityAssociation.getPrincipal();
					if (principal != null) {
						String[] params = principal.toString().split("@");

						if (params.length == 2) {
							Object credential = SecurityAssociation.getCredential();

							if (credential != null) {
								ejbUsername = params[0];
								ejbPassword = credential.toString();
								ejbProjectName = params[1];
							}
						}
					}
				}
			}
		} catch (java.lang.IllegalStateException e) {
			// ignorado
		}
	}

	public void invokeHome(Method m, Object[] args)
		throws Exception {
	}

	public void invoke(Method m, Object[] args, Object bean)
		throws Exception {
		Subject subject = SecurityHolder.getSubject();
		Servico servico = new Servico(toString(m, args));
		boolean possuiPermissao = false;

		if (subject == null) {
			if (ejbUsername == null || ejbPassword == null || ejbProjectName == null) {
				ejbUsername = SecurityHolder.getUsername();
				ejbPassword = SecurityHolder.getPassword();
				ejbProjectName = SecurityHolder.getProjectName();
			}

			if (ejbUsername != null && ejbPassword != null && ejbProjectName != null) {
				CallbackHandler handler = new LoginCallbackHandler(ejbUsername, ejbPassword);
				LoginContext loginContext = new LoginContext(ejbProjectName, handler);
				loginContext.login();
	
				subject = loginContext.getSubject();
				SecurityHolder.setSubject(subject);
			}
		}

		if (subject == null) {
			throw new SubjectNaoIdentificadoException("subject.null");
		} else {
			PrincipalImpl principal = ControleAcesso.getCallerPrincipal(subject);

			if (ejbProjectName != null) {
				principal.setNomeProjeto(ejbProjectName);
			}
			else if (principal.getNomeProjeto() == null) {
				throw new NomeProjetoNaoEncontradoException("nome.projeto.null");
			}

			HashMap<String, HashMap<String, Collection<Perfil>>> servicos = ServicosSingleton.instance().getServicos();
			HashMap<String, Collection<accessControl.Perfil>> mapServicos;
			if (servicos == null) {
				mapServicos = new HashMap<String, Collection<accessControl.Perfil>>();
			} else {
				mapServicos = servicos.get(principal.getNomeProjeto());
			}

			if (principal.isValido()) {
				possuiPermissao = true;
			} else {
				possuiPermissao = ControleAcesso.verificaPermissao(subject,	mapServicos, servico, false);
			}
			if (!possuiPermissao) {
				throw new AcessoNegadoException("acesso.negado  - " + servico.getNome());
			}
		}
	}

	public String toString(Method m, Object[] args) {
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(m.getDeclaringClass().getName() + ".");
			sb.append(m.getName() + "(");
			Class[] params = m.getParameterTypes(); 
			for (int j = 0; j < params.length; j++) {
				String nomeParam = params[j].getName();
				String simpleNomeParam = params[j].getSimpleName();
				if (nomeParam.startsWith("[")) {
					nomeParam = nomeParam.substring(2);
					nomeParam = nomeParam.replace(";", "");
					String teste = simpleNomeParam.replace("[]", "");
					nomeParam = nomeParam.replace(teste, "");
					nomeParam = nomeParam + simpleNomeParam;
				}
				sb.append(nomeParam);

				if (j < (params.length - 1)) {
					sb.append(", ");
				}
			}
			sb.append(")");

			String str = sb.toString();

			if (!str.matches(".*BI\\.\\w*\\(.*\\)"))
				str = str.replaceAll("(.*)(\\.\\w*\\(.*\\))", "$1BI$2");

			return str;
		} catch (Exception e) {
			return "<" + e + ">";
		}
	}
}
