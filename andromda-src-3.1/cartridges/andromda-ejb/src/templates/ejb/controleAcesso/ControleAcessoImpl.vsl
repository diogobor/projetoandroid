// license-header java merge-point
// Generated by: ControleAcessoImpl.vsl in andromda-ejb-cartridge.
//

#set ($generatedFile = "ControleAcessoImpl.java")
#if($stringUtils.isNotEmpty($controleAcessoDir))
package $controleAcessoDir;
#set ($generatedFile = "${stringUtils.replace($controleAcessoDir,'.','/')}/${generatedFile}")
#end

import accessControl.exception.ControleAcessoException;

public  class ControleAcessoImpl extends accessControl.ControleAcesso {

	/**
	 * Verifica se o operador necessita trocar senha obrigatoria
	 */
	@Override
	public boolean precisaTrocarSenha(accessControl.Operador operador) throws ControleAcessoException{
		return false;
	}
	
	/**
	 * Recupera o operador de acordo com o login
	 */
	@Override
	public accessControl.Operador getOperador(String usuario) throws ControleAcessoException{
		// TODO Auto-generated method stub
		return null;
	}

	/**
	 * lista os servicos em um map onde a chave Ã© o nome do servico e o valor a colecao de perfis que possui acesso ao servico
	 */
	@Override
	public java.util.HashMap<String, java.util.Collection<accessControl.Perfil>> listaServicos() throws ControleAcessoException {
		// TODO Auto-generated method stub
		return null;
	}	

	/**
	 * realiza a troca de senha do operador
	 */
	@Override
	public boolean trocaSenha(accessControl.Operador operador, String senhaAtual, String novaSenha) throws ControleAcessoException{
		return false;
		
	}	

	/**
	 * Bloqueia o acesso do usuário
	 */
	@Override
	public void bloqueiaUsuario(String usuario) {
		
	}		

	/**
	 * Verifica se o acesso do usuário está bloqueado
	 */
	@Override
	public boolean usuarioBloqueado(String usuario) {
		return false;
	}	

	/**
	 * Verifica se a senha é fraca
	 */
	@Override
	public boolean senhaFraca(String senha) {
		return false;
		
		/* IMPLEMENTAÇÃO SUGERIDA
		 *
		 * (a senha deve possuir pelo menos 8 caracteres,
		 * incluindo numerais, letras maiúsculas,
		 * letras minúsculas e símbolos)
		 *
		 
		if (senha == null) {
			return true;
		}
		
		if (senha.length() < 8) {
			return true;
		}
		
		String numerais = "0123456789";
		String maiusculas = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		String minusculas = "abcdefghijklmnopqrstuvwxyz";
		String simbolos = " !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";

		boolean achouNumeral = false;
		boolean achouMaiuscula = false;
		boolean achouMinuscula = false;
		boolean achouSimbolo = false;
		
		for (int i = 0; i < senha.length(); i++) {
			achouNumeral |= numerais.indexOf(senha.charAt(i)) > -1;
			achouMaiuscula |= maiusculas.indexOf(senha.charAt(i)) > -1;
			achouMinuscula |= minusculas.indexOf(senha.charAt(i)) > -1;
			achouSimbolo |= simbolos.indexOf(senha.charAt(i)) > -1;
		}
		
		return !achouNumeral || !achouMaiuscula || !achouMinuscula || !achouSimbolo;
		
		*/
	}
	
	/**
	 * lista as restricoes em um map onde a chave Ã© o perfil e o valor a colecao de restricoes do perfil
	 */
	@Override
	public java.util.HashMap<String,java.util.Collection<accessControl.Restricao>> getRestricoes(accessControl.Operador operador, accessControl.Servico servico) throws ControleAcessoException {
		// TODO Auto-generated method stub
		return null;
	}	
	
	/**
	*	Busca os perfis associados ao servico
	*/
	@Override
	public  java.util.Collection<accessControl.Perfil> buscaPerfisServico(accessControl.Servico servico) throws ControleAcessoException{
		
		return null;
	}
	
	public  static class RestricaoDinamicaImpl {
	#foreach ($service in $services)
	
		#foreach ($operation in $service.operations )
	
		$operation.visibility  $operation.returnType.fullyQualifiedName ${operation.name} () {
	   	 #if ($operation.returnTypePresent)
                    return $operation.returnType.javaNullString;
            	#end
		}
	
	#end
		
	#end
	}	
	
	public void agendaTarefas(){
	
	}


} 