// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: ControleAcesso.vsl in andromda-ejb-cartridge.
//

#set ($generatedFile = "ControleAcesso.java")
#if($stringUtils.isNotEmpty($controleAcessoDir))
package $controleAcessoDir;
#set ($generatedFile = "${stringUtils.replace($controleAcessoDir,'.','/')}/${generatedFile}")
#end

import accessControl.exception.ControleAcessoException;
import accessControl.exception.ImpossivelVerificarPermissaoException;

import org.jboss.security.SimpleGroup;

import java.security.Principal;

import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

import javax.security.auth.Subject;


public abstract class ControleAcesso {
    public abstract boolean precisaTrocarSenha(Operador operador)
        throws ControleAcessoException;
        
    public abstract  Collection<accessControl.Perfil> buscaPerfisServico(accessControl.Servico servico) throws ControleAcessoException;      

    public abstract accessControl.Operador getOperador(java.lang.String usuario)
        throws ControleAcessoException;

    public abstract HashMap<String, java.util.Collection<Perfil>> listaServicos()
        throws ControleAcessoException;

    public abstract boolean trocaSenha(Operador operador, String senhaAtual,
        String novaSenha) throws ControleAcessoException;

    public abstract HashMap<String, Collection<Restricao>> getRestricoes(
        Operador operador, Servico servico) throws ControleAcessoException;

    public static PrincipalImpl getCallerPrincipal(Subject subject) {
        PrincipalImpl principalImpl = null;
        Set principals = subject.getPrincipals();
        Iterator itPrincipals = principals.iterator();

        while (itPrincipals.hasNext()) {
            Principal principal = (Principal) itPrincipals.next();

            if (principal.getName().equals("CallerPrincipal")) {
                SimpleGroup simpleGroup = (SimpleGroup) principal;
                principalImpl = (PrincipalImpl) simpleGroup.members()
                                                           .nextElement();
            }
        }

        return principalImpl;
    }

    public static boolean possuiPermissao(Collection<Perfil> perfisServico,
        Collection<Perfil> perfisUsuario) {
        boolean possuiPermissao = false;

        if ((perfisServico != null) && (perfisUsuario != null)) {
            for (Iterator it = perfisServico.iterator(); it.hasNext();) {
                Perfil perfilServico = (Perfil) it.next();

                if (perfisUsuario.contains(perfilServico)) {
                    possuiPermissao = true;
                }
            }
        }

        return possuiPermissao;
    }

    public Collection<Perfil> getPerfisServico(Servico servico) {
        Collection<Perfil> perfisServico = null;

        try {
            perfisServico = (Collection<Perfil>) ServicosSingleton.instance()
                                                                  .getServicos()
                                                                  .get(servico);

            return perfisServico;
        } catch (NullPointerException npe) {
            return null;
        } catch (ClassCastException cce) {
            return null;
        }
    }

    public static boolean verificaPermissao(Subject subject,
        HashMap<String, java.util.Collection<Perfil>> mapServicos,
        Servico servico, boolean vista)
        throws ImpossivelVerificarPermissaoException {
        boolean possuiPermissao = false;

        if (subject == null) {
            throw new ImpossivelVerificarPermissaoException("subject.null");
        }

        PrincipalImpl principalImpl = getCallerPrincipal(subject);

        if (principalImpl == null) {
            throw new ImpossivelVerificarPermissaoException("principal.null");
        }

        if (mapServicos != null) {
            Collection<Perfil> perfisServico = mapServicos.get(servico.getNome());
            Collection<Perfil> perfisUsuario = principalImpl.getPerfis();

            if (((perfisServico == null) || perfisServico.isEmpty()) && vista) {
                possuiPermissao = true;
            } else {
                possuiPermissao = possuiPermissao(perfisServico, perfisUsuario);
            }
        } else {
            if (vista) {
                possuiPermissao = true;
            }
        }

        return possuiPermissao;
    }
}
