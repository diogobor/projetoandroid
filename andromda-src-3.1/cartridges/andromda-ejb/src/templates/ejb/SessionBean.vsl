#parse("templates/ejb/SessionEJBGlobals.vm")

// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SessionBean.vsl in andromda-ejb-cartridge-coppetec.
//
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

import javax.ejb.EJBException;
import javax.naming.NamingException;
#foreach ($serviceRef in $service.serviceReferences)
import ${serviceRef.targetElement.fullyQualifiedName}Home;
#end

/**
$service.getDocumentation(" * ")
 */
public abstract class ${service.name}Bean
#if ($service.generalization)
    extends ${service.generalization.fullyQualifiedName}Impl
#end
    implements javax.ejb.SessionBean, ${service.name}BI
{

#if ($service.ejbStateful)
    // --------------- attributes ---------------------
#foreach ( $attribute in $service.attributes )
#set ($attributeTypeName = $attribute.type.fullyQualifiedName)

   protected $attributeTypeName $attribute.name;

   /**
$attribute.getDocumentation("     * ")
    */
    public $attributeTypeName ${attribute.getterName}()
    {
        return $attribute.name;
    }

    public void ${attribute.setterName}($attributeTypeName newValue)
    {
        $attribute.name = newValue;
    }

#end
#end
    // ---------------- business methods  ----------------------
    
    
#set($webService = $service.hasStereotype("$webSrv"))

#if($ejbSecurityEnabled)
#set($cont = 0)	
#set($contParameter = 0)
#end
#foreach ($operation in $service.operations)
#if($ejbSecurityEnabled)
#set($contParameter = 0)
#set($cont = $cont + 1)
#end

##foreach ($operation in $service.operations)
#set ($listaArgumentos = '')
#set ($return = '')
#if($webService)
#renderParametersWS($operation $listaArgumentos true)
#renderReturnWS($operation $return)
#else
#renderParameters($operation $listaArgumentos true)
#set($return = $operation.returnType.fullyQualifiedName)
#end
	    
#set($exception = "")	    
#if ($operation.exceptionsPresent)
	#set($exception = "throws $operation.exceptionList")
#end
	  #if(!$operation.returnType.collectionType && !$operation.returnType.listType && !$operation.returnType.setType )
	  $operation.visibility  abstract $return handle${stringUtils.capitalize(${operation.name})} ($listaArgumentos) $exception;
	  #end
	 #if($ejbSecurityEnabled && !$webService)
	 #renderParametersSecurity($operation)
	 #end
		 
	   /**
		$operation.getDocumentation("    * ")
	    */	  
	  $operation.visibility  $return ${operation.name} ($listaArgumentos) $exception{
		#if($ejbSecurityEnabled && !$webService)
		#renderSecurityBody($operation)												
		#else		
		#renderOperationBody($operation $service)
		#end
	  }	  


## [MOISES-COPPETEC]
## Codigo para gerar métodos que receba o grupo a ser carregado na paginação, caso este método retorne uma coleção
#if($operation.returnType.collectionType || $operation.returnType.listType || $operation.returnType.setType )
#set($contParameter = 0)
#set ($listaArgumentos = '')
#set ($return = '')
#if($webService)
#renderParametersWSPaginacao($operation $listaArgumentos true)
#renderReturnWS($operation $return)
#else
#renderParametersPaginacao($operation $listaArgumentos true)
#set($return = $operation.returnType.fullyQualifiedName)
#end

#set($exception = "")
#if ($operation.exceptionsPresent)
	#set($exception = "throws $operation.exceptionList")
#end
	  $operation.visibility  abstract $return handle${stringUtils.capitalize(${operation.name})} ($listaArgumentos) $exception;
	 #if($ejbSecurityEnabled)	
	 Integer paginacao${cont} = null;
	 #end
	   /**
		$operation.getDocumentation("    * ")
	    */	  
	  $operation.visibility  $return ${operation.name} ($listaArgumentos) $exception{
		#if($ejbSecurityEnabled)
		#renderSecurityBodyPagination($operation)												
		#else	
		#renderOperationBodyPagination($operation $service)
		#end
	  }
#end
#end


	#foreach ($dependencia in $service.sourceDependencies)
	#if($dependencia.targetElement.FullyQualifiedName.indexOf(".${modelPackageName}.") > 0)
#if($ejbSecurityEnabled)
#set($cont = $cont + 1)
#set($contParameter = $contParameter + 1)
#renderSecurityManipula("delete" $dependencia)
#renderSecurityManipula("filter" $dependencia)
#renderSecurityManipula("insert" $dependencia)
#renderSecurityManipula("insertOrUpdate" $dependencia)
#renderSecurityManipula("list" $dependencia)
#renderSecurityManipula("select" $dependencia)
#renderSecurityManipula("update" $dependencia)
#renderSecurityManipula("export" $dependencia)
#renderSecurityManipula("import" $dependencia)

##	public  java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> handleManipula${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name}), ${customTypesPackage}.${actionPackageName}.Action action) throws ${customTypesPackage}.${actionPackageName}.ActionException
##	{
##		try{ 
##			return action.execute((${dependencia.targetElement.fullyQualifiedName}Abstract)$stringUtils.lowerCase(${dependencia.targetElement.name}));   
##		} catch (${customTypesPackage}.${modelPackageName}.DAOException e) {
##			throw new ${customTypesPackage}.${actionPackageName}.ActionException(e);
##		}
##	}	  	
##public  java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> manipula${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name}), ${customTypesPackage}.${actionPackageName}.Action action) throws ${customTypesPackage}.${actionPackageName}.ActionException{						 		
##		 boolean responsibleSession = false;
##		 try{
##		 responsibleSession = ${customTypesPackage}.${modelPackageName}.AbstractDAO.getSession();
##		 return handleManipula${dependencia.targetElement.name}($stringUtils.lowerCase(${dependencia.targetElement.name}), action);	 
##		 } finally {		 				 			
##			if(responsibleSession)
##				${customTypesPackage}.${modelPackageName}.AbstractDAO.closeSession();
##		}
##		
##		
##	 }
		
#end
	
	public  java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> handleManipula${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name}), ${customTypesPackage}.${actionPackageName}.Action action) throws ${customTypesPackage}.${actionPackageName}.ActionException
	{
		try{ 
			return action.execute((${dependencia.targetElement.fullyQualifiedName}Abstract)$stringUtils.lowerCase(${dependencia.targetElement.name}));   
		} catch (${customTypesPackage}.${modelPackageName}.DAOException e) {
			throw new ${customTypesPackage}.${actionPackageName}.ActionException(e);
		}
	}	  	
public  java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> manipula${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name}), ${customTypesPackage}.${actionPackageName}.Action action) throws ${customTypesPackage}.${actionPackageName}.ActionException{						 		
		 boolean responsibleSession = false;
		 try{
		 responsibleSession = ${customTypesPackage}.${modelPackageName}.AbstractDAO.getSession();
		 return handleManipula${dependencia.targetElement.name}($stringUtils.lowerCase(${dependencia.targetElement.name}), action);	 
		 } finally {		 				 			
			if(responsibleSession)
				${customTypesPackage}.${modelPackageName}.AbstractDAO.closeSession();
		}
		
		
	 }
#end	 	  
#end 






	##renderGetSession()
   
    protected javax.ejb.SessionContext ctx = null;

    public void setSessionContext( javax.ejb.SessionContext ctx )
    {
        this.ctx = ctx;
    } 
    
   // ---------------- create methods -------------------------

    public void ejbCreate ()
           throws javax.ejb.CreateException
    {
    }

    public void ejbPostCreate ()
           throws javax.ejb.CreateException
    {
    }

#if ($service.ejbStateful)
   // ---------------- create methods with separate attributes --------------------

    public void ejbCreate $service.operationCallFromAttributes
           throws javax.ejb.CreateException
    {
#foreach ($attribute in $service.attributes)
        ${attribute.setterName} (${attribute.name});
#end
    }

    public void ejbPostCreate $service.operationCallFromAttributes
           throws javax.ejb.CreateException
    {
    }

#end
	    protected Object getService(Class classe) throws Exception{
		try{
			javax.security.auth.Subject subject = javax.security.auth.Subject.getSubject(java.security.AccessController.getContext());
    	    java.lang.reflect.Constructor c = classe.getConstructor(javax.security.auth.Subject.class);
			return c.newInstance(subject);
		}catch(Exception e){
			throw new Exception("erro.na.recuperacao.do.servico");			
		}		
	}
    public void ejbRemove()
    {
    }

    public void ejbPassivate()
    {
    }

    public void ejbActivate()
    {
    }
}