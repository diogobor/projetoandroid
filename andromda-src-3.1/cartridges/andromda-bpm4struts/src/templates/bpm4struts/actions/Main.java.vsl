// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: Main.java.vsl in andromda-bpm4struts-cartridge-coppetec.
//
package $mainDir;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionForward;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

#set ($securityEnabled = $stringUtils.isNotBlank($securityRealm))

/**
 * 
 */
 
#if($securityEnabled) 
	public final class Main extends ${controleAcessoDir}.Login{
	    public ActionForward particularExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
#else
	public final class Main extends org.apache.struts.action.Action{
		public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
#end
    {
      Object[] objetos = null;
      Class[] classes = null;
      final MainFormImpl specificForm = (MainFormImpl)form;
      final Object previousFormObject = request.getSession().getAttribute("form");

#if($securityEnabled)
        try {
            specificForm.setParametrosLogin(((java.lang.String)previousFormObject.getClass().getMethod("getParametrosLogin", classes).invoke(previousFormObject, objetos)));	
        } catch(Exception e) {
            //Nao faz nada, simplesmente nao copia o parametro
        }
#end

        final ActionForward forward = mapping.findForward("main");
        try
        {
            request.getSession().setAttribute("form", form);
        }
        catch (java.lang.Exception exception)
        {
            // we populate the current form with only the request parameters
            Object currentForm = request.getSession().getAttribute("form");
            // if we can't get the 'form' from the session, try from the request
            if (currentForm == null)
            {
                currentForm = request.getAttribute("form");
            }
            if (currentForm != null)
            {
                final java.util.Map parameters = new java.util.HashMap();
                for (final java.util.Enumeration names = request.getParameterNames(); names.hasMoreElements();)
                {
                    final String name = String.valueOf(names.nextElement());
                    parameters.put(name, request.getParameter(name));
                }
                try
                {
                    org.apache.commons.beanutils.BeanUtils.populate(currentForm, parameters);
                }
                catch (java.lang.Exception populateException)
                {
                    // ignore if we have an exception here (we just don't populate).
                }
            }
            throw exception;        
        }
        
        request.getSession().setAttribute("form", form);
        return forward;
    }


    /**
     * Returns true if <strong>NO</strong> errors
     * are present in the request.  This includes default validation
     * errors produced by the struts framework and the exception
     * handler errors caught by the pattern matching
     * exception handler.
     *
     * @return true if errors are <strong>not</strong> present, false otherwise.
     */
    private boolean errorsNotPresent(HttpServletRequest request)
    {
        return this.getExceptionHandlerErrors(request).isEmpty() &&
            (this.getErrors(request) == null || this.getErrors(request).isEmpty());
    }

    /**
     * <p>
     *  Retrieves the exception handler messages (if any).  Creates a new
     *  ActionMessages instance and returns that if one doesn't already exist.
     * </p>
     */
    private org.apache.struts.action.ActionMessages getExceptionHandlerErrors(HttpServletRequest request)
    {
        org.apache.struts.action.ActionMessages errors =
            (org.apache.struts.action.ActionMessages)request.getAttribute(
                "org.andromda.bpm4struts.errormessages");
        if (errors == null)
        {
        	errors =             (org.apache.struts.action.ActionMessages)request.getSession().getAttribute(
            "org.andromda.bpm4struts.errormessages");
        	if(errors == null){
            errors = new org.apache.struts.action.ActionMessages();
        	}
            request.getSession().removeAttribute("org.andromda.bpm4struts.errormessages");        	
            request.setAttribute("org.andromda.bpm4struts.errormessages", errors);
        }
        return errors;
    }    
}