// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: Enumeration.vsl in andromda-java-cartridge.
//
#if ($stringUtils.isNotBlank($enumeration.packageName))
package $enumeration.packageName;
#end

/**
$enumeration.getDocumentation(" * ")
 */
public class $enumeration.name
#if($enumeration.generalization)
    extends ${enumeration.generalization.fullyQualifiedName}
#elseif ($serializable.equalsIgnoreCase("true"))
    implements java.io.Serializable
#end
{

	private static final java.util.Map internationalizationKeys = new java.util.HashMap($enumeration.literals.size(), 1);
	
	static{
	#set($literalsLenght = $enumeration.literals.size())	
	#set($literalsLenght = $literalsLenght + 1)
	
#foreach ($literal in $enumeration.literals)
	#if ($enumeration.literalType.primitive)
    	internationalizationKeys.put(new ${enumeration.literalType.wrapperName}($literal.enumerationValue), "enum.label.${enumeration.name}.${literal.name}");
    	#else
    	internationalizationKeys.put(new ${enumeration.literalType.fullyQualifiedName}(${literal.enumerationValue}), "enum.label.${enumeration.name}.${literal.name}");
    	#end    	
#end
	#if ($enumeration.literalType.primitive)
    	internationalizationKeys.put(new ${enumeration.literalType.wrapperName}("$literalsLenght"), "");
    	#else
    	internationalizationKeys.put(new ${enumeration.literalType.fullyQualifiedName}("$literalsLenght"), "");
    	#end  	
	}
	
    #if ($enumeration.literalType.primitive)
    public static final $enumeration.name VAZIO = new ${enumeration.name}(new ${enumeration.literalType.wrapperName}("$literalsLenght"));
    #else
    public static final $enumeration.name VAZIO = new ${enumeration.name}(new ${enumeration.literalType.fullyQualifiedName}("$literalsLenght"));
    #end
    
#foreach ($literal in $enumeration.literals)
    /**
$literal.getDocumentation("     * ")
     */
    #if ($enumeration.literalType.primitive)
    public static final $enumeration.name $literal.name = new ${enumeration.name}(new ${enumeration.literalType.wrapperName}($literal.enumerationValue));
    #else
    public static final $enumeration.name $literal.name = new ${enumeration.name}(new ${enumeration.literalType.fullyQualifiedName}(${literal.enumerationValue}));
    #end

#end
    
 
    private $enumeration.literalType.fullyQualifiedName value;

    public final String internationalizationKey;	

    private ${enumeration.name}($enumeration.literalType.fullyQualifiedName value)
    {
        this.value = value;
        internationalizationKey = (java.lang.String)internationalizationKeys.get(value); 
    }

    /**
     * The default constructor allowing
     * super classes to access it.
     */
    protected ${enumeration.name}()
    {
    	internationalizationKey = null;
    }

    /**
     * @see java.lang.Object#toString()
     */
    public String toString()
    {
        return "" + value;
    }
    

    /**
     * Creates an instance of $enumeration.name from <code>value</code>.
     *
     * @param value the value to create the $enumeration.name from.
     */
    public static $enumeration.name $enumeration.fromOperationSignature
    {
#set ($value = "value")
#if($enumeration.literalType.primitive)
#set ($value = "new ${enumeration.literalType.wrapperName}(value)")
#end
	if(value == null) return null;
        $enumeration.name typeValue = (${enumeration.name})values.get($value);
        if (typeValue == null)
        {
            throw new IllegalArgumentException(
                "invalid value '" + value + "', possible values are: " + literals);
        }
        return typeValue;
    }

    /**
     * Gets the underlying value of this type safe enumeration.
     *
     * @return the underlying value.
     */
    public $enumeration.literalType.fullyQualifiedName getValue()
    {
        return this.value;
    }
    
    public java.lang.String getInternationalizationKey()
    {
        return this.internationalizationKey;
    }

    /**
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    public int compareTo(Object that)
    {
#if($enumeration.literalType.primitive)
        return this.getValue() < (($enumeration.name)that).getValue() ? -1 :
            (this.getValue() == (($enumeration.name)that).getValue() ? 0 : 1);
#else
        return (this == that) ? 0 : this.getValue().compareTo(
            (($enumeration.name)that).getValue());
#end
    }

    /**
     * Returns an unmodifiable list containing the literals that are known by this enumeration.
     *
     * @return A List containing the actual literals defined by this enumeration, this list
     *         can not be modified.
     */
    public static java.util.List literals()
    {
        return literals;
    }

    /**
     * Returns an unmodifiable list containing the names of the literals that are known
     * by this enumeration.
     *
     * @return A List containing the actual names of the literals defined by this
     *         enumeration, this list can not be modified.
     */
    public static java.util.List names()
    {
        return names;
    }
    
    /**
     * Returns an unmodifiable list containing the enumerations.
     *
     * @return A List containing the actual enumerations defined by this
     *         enumeration, this list can not be modified.
     */
    public static java.util.List enumerations()
    {
    	return enumerations;
    }

    /**
     * @see java.lang.Object#equals(java.lang.Object)
     */
    public boolean equals(Object object)
    {
#if ($enumeration.literalType.primitive)
        return (this == object)
            || (object instanceof $enumeration.name
            && (($enumeration.name)object).getValue() == this.getValue());
#else
        return (this == object)
            || (object instanceof $enumeration.name && (($enumeration.name)object).getValue().equals(
                this.getValue()));
#end
    }

    /**
     * @see java.lang.Object#hashCode()
     */
    public int hashCode()
    {
#if ($enumeration.literalType.primitive)
        return this.getValue();
#else
        return this.getValue().hashCode();
#end
    }

    private static final java.util.Map values = new java.util.HashMap($enumeration.literals.size(), 1);
    private static java.util.List literals = new java.util.ArrayList($enumeration.literals.size());
    private static java.util.List names = new java.util.ArrayList($enumeration.literals.size());
    private static java.util.List enumerations = new java.util.ArrayList($enumeration.literals.size());

    /**
     * Initializes the values.
     */
    static
    {
#foreach ($literal in $enumeration.literals)
#set ($value = "${literal.name}.value")
#if($literal.type.primitive)
#set ($value = "new ${literal.type.wrapperName}(${literal.name}.value)")
#end
        values.put($value, $literal.name);
        literals.add($value);
        names.add("$literal.name");
        enumerations.add($literal.name);
#end
	values.put(VAZIO.value, VAZIO);
	enumerations.add(0, VAZIO);
        literals = java.util.Collections.unmodifiableList(literals);
        names = java.util.Collections.unmodifiableList(names);
    }
}