/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.andromda.translation.ocl.node;

import java.util.*;
import org.andromda.translation.ocl.analysis.*;

public final class AMessageArguments extends PMessageArguments
{
    private PMessageArgument _messageArgument_;
    private final LinkedList _messageArgumentsTail_ = new TypedLinkedList(new MessageArgumentsTail_Cast());

    public AMessageArguments()
    {
    }

    public AMessageArguments(
        PMessageArgument _messageArgument_,
        List _messageArgumentsTail_)
    {
        setMessageArgument(_messageArgument_);

        {
            this._messageArgumentsTail_.clear();
            this._messageArgumentsTail_.addAll(_messageArgumentsTail_);
        }

    }

    public AMessageArguments(
        PMessageArgument _messageArgument_,
        XPMessageArgumentsTail _messageArgumentsTail_)
    {
        setMessageArgument(_messageArgument_);

        if(_messageArgumentsTail_ != null)
        {
            while(_messageArgumentsTail_ instanceof X1PMessageArgumentsTail)
            {
                this._messageArgumentsTail_.addFirst(((X1PMessageArgumentsTail) _messageArgumentsTail_).getPMessageArgumentsTail());
                _messageArgumentsTail_ = ((X1PMessageArgumentsTail) _messageArgumentsTail_).getXPMessageArgumentsTail();
            }
            this._messageArgumentsTail_.addFirst(((X2PMessageArgumentsTail) _messageArgumentsTail_).getPMessageArgumentsTail());
        }

    }
    public Object clone()
    {
        return new AMessageArguments(
            (PMessageArgument) cloneNode(_messageArgument_),
            cloneList(_messageArgumentsTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMessageArguments(this);
    }

    public PMessageArgument getMessageArgument()
    {
        return _messageArgument_;
    }

    public void setMessageArgument(PMessageArgument node)
    {
        if(_messageArgument_ != null)
        {
            _messageArgument_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _messageArgument_ = node;
    }

    public LinkedList getMessageArgumentsTail()
    {
        return _messageArgumentsTail_;
    }

    public void setMessageArgumentsTail(List list)
    {
        _messageArgumentsTail_.clear();
        _messageArgumentsTail_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_messageArgument_)
            + toString(_messageArgumentsTail_);
    }

    void removeChild(Node child)
    {
        if(_messageArgument_ == child)
        {
            _messageArgument_ = null;
            return;
        }

        if(_messageArgumentsTail_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_messageArgument_ == oldChild)
        {
            setMessageArgument((PMessageArgument) newChild);
            return;
        }

        for(ListIterator i = _messageArgumentsTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class MessageArgumentsTail_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PMessageArgumentsTail node = (PMessageArgumentsTail) o;

            if((node.parent() != null) &&
                (node.parent() != AMessageArguments.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AMessageArguments.this))
            {
                node.parent(AMessageArguments.this);
            }

            return node;
        }
    }
}
