/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.andromda.translation.ocl.analysis;

import java.util.*;
import org.andromda.translation.ocl.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPDeclaration().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAPackageDeclaration(APackageDeclaration node)
    {
        defaultIn(node);
    }

    public void outAPackageDeclaration(APackageDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAPackageDeclaration(APackageDeclaration node)
    {
        inAPackageDeclaration(node);
        if(node.getPackage() != null)
        {
            node.getPackage().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            Object temp[] = node.getPathNameTail().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PPathNameTail) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getContextDeclaration().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PContextDeclaration) temp[i]).apply(this);
            }
        }
        if(node.getEndpackage() != null)
        {
            node.getEndpackage().apply(this);
        }
        outAPackageDeclaration(node);
    }

    public void inAContextDeclaration(AContextDeclaration node)
    {
        defaultIn(node);
    }

    public void outAContextDeclaration(AContextDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAContextDeclaration(AContextDeclaration node)
    {
        inAContextDeclaration(node);
        {
            Object temp[] = node.getContextDeclaration().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PContextDeclaration) temp[i]).apply(this);
            }
        }
        outAContextDeclaration(node);
    }

    public void inAClassifierContextDeclaration(AClassifierContextDeclaration node)
    {
        defaultIn(node);
    }

    public void outAClassifierContextDeclaration(AClassifierContextDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAClassifierContextDeclaration(AClassifierContextDeclaration node)
    {
        inAClassifierContextDeclaration(node);
        if(node.getContext() != null)
        {
            node.getContext().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            Object temp[] = node.getPathNameTail().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PPathNameTail) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getClassifierExpressionBody().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PClassifierExpressionBody) temp[i]).apply(this);
            }
        }
        outAClassifierContextDeclaration(node);
    }

    public void inAOperationContextDeclaration(AOperationContextDeclaration node)
    {
        defaultIn(node);
    }

    public void outAOperationContextDeclaration(AOperationContextDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAOperationContextDeclaration(AOperationContextDeclaration node)
    {
        inAOperationContextDeclaration(node);
        if(node.getContext() != null)
        {
            node.getContext().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            Object temp[] = node.getPathNameTail().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PPathNameTail) temp[i]).apply(this);
            }
        }
        if(node.getScopeOperator() != null)
        {
            node.getScopeOperator().apply(this);
        }
        if(node.getOperation() != null)
        {
            node.getOperation().apply(this);
        }
        {
            Object temp[] = node.getOperationExpressionBody().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((POperationExpressionBody) temp[i]).apply(this);
            }
        }
        outAOperationContextDeclaration(node);
    }

    public void inAAttributeOrAssociationContextDeclaration(AAttributeOrAssociationContextDeclaration node)
    {
        defaultIn(node);
    }

    public void outAAttributeOrAssociationContextDeclaration(AAttributeOrAssociationContextDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAAttributeOrAssociationContextDeclaration(AAttributeOrAssociationContextDeclaration node)
    {
        inAAttributeOrAssociationContextDeclaration(node);
        if(node.getContext() != null)
        {
            node.getContext().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            Object temp[] = node.getPathNameTail().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PPathNameTail) temp[i]).apply(this);
            }
        }
        if(node.getScopeOperator() != null)
        {
            node.getScopeOperator().apply(this);
        }
        {
            Object temp[] = node.getAttributeOrAssociationExpressionBody().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PAttributeOrAssociationExpressionBody) temp[i]).apply(this);
            }
        }
        outAAttributeOrAssociationContextDeclaration(node);
    }

    public void inAAttributeOrAssociationExpressionBody(AAttributeOrAssociationExpressionBody node)
    {
        defaultIn(node);
    }

    public void outAAttributeOrAssociationExpressionBody(AAttributeOrAssociationExpressionBody node)
    {
        defaultOut(node);
    }

    public void caseAAttributeOrAssociationExpressionBody(AAttributeOrAssociationExpressionBody node)
    {
        inAAttributeOrAssociationExpressionBody(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getTypeDeclaration() != null)
        {
            node.getTypeDeclaration().apply(this);
        }
        if(node.getInitialOrDerivedValue() != null)
        {
            node.getInitialOrDerivedValue().apply(this);
        }
        outAAttributeOrAssociationExpressionBody(node);
    }

    public void inAScopeOperatorName(AScopeOperatorName node)
    {
        defaultIn(node);
    }

    public void outAScopeOperatorName(AScopeOperatorName node)
    {
        defaultOut(node);
    }

    public void caseAScopeOperatorName(AScopeOperatorName node)
    {
        inAScopeOperatorName(node);
        if(node.getScopeOperator() != null)
        {
            node.getScopeOperator().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAScopeOperatorName(node);
    }

    public void inAInitInitialOrDerivedValue(AInitInitialOrDerivedValue node)
    {
        defaultIn(node);
    }

    public void outAInitInitialOrDerivedValue(AInitInitialOrDerivedValue node)
    {
        defaultOut(node);
    }

    public void caseAInitInitialOrDerivedValue(AInitInitialOrDerivedValue node)
    {
        inAInitInitialOrDerivedValue(node);
        if(node.getInit() != null)
        {
            node.getInit().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getInitialOrDerivedValue() != null)
        {
            node.getInitialOrDerivedValue().apply(this);
        }
        outAInitInitialOrDerivedValue(node);
    }

    public void inADeriveInitialOrDerivedValue(ADeriveInitialOrDerivedValue node)
    {
        defaultIn(node);
    }

    public void outADeriveInitialOrDerivedValue(ADeriveInitialOrDerivedValue node)
    {
        defaultOut(node);
    }

    public void caseADeriveInitialOrDerivedValue(ADeriveInitialOrDerivedValue node)
    {
        inADeriveInitialOrDerivedValue(node);
        if(node.getDerive() != null)
        {
            node.getDerive().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getInitialOrDerivedValue() != null)
        {
            node.getInitialOrDerivedValue().apply(this);
        }
        outADeriveInitialOrDerivedValue(node);
    }

    public void inADefClassifierExpressionBody(ADefClassifierExpressionBody node)
    {
        defaultIn(node);
    }

    public void outADefClassifierExpressionBody(ADefClassifierExpressionBody node)
    {
        defaultOut(node);
    }

    public void caseADefClassifierExpressionBody(ADefClassifierExpressionBody node)
    {
        inADefClassifierExpressionBody(node);
        if(node.getDef() != null)
        {
            node.getDef().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getDefinitionExpression() != null)
        {
            node.getDefinitionExpression().apply(this);
        }
        outADefClassifierExpressionBody(node);
    }

    public void inAInvClassifierExpressionBody(AInvClassifierExpressionBody node)
    {
        defaultIn(node);
    }

    public void outAInvClassifierExpressionBody(AInvClassifierExpressionBody node)
    {
        defaultOut(node);
    }

    public void caseAInvClassifierExpressionBody(AInvClassifierExpressionBody node)
    {
        inAInvClassifierExpressionBody(node);
        if(node.getInv() != null)
        {
            node.getInv().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAInvClassifierExpressionBody(node);
    }

    public void inAVariableDefinitionExpression(AVariableDefinitionExpression node)
    {
        defaultIn(node);
    }

    public void outAVariableDefinitionExpression(AVariableDefinitionExpression node)
    {
        defaultOut(node);
    }

    public void caseAVariableDefinitionExpression(AVariableDefinitionExpression node)
    {
        inAVariableDefinitionExpression(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getTypeDeclaration() != null)
        {
            node.getTypeDeclaration().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAVariableDefinitionExpression(node);
    }

    public void inAOperationDefinitionExpression(AOperationDefinitionExpression node)
    {
        defaultIn(node);
    }

    public void outAOperationDefinitionExpression(AOperationDefinitionExpression node)
    {
        defaultOut(node);
    }

    public void caseAOperationDefinitionExpression(AOperationDefinitionExpression node)
    {
        inAOperationDefinitionExpression(node);
        if(node.getOperation() != null)
        {
            node.getOperation().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAOperationDefinitionExpression(node);
    }

    public void inAOperationExpressionBody(AOperationExpressionBody node)
    {
        defaultIn(node);
    }

    public void outAOperationExpressionBody(AOperationExpressionBody node)
    {
        defaultOut(node);
    }

    public void caseAOperationExpressionBody(AOperationExpressionBody node)
    {
        inAOperationExpressionBody(node);
        if(node.getOperationStereotype() != null)
        {
            node.getOperationStereotype().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAOperationExpressionBody(node);
    }

    public void inAOperation(AOperation node)
    {
        defaultIn(node);
    }

    public void outAOperation(AOperation node)
    {
        defaultOut(node);
    }

    public void caseAOperation(AOperation node)
    {
        inAOperation(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getParameters() != null)
        {
            node.getParameters().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getReturnTypeDeclaration() != null)
        {
            node.getReturnTypeDeclaration().apply(this);
        }
        outAOperation(node);
    }

    public void inAVariableDeclaration(AVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclaration(AVariableDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAVariableDeclaration(AVariableDeclaration node)
    {
        inAVariableDeclaration(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getTypeDeclaration() != null)
        {
            node.getTypeDeclaration().apply(this);
        }
        outAVariableDeclaration(node);
    }

    public void inATypeDeclaration(ATypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outATypeDeclaration(ATypeDeclaration node)
    {
        defaultOut(node);
    }

    public void caseATypeDeclaration(ATypeDeclaration node)
    {
        inATypeDeclaration(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeDeclaration(node);
    }

    public void inAVariableDeclarationList(AVariableDeclarationList node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclarationList(AVariableDeclarationList node)
    {
        defaultOut(node);
    }

    public void caseAVariableDeclarationList(AVariableDeclarationList node)
    {
        inAVariableDeclarationList(node);
        if(node.getVariableDeclaration() != null)
        {
            node.getVariableDeclaration().apply(this);
        }
        if(node.getVariableDeclarationValue() != null)
        {
            node.getVariableDeclarationValue().apply(this);
        }
        {
            Object temp[] = node.getVariableDeclarationListTail().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PVariableDeclarationListTail) temp[i]).apply(this);
            }
        }
        outAVariableDeclarationList(node);
    }

    public void inAVariableDeclarationListTail(AVariableDeclarationListTail node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclarationListTail(AVariableDeclarationListTail node)
    {
        defaultOut(node);
    }

    public void caseAVariableDeclarationListTail(AVariableDeclarationListTail node)
    {
        inAVariableDeclarationListTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getVariableDeclaration() != null)
        {
            node.getVariableDeclaration().apply(this);
        }
        if(node.getVariableDeclarationValue() != null)
        {
            node.getVariableDeclarationValue().apply(this);
        }
        outAVariableDeclarationListTail(node);
    }

    public void inAEqualExpression(AEqualExpression node)
    {
        defaultIn(node);
    }

    public void outAEqualExpression(AEqualExpression node)
    {
        defaultOut(node);
    }

    public void caseAEqualExpression(AEqualExpression node)
    {
        inAEqualExpression(node);
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAEqualExpression(node);
    }

    public void inABodyOperationStereotype(ABodyOperationStereotype node)
    {
        defaultIn(node);
    }

    public void outABodyOperationStereotype(ABodyOperationStereotype node)
    {
        defaultOut(node);
    }

    public void caseABodyOperationStereotype(ABodyOperationStereotype node)
    {
        inABodyOperationStereotype(node);
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        outABodyOperationStereotype(node);
    }

    public void inAPreOperationStereotype(APreOperationStereotype node)
    {
        defaultIn(node);
    }

    public void outAPreOperationStereotype(APreOperationStereotype node)
    {
        defaultOut(node);
    }

    public void caseAPreOperationStereotype(APreOperationStereotype node)
    {
        inAPreOperationStereotype(node);
        if(node.getPre() != null)
        {
            node.getPre().apply(this);
        }
        outAPreOperationStereotype(node);
    }

    public void inAPostOperationStereotype(APostOperationStereotype node)
    {
        defaultIn(node);
    }

    public void outAPostOperationStereotype(APostOperationStereotype node)
    {
        defaultOut(node);
    }

    public void caseAPostOperationStereotype(APostOperationStereotype node)
    {
        inAPostOperationStereotype(node);
        if(node.getPost() != null)
        {
            node.getPost().apply(this);
        }
        outAPostOperationStereotype(node);
    }

    public void inALetExpression(ALetExpression node)
    {
        defaultIn(node);
    }

    public void outALetExpression(ALetExpression node)
    {
        defaultOut(node);
    }

    public void caseALetExpression(ALetExpression node)
    {
        inALetExpression(node);
        {
            Object temp[] = node.getLetExp().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PLetExp) temp[i]).apply(this);
            }
        }
        outALetExpression(node);
    }

    public void inALogicalExpression(ALogicalExpression node)
    {
        defaultIn(node);
    }

    public void outALogicalExpression(ALogicalExpression node)
    {
        defaultOut(node);
    }

    public void caseALogicalExpression(ALogicalExpression node)
    {
        inALogicalExpression(node);
        if(node.getLogicalExp() != null)
        {
            node.getLogicalExp().apply(this);
        }
        outALogicalExpression(node);
    }

    public void inAMessageExpression(AMessageExpression node)
    {
        defaultIn(node);
    }

    public void outAMessageExpression(AMessageExpression node)
    {
        defaultOut(node);
    }

    public void caseAMessageExpression(AMessageExpression node)
    {
        inAMessageExpression(node);
        if(node.getMessageExp() != null)
        {
            node.getMessageExp().apply(this);
        }
        outAMessageExpression(node);
    }

    public void inAIfExpression(AIfExpression node)
    {
        defaultIn(node);
    }

    public void outAIfExpression(AIfExpression node)
    {
        defaultOut(node);
    }

    public void caseAIfExpression(AIfExpression node)
    {
        inAIfExpression(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getIfBranch() != null)
        {
            node.getIfBranch().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getThenBranch() != null)
        {
            node.getThenBranch().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getElseBranch() != null)
        {
            node.getElseBranch().apply(this);
        }
        if(node.getEndif() != null)
        {
            node.getEndif().apply(this);
        }
        outAIfExpression(node);
    }

    public void inALogicalExp(ALogicalExp node)
    {
        defaultIn(node);
    }

    public void outALogicalExp(ALogicalExp node)
    {
        defaultOut(node);
    }

    public void caseALogicalExp(ALogicalExp node)
    {
        inALogicalExp(node);
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        {
            Object temp[] = node.getLogicalExpressionTail().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PLogicalExpressionTail) temp[i]).apply(this);
            }
        }
        outALogicalExp(node);
    }

    public void inALogicalExpressionTail(ALogicalExpressionTail node)
    {
        defaultIn(node);
    }

    public void outALogicalExpressionTail(ALogicalExpressionTail node)
    {
        defaultOut(node);
    }

    public void caseALogicalExpressionTail(ALogicalExpressionTail node)
    {
        inALogicalExpressionTail(node);
        if(node.getLogicalOperator() != null)
        {
            node.getLogicalOperator().apply(this);
        }
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        outALogicalExpressionTail(node);
    }

    public void inARelationalExpression(ARelationalExpression node)
    {
        defaultIn(node);
    }

    public void outARelationalExpression(ARelationalExpression node)
    {
        defaultOut(node);
    }

    public void caseARelationalExpression(ARelationalExpression node)
    {
        inARelationalExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        if(node.getRelationalExpressionTail() != null)
        {
            node.getRelationalExpressionTail().apply(this);
        }
        outARelationalExpression(node);
    }

    public void inARelationalExpressionTail(ARelationalExpressionTail node)
    {
        defaultIn(node);
    }

    public void outARelationalExpressionTail(ARelationalExpressionTail node)
    {
        defaultOut(node);
    }

    public void caseARelationalExpressionTail(ARelationalExpressionTail node)
    {
        inARelationalExpressionTail(node);
        if(node.getRelationalOperator() != null)
        {
            node.getRelationalOperator().apply(this);
        }
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outARelationalExpressionTail(node);
    }

    public void inAAdditiveExpression(AAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAAdditiveExpression(AAdditiveExpression node)
    {
        defaultOut(node);
    }

    public void caseAAdditiveExpression(AAdditiveExpression node)
    {
        inAAdditiveExpression(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        {
            Object temp[] = node.getAdditiveExpressionTail().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PAdditiveExpressionTail) temp[i]).apply(this);
            }
        }
        outAAdditiveExpression(node);
    }

    public void inAAdditiveExpressionTail(AAdditiveExpressionTail node)
    {
        defaultIn(node);
    }

    public void outAAdditiveExpressionTail(AAdditiveExpressionTail node)
    {
        defaultOut(node);
    }

    public void caseAAdditiveExpressionTail(AAdditiveExpressionTail node)
    {
        inAAdditiveExpressionTail(node);
        if(node.getAddOperator() != null)
        {
            node.getAddOperator().apply(this);
        }
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        outAAdditiveExpressionTail(node);
    }

    public void inAMultiplicativeExpression(AMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAMultiplicativeExpression(AMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    public void caseAMultiplicativeExpression(AMultiplicativeExpression node)
    {
        inAMultiplicativeExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        {
            Object temp[] = node.getMultiplicativeExpressionTail().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PMultiplicativeExpressionTail) temp[i]).apply(this);
            }
        }
        outAMultiplicativeExpression(node);
    }

    public void inAMultiplicativeExpressionTail(AMultiplicativeExpressionTail node)
    {
        defaultIn(node);
    }

    public void outAMultiplicativeExpressionTail(AMultiplicativeExpressionTail node)
    {
        defaultOut(node);
    }

    public void caseAMultiplicativeExpressionTail(AMultiplicativeExpressionTail node)
    {
        inAMultiplicativeExpressionTail(node);
        if(node.getMultiplyOperator() != null)
        {
            node.getMultiplyOperator().apply(this);
        }
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAMultiplicativeExpressionTail(node);
    }

    public void inAUnaryExpression(AUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAUnaryExpression(AUnaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAUnaryExpression(AUnaryExpression node)
    {
        inAUnaryExpression(node);
        if(node.getUnaryOperator() != null)
        {
            node.getUnaryOperator().apply(this);
        }
        if(node.getPropertyCallExpression() != null)
        {
            node.getPropertyCallExpression().apply(this);
        }
        outAUnaryExpression(node);
    }

    public void inAPropertyCallExpression(APropertyCallExpression node)
    {
        defaultIn(node);
    }

    public void outAPropertyCallExpression(APropertyCallExpression node)
    {
        defaultOut(node);
    }

    public void caseAPropertyCallExpression(APropertyCallExpression node)
    {
        inAPropertyCallExpression(node);
        if(node.getPrimaryExpression() != null)
        {
            node.getPrimaryExpression().apply(this);
        }
        {
            Object temp[] = node.getPropertyCallExpressionTail().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PPropertyCallExpressionTail) temp[i]).apply(this);
            }
        }
        outAPropertyCallExpression(node);
    }

    public void inADotPropertyCallExpressionTail(ADotPropertyCallExpressionTail node)
    {
        defaultIn(node);
    }

    public void outADotPropertyCallExpressionTail(ADotPropertyCallExpressionTail node)
    {
        defaultOut(node);
    }

    public void caseADotPropertyCallExpressionTail(ADotPropertyCallExpressionTail node)
    {
        inADotPropertyCallExpressionTail(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getFeatureCall() != null)
        {
            node.getFeatureCall().apply(this);
        }
        outADotPropertyCallExpressionTail(node);
    }

    public void inAArrowPropertyCallExpressionTail(AArrowPropertyCallExpressionTail node)
    {
        defaultIn(node);
    }

    public void outAArrowPropertyCallExpressionTail(AArrowPropertyCallExpressionTail node)
    {
        defaultOut(node);
    }

    public void caseAArrowPropertyCallExpressionTail(AArrowPropertyCallExpressionTail node)
    {
        inAArrowPropertyCallExpressionTail(node);
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        if(node.getFeatureCall() != null)
        {
            node.getFeatureCall().apply(this);
        }
        outAArrowPropertyCallExpressionTail(node);
    }

    public void inALiteralPrimaryExpression(ALiteralPrimaryExpression node)
    {
        defaultIn(node);
    }

    public void outALiteralPrimaryExpression(ALiteralPrimaryExpression node)
    {
        defaultOut(node);
    }

    public void caseALiteralPrimaryExpression(ALiteralPrimaryExpression node)
    {
        inALiteralPrimaryExpression(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralPrimaryExpression(node);
    }

    public void inAFeaturePrimaryExpression(AFeaturePrimaryExpression node)
    {
        defaultIn(node);
    }

    public void outAFeaturePrimaryExpression(AFeaturePrimaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAFeaturePrimaryExpression(AFeaturePrimaryExpression node)
    {
        inAFeaturePrimaryExpression(node);
        if(node.getPathName() != null)
        {
            node.getPathName().apply(this);
        }
        if(node.getIsMarkedPre() != null)
        {
            node.getIsMarkedPre().apply(this);
        }
        if(node.getQualifiers() != null)
        {
            node.getQualifiers().apply(this);
        }
        if(node.getFeatureCallParameters() != null)
        {
            node.getFeatureCallParameters().apply(this);
        }
        outAFeaturePrimaryExpression(node);
    }

    public void inAParenthesesPrimaryExpression(AParenthesesPrimaryExpression node)
    {
        defaultIn(node);
    }

    public void outAParenthesesPrimaryExpression(AParenthesesPrimaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAParenthesesPrimaryExpression(AParenthesesPrimaryExpression node)
    {
        inAParenthesesPrimaryExpression(node);
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outAParenthesesPrimaryExpression(node);
    }

    public void inAIfPrimaryExpression(AIfPrimaryExpression node)
    {
        defaultIn(node);
    }

    public void outAIfPrimaryExpression(AIfPrimaryExpression node)
    {
        defaultOut(node);
    }

    public void caseAIfPrimaryExpression(AIfPrimaryExpression node)
    {
        inAIfPrimaryExpression(node);
        if(node.getIfExpression() != null)
        {
            node.getIfExpression().apply(this);
        }
        outAIfPrimaryExpression(node);
    }

    public void inAConcreteFeatureCallParameters(AConcreteFeatureCallParameters node)
    {
        defaultIn(node);
    }

    public void outAConcreteFeatureCallParameters(AConcreteFeatureCallParameters node)
    {
        defaultOut(node);
    }

    public void caseAConcreteFeatureCallParameters(AConcreteFeatureCallParameters node)
    {
        inAConcreteFeatureCallParameters(node);
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getFeatureCallParameterOption().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PFeatureCallParameterOption) temp[i]).apply(this);
            }
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outAConcreteFeatureCallParameters(node);
    }

    public void inAFeatureCallParameters(AFeatureCallParameters node)
    {
        defaultIn(node);
    }

    public void outAFeatureCallParameters(AFeatureCallParameters node)
    {
        defaultOut(node);
    }

    public void caseAFeatureCallParameters(AFeatureCallParameters node)
    {
        inAFeatureCallParameters(node);
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        if(node.getActualParameterList() != null)
        {
            node.getActualParameterList().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outAFeatureCallParameters(node);
    }

    public void inAStandardDeclarator(AStandardDeclarator node)
    {
        defaultIn(node);
    }

    public void outAStandardDeclarator(AStandardDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAStandardDeclarator(AStandardDeclarator node)
    {
        inAStandardDeclarator(node);
        if(node.getVariableDeclarationList() != null)
        {
            node.getVariableDeclarationList().apply(this);
        }
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        outAStandardDeclarator(node);
    }

    public void inAIterateDeclarator(AIterateDeclarator node)
    {
        defaultIn(node);
    }

    public void outAIterateDeclarator(AIterateDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAIterateDeclarator(AIterateDeclarator node)
    {
        inAIterateDeclarator(node);
        if(node.getIterator() != null)
        {
            node.getIterator().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getAccumulator() != null)
        {
            node.getAccumulator().apply(this);
        }
        if(node.getEqualExpression() != null)
        {
            node.getEqualExpression().apply(this);
        }
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        outAIterateDeclarator(node);
    }

    public void inADeclaratorTail(ADeclaratorTail node)
    {
        defaultIn(node);
    }

    public void outADeclaratorTail(ADeclaratorTail node)
    {
        defaultOut(node);
    }

    public void caseADeclaratorTail(ADeclaratorTail node)
    {
        inADeclaratorTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outADeclaratorTail(node);
    }

    public void inACommaExpression(ACommaExpression node)
    {
        defaultIn(node);
    }

    public void outACommaExpression(ACommaExpression node)
    {
        defaultOut(node);
    }

    public void caseACommaExpression(ACommaExpression node)
    {
        inACommaExpression(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outACommaExpression(node);
    }

    public void inACommaFeatureCallParameterOption(ACommaFeatureCallParameterOption node)
    {
        defaultIn(node);
    }

    public void outACommaFeatureCallParameterOption(ACommaFeatureCallParameterOption node)
    {
        defaultOut(node);
    }

    public void caseACommaFeatureCallParameterOption(ACommaFeatureCallParameterOption node)
    {
        inACommaFeatureCallParameterOption(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outACommaFeatureCallParameterOption(node);
    }

    public void inAColonFeatureCallParameterOption(AColonFeatureCallParameterOption node)
    {
        defaultIn(node);
    }

    public void outAColonFeatureCallParameterOption(AColonFeatureCallParameterOption node)
    {
        defaultOut(node);
    }

    public void caseAColonFeatureCallParameterOption(AColonFeatureCallParameterOption node)
    {
        inAColonFeatureCallParameterOption(node);
        if(node.getTypeDeclaration() != null)
        {
            node.getTypeDeclaration().apply(this);
        }
        outAColonFeatureCallParameterOption(node);
    }

    public void inAIterateFeatureCallParameterOption(AIterateFeatureCallParameterOption node)
    {
        defaultIn(node);
    }

    public void outAIterateFeatureCallParameterOption(AIterateFeatureCallParameterOption node)
    {
        defaultOut(node);
    }

    public void caseAIterateFeatureCallParameterOption(AIterateFeatureCallParameterOption node)
    {
        inAIterateFeatureCallParameterOption(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getTypeDeclaration() != null)
        {
            node.getTypeDeclaration().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAIterateFeatureCallParameterOption(node);
    }

    public void inABarFeatureCallParameterOption(ABarFeatureCallParameterOption node)
    {
        defaultIn(node);
    }

    public void outABarFeatureCallParameterOption(ABarFeatureCallParameterOption node)
    {
        defaultOut(node);
    }

    public void caseABarFeatureCallParameterOption(ABarFeatureCallParameterOption node)
    {
        inABarFeatureCallParameterOption(node);
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outABarFeatureCallParameterOption(node);
    }

    public void inALetExp(ALetExp node)
    {
        defaultIn(node);
    }

    public void outALetExp(ALetExp node)
    {
        defaultOut(node);
    }

    public void caseALetExp(ALetExp node)
    {
        inALetExp(node);
        if(node.getLet() != null)
        {
            node.getLet().apply(this);
        }
        if(node.getLetVariableDeclaration() != null)
        {
            node.getLetVariableDeclaration().apply(this);
        }
        if(node.getLetExpSub() != null)
        {
            node.getLetExpSub().apply(this);
        }
        outALetExp(node);
    }

    public void inAVariableDeclarationLetExpSub(AVariableDeclarationLetExpSub node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclarationLetExpSub(AVariableDeclarationLetExpSub node)
    {
        defaultOut(node);
    }

    public void caseAVariableDeclarationLetExpSub(AVariableDeclarationLetExpSub node)
    {
        inAVariableDeclarationLetExpSub(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getLetVariableDeclaration() != null)
        {
            node.getLetVariableDeclaration().apply(this);
        }
        if(node.getLetExpSub() != null)
        {
            node.getLetExpSub().apply(this);
        }
        outAVariableDeclarationLetExpSub(node);
    }

    public void inAInLetExpSub(AInLetExpSub node)
    {
        defaultIn(node);
    }

    public void outAInLetExpSub(AInLetExpSub node)
    {
        defaultOut(node);
    }

    public void caseAInLetExpSub(AInLetExpSub node)
    {
        inAInLetExpSub(node);
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getLogicalExp() != null)
        {
            node.getLogicalExp().apply(this);
        }
        outAInLetExpSub(node);
    }

    public void inALetVariableDeclaration(ALetVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outALetVariableDeclaration(ALetVariableDeclaration node)
    {
        defaultOut(node);
    }

    public void caseALetVariableDeclaration(ALetVariableDeclaration node)
    {
        inALetVariableDeclaration(node);
        if(node.getVariableDeclaration() != null)
        {
            node.getVariableDeclaration().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outALetVariableDeclaration(node);
    }

    public void inACollectionLiteral(ACollectionLiteral node)
    {
        defaultIn(node);
    }

    public void outACollectionLiteral(ACollectionLiteral node)
    {
        defaultOut(node);
    }

    public void caseACollectionLiteral(ACollectionLiteral node)
    {
        inACollectionLiteral(node);
        if(node.getCollectionLit() != null)
        {
            node.getCollectionLit().apply(this);
        }
        outACollectionLiteral(node);
    }

    public void inAPrimitiveLiteral(APrimitiveLiteral node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveLiteral(APrimitiveLiteral node)
    {
        defaultOut(node);
    }

    public void caseAPrimitiveLiteral(APrimitiveLiteral node)
    {
        inAPrimitiveLiteral(node);
        if(node.getPrimitiveLit() != null)
        {
            node.getPrimitiveLit().apply(this);
        }
        outAPrimitiveLiteral(node);
    }

    public void inATupleLiteral(ATupleLiteral node)
    {
        defaultIn(node);
    }

    public void outATupleLiteral(ATupleLiteral node)
    {
        defaultOut(node);
    }

    public void caseATupleLiteral(ATupleLiteral node)
    {
        inATupleLiteral(node);
        if(node.getTupleLit() != null)
        {
            node.getTupleLit().apply(this);
        }
        outATupleLiteral(node);
    }

    public void inAStringPrimitiveLit(AStringPrimitiveLit node)
    {
        defaultIn(node);
    }

    public void outAStringPrimitiveLit(AStringPrimitiveLit node)
    {
        defaultOut(node);
    }

    public void caseAStringPrimitiveLit(AStringPrimitiveLit node)
    {
        inAStringPrimitiveLit(node);
        if(node.getStringLit() != null)
        {
            node.getStringLit().apply(this);
        }
        outAStringPrimitiveLit(node);
    }

    public void inARealPrimitiveLit(ARealPrimitiveLit node)
    {
        defaultIn(node);
    }

    public void outARealPrimitiveLit(ARealPrimitiveLit node)
    {
        defaultOut(node);
    }

    public void caseARealPrimitiveLit(ARealPrimitiveLit node)
    {
        inARealPrimitiveLit(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealPrimitiveLit(node);
    }

    public void inAIntegerPrimitiveLit(AIntegerPrimitiveLit node)
    {
        defaultIn(node);
    }

    public void outAIntegerPrimitiveLit(AIntegerPrimitiveLit node)
    {
        defaultOut(node);
    }

    public void caseAIntegerPrimitiveLit(AIntegerPrimitiveLit node)
    {
        inAIntegerPrimitiveLit(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntegerPrimitiveLit(node);
    }

    public void inABooleanPrimitiveLit(ABooleanPrimitiveLit node)
    {
        defaultIn(node);
    }

    public void outABooleanPrimitiveLit(ABooleanPrimitiveLit node)
    {
        defaultOut(node);
    }

    public void caseABooleanPrimitiveLit(ABooleanPrimitiveLit node)
    {
        inABooleanPrimitiveLit(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanPrimitiveLit(node);
    }

    public void inATupleLit(ATupleLit node)
    {
        defaultIn(node);
    }

    public void outATupleLit(ATupleLit node)
    {
        defaultOut(node);
    }

    public void caseATupleLit(ATupleLit node)
    {
        inATupleLit(node);
        if(node.getTuple() != null)
        {
            node.getTuple().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getVariableDeclarationList() != null)
        {
            node.getVariableDeclarationList().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outATupleLit(node);
    }

    public void inACollectionLit(ACollectionLit node)
    {
        defaultIn(node);
    }

    public void outACollectionLit(ACollectionLit node)
    {
        defaultOut(node);
    }

    public void caseACollectionLit(ACollectionLit node)
    {
        inACollectionLit(node);
        if(node.getCollectionKind() != null)
        {
            node.getCollectionKind().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getExpressionListOrRange() != null)
        {
            node.getExpressionListOrRange().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outACollectionLit(node);
    }

    public void inAExpressionListOrRange(AExpressionListOrRange node)
    {
        defaultIn(node);
    }

    public void outAExpressionListOrRange(AExpressionListOrRange node)
    {
        defaultOut(node);
    }

    public void caseAExpressionListOrRange(AExpressionListOrRange node)
    {
        inAExpressionListOrRange(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getExpressionListOrRangeTail() != null)
        {
            node.getExpressionListOrRangeTail().apply(this);
        }
        outAExpressionListOrRange(node);
    }

    public void inAListExpressionListOrRangeTail(AListExpressionListOrRangeTail node)
    {
        defaultIn(node);
    }

    public void outAListExpressionListOrRangeTail(AListExpressionListOrRangeTail node)
    {
        defaultOut(node);
    }

    public void caseAListExpressionListOrRangeTail(AListExpressionListOrRangeTail node)
    {
        inAListExpressionListOrRangeTail(node);
        {
            Object temp[] = node.getCommaExpression().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaExpression) temp[i]).apply(this);
            }
        }
        outAListExpressionListOrRangeTail(node);
    }

    public void inARangeExpressionListOrRangeTail(ARangeExpressionListOrRangeTail node)
    {
        defaultIn(node);
    }

    public void outARangeExpressionListOrRangeTail(ARangeExpressionListOrRangeTail node)
    {
        defaultOut(node);
    }

    public void caseARangeExpressionListOrRangeTail(ARangeExpressionListOrRangeTail node)
    {
        inARangeExpressionListOrRangeTail(node);
        if(node.getRange() != null)
        {
            node.getRange().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outARangeExpressionListOrRangeTail(node);
    }

    public void inAFeatureCall(AFeatureCall node)
    {
        defaultIn(node);
    }

    public void outAFeatureCall(AFeatureCall node)
    {
        defaultOut(node);
    }

    public void caseAFeatureCall(AFeatureCall node)
    {
        inAFeatureCall(node);
        if(node.getPathName() != null)
        {
            node.getPathName().apply(this);
        }
        if(node.getIsMarkedPre() != null)
        {
            node.getIsMarkedPre().apply(this);
        }
        if(node.getQualifiers() != null)
        {
            node.getQualifiers().apply(this);
        }
        if(node.getFeatureCallParameters() != null)
        {
            node.getFeatureCallParameters().apply(this);
        }
        outAFeatureCall(node);
    }

    public void inAQualifiers(AQualifiers node)
    {
        defaultIn(node);
    }

    public void outAQualifiers(AQualifiers node)
    {
        defaultOut(node);
    }

    public void caseAQualifiers(AQualifiers node)
    {
        inAQualifiers(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getActualParameterList() != null)
        {
            node.getActualParameterList().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAQualifiers(node);
    }

    public void inASimpleType(ASimpleType node)
    {
        defaultIn(node);
    }

    public void outASimpleType(ASimpleType node)
    {
        defaultOut(node);
    }

    public void caseASimpleType(ASimpleType node)
    {
        inASimpleType(node);
        if(node.getPathName() != null)
        {
            node.getPathName().apply(this);
        }
        outASimpleType(node);
    }

    public void inACollectionType(ACollectionType node)
    {
        defaultIn(node);
    }

    public void outACollectionType(ACollectionType node)
    {
        defaultOut(node);
    }

    public void caseACollectionType(ACollectionType node)
    {
        inACollectionType(node);
        if(node.getCollectionType() != null)
        {
            node.getCollectionType().apply(this);
        }
        outACollectionType(node);
    }

    public void inATupletypeType(ATupletypeType node)
    {
        defaultIn(node);
    }

    public void outATupletypeType(ATupletypeType node)
    {
        defaultOut(node);
    }

    public void caseATupletypeType(ATupletypeType node)
    {
        inATupletypeType(node);
        if(node.getTupleType() != null)
        {
            node.getTupleType().apply(this);
        }
        outATupletypeType(node);
    }

    public void inASetCollectionType(ASetCollectionType node)
    {
        defaultIn(node);
    }

    public void outASetCollectionType(ASetCollectionType node)
    {
        defaultOut(node);
    }

    public void caseASetCollectionType(ASetCollectionType node)
    {
        inASetCollectionType(node);
        if(node.getSet() != null)
        {
            node.getSet().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outASetCollectionType(node);
    }

    public void inABagCollectionType(ABagCollectionType node)
    {
        defaultIn(node);
    }

    public void outABagCollectionType(ABagCollectionType node)
    {
        defaultOut(node);
    }

    public void caseABagCollectionType(ABagCollectionType node)
    {
        inABagCollectionType(node);
        if(node.getBag() != null)
        {
            node.getBag().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outABagCollectionType(node);
    }

    public void inASequenceCollectionType(ASequenceCollectionType node)
    {
        defaultIn(node);
    }

    public void outASequenceCollectionType(ASequenceCollectionType node)
    {
        defaultOut(node);
    }

    public void caseASequenceCollectionType(ASequenceCollectionType node)
    {
        inASequenceCollectionType(node);
        if(node.getSequence() != null)
        {
            node.getSequence().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outASequenceCollectionType(node);
    }

    public void inAOrderedsetCollectionType(AOrderedsetCollectionType node)
    {
        defaultIn(node);
    }

    public void outAOrderedsetCollectionType(AOrderedsetCollectionType node)
    {
        defaultOut(node);
    }

    public void caseAOrderedsetCollectionType(AOrderedsetCollectionType node)
    {
        inAOrderedsetCollectionType(node);
        if(node.getOrderedset() != null)
        {
            node.getOrderedset().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outAOrderedsetCollectionType(node);
    }

    public void inACollectionCollectionType(ACollectionCollectionType node)
    {
        defaultIn(node);
    }

    public void outACollectionCollectionType(ACollectionCollectionType node)
    {
        defaultOut(node);
    }

    public void caseACollectionCollectionType(ACollectionCollectionType node)
    {
        inACollectionCollectionType(node);
        if(node.getCollection() != null)
        {
            node.getCollection().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outACollectionCollectionType(node);
    }

    public void inATupleType(ATupleType node)
    {
        defaultIn(node);
    }

    public void outATupleType(ATupleType node)
    {
        defaultOut(node);
    }

    public void caseATupleType(ATupleType node)
    {
        inATupleType(node);
        if(node.getTupletype() != null)
        {
            node.getTupletype().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getVariableDeclarationList() != null)
        {
            node.getVariableDeclarationList().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outATupleType(node);
    }

    public void inAMessageMessageExp(AMessageMessageExp node)
    {
        defaultIn(node);
    }

    public void outAMessageMessageExp(AMessageMessageExp node)
    {
        defaultOut(node);
    }

    public void caseAMessageMessageExp(AMessageMessageExp node)
    {
        inAMessageMessageExp(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getMessageOperator() != null)
        {
            node.getMessageOperator().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getMessageArguments() != null)
        {
            node.getMessageArguments().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outAMessageMessageExp(node);
    }

    public void inAIsSentMessageExp(AIsSentMessageExp node)
    {
        defaultIn(node);
    }

    public void outAIsSentMessageExp(AIsSentMessageExp node)
    {
        defaultOut(node);
    }

    public void caseAIsSentMessageExp(AIsSentMessageExp node)
    {
        inAIsSentMessageExp(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getIsSentOperator() != null)
        {
            node.getIsSentOperator().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getMessageArguments() != null)
        {
            node.getMessageArguments().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outAIsSentMessageExp(node);
    }

    public void inAMessageArguments(AMessageArguments node)
    {
        defaultIn(node);
    }

    public void outAMessageArguments(AMessageArguments node)
    {
        defaultOut(node);
    }

    public void caseAMessageArguments(AMessageArguments node)
    {
        inAMessageArguments(node);
        if(node.getMessageArgument() != null)
        {
            node.getMessageArgument().apply(this);
        }
        {
            Object temp[] = node.getMessageArgumentsTail().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PMessageArgumentsTail) temp[i]).apply(this);
            }
        }
        outAMessageArguments(node);
    }

    public void inAMessageArgumentsTail(AMessageArgumentsTail node)
    {
        defaultIn(node);
    }

    public void outAMessageArgumentsTail(AMessageArgumentsTail node)
    {
        defaultOut(node);
    }

    public void caseAMessageArgumentsTail(AMessageArgumentsTail node)
    {
        inAMessageArgumentsTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getMessageArgument() != null)
        {
            node.getMessageArgument().apply(this);
        }
        outAMessageArgumentsTail(node);
    }

    public void inATypeMessageArgument(ATypeMessageArgument node)
    {
        defaultIn(node);
    }

    public void outATypeMessageArgument(ATypeMessageArgument node)
    {
        defaultOut(node);
    }

    public void caseATypeMessageArgument(ATypeMessageArgument node)
    {
        inATypeMessageArgument(node);
        if(node.getUnknown() != null)
        {
            node.getUnknown().apply(this);
        }
        if(node.getTypeDeclaration() != null)
        {
            node.getTypeDeclaration().apply(this);
        }
        outATypeMessageArgument(node);
    }

    public void inAExpMessageArgument(AExpMessageArgument node)
    {
        defaultIn(node);
    }

    public void outAExpMessageArgument(AExpMessageArgument node)
    {
        defaultOut(node);
    }

    public void caseAExpMessageArgument(AExpMessageArgument node)
    {
        inAExpMessageArgument(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpMessageArgument(node);
    }

    public void inAPathName(APathName node)
    {
        defaultIn(node);
    }

    public void outAPathName(APathName node)
    {
        defaultOut(node);
    }

    public void caseAPathName(APathName node)
    {
        inAPathName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            Object temp[] = node.getPathNameTail().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PPathNameTail) temp[i]).apply(this);
            }
        }
        outAPathName(node);
    }

    public void inAPathNameTail(APathNameTail node)
    {
        defaultIn(node);
    }

    public void outAPathNameTail(APathNameTail node)
    {
        defaultOut(node);
    }

    public void caseAPathNameTail(APathNameTail node)
    {
        inAPathNameTail(node);
        if(node.getScopeOperator() != null)
        {
            node.getScopeOperator().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAPathNameTail(node);
    }

    public void inAIsMarkedPre(AIsMarkedPre node)
    {
        defaultIn(node);
    }

    public void outAIsMarkedPre(AIsMarkedPre node)
    {
        defaultOut(node);
    }

    public void caseAIsMarkedPre(AIsMarkedPre node)
    {
        inAIsMarkedPre(node);
        if(node.getCommercialAt() != null)
        {
            node.getCommercialAt().apply(this);
        }
        if(node.getPre() != null)
        {
            node.getPre().apply(this);
        }
        outAIsMarkedPre(node);
    }

    public void inAActualParameterList(AActualParameterList node)
    {
        defaultIn(node);
    }

    public void outAActualParameterList(AActualParameterList node)
    {
        defaultOut(node);
    }

    public void caseAActualParameterList(AActualParameterList node)
    {
        inAActualParameterList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getCommaExpression().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaExpression) temp[i]).apply(this);
            }
        }
        outAActualParameterList(node);
    }

    public void inAAndLogicalOperator(AAndLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outAAndLogicalOperator(AAndLogicalOperator node)
    {
        defaultOut(node);
    }

    public void caseAAndLogicalOperator(AAndLogicalOperator node)
    {
        inAAndLogicalOperator(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndLogicalOperator(node);
    }

    public void inAOrLogicalOperator(AOrLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outAOrLogicalOperator(AOrLogicalOperator node)
    {
        defaultOut(node);
    }

    public void caseAOrLogicalOperator(AOrLogicalOperator node)
    {
        inAOrLogicalOperator(node);
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOrLogicalOperator(node);
    }

    public void inAXorLogicalOperator(AXorLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outAXorLogicalOperator(AXorLogicalOperator node)
    {
        defaultOut(node);
    }

    public void caseAXorLogicalOperator(AXorLogicalOperator node)
    {
        inAXorLogicalOperator(node);
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        outAXorLogicalOperator(node);
    }

    public void inAImpliesLogicalOperator(AImpliesLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outAImpliesLogicalOperator(AImpliesLogicalOperator node)
    {
        defaultOut(node);
    }

    public void caseAImpliesLogicalOperator(AImpliesLogicalOperator node)
    {
        inAImpliesLogicalOperator(node);
        if(node.getImplies() != null)
        {
            node.getImplies().apply(this);
        }
        outAImpliesLogicalOperator(node);
    }

    public void inASetCollectionKind(ASetCollectionKind node)
    {
        defaultIn(node);
    }

    public void outASetCollectionKind(ASetCollectionKind node)
    {
        defaultOut(node);
    }

    public void caseASetCollectionKind(ASetCollectionKind node)
    {
        inASetCollectionKind(node);
        if(node.getSet() != null)
        {
            node.getSet().apply(this);
        }
        outASetCollectionKind(node);
    }

    public void inABagCollectionKind(ABagCollectionKind node)
    {
        defaultIn(node);
    }

    public void outABagCollectionKind(ABagCollectionKind node)
    {
        defaultOut(node);
    }

    public void caseABagCollectionKind(ABagCollectionKind node)
    {
        inABagCollectionKind(node);
        if(node.getBag() != null)
        {
            node.getBag().apply(this);
        }
        outABagCollectionKind(node);
    }

    public void inASequenceCollectionKind(ASequenceCollectionKind node)
    {
        defaultIn(node);
    }

    public void outASequenceCollectionKind(ASequenceCollectionKind node)
    {
        defaultOut(node);
    }

    public void caseASequenceCollectionKind(ASequenceCollectionKind node)
    {
        inASequenceCollectionKind(node);
        if(node.getSequence() != null)
        {
            node.getSequence().apply(this);
        }
        outASequenceCollectionKind(node);
    }

    public void inACollectionCollectionKind(ACollectionCollectionKind node)
    {
        defaultIn(node);
    }

    public void outACollectionCollectionKind(ACollectionCollectionKind node)
    {
        defaultOut(node);
    }

    public void caseACollectionCollectionKind(ACollectionCollectionKind node)
    {
        inACollectionCollectionKind(node);
        if(node.getCollection() != null)
        {
            node.getCollection().apply(this);
        }
        outACollectionCollectionKind(node);
    }

    public void inAEqualRelationalOperator(AEqualRelationalOperator node)
    {
        defaultIn(node);
    }

    public void outAEqualRelationalOperator(AEqualRelationalOperator node)
    {
        defaultOut(node);
    }

    public void caseAEqualRelationalOperator(AEqualRelationalOperator node)
    {
        inAEqualRelationalOperator(node);
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        outAEqualRelationalOperator(node);
    }

    public void inANotEqualRelationalOperator(ANotEqualRelationalOperator node)
    {
        defaultIn(node);
    }

    public void outANotEqualRelationalOperator(ANotEqualRelationalOperator node)
    {
        defaultOut(node);
    }

    public void caseANotEqualRelationalOperator(ANotEqualRelationalOperator node)
    {
        inANotEqualRelationalOperator(node);
        if(node.getNotEqual() != null)
        {
            node.getNotEqual().apply(this);
        }
        outANotEqualRelationalOperator(node);
    }

    public void inAGtRelationalOperator(AGtRelationalOperator node)
    {
        defaultIn(node);
    }

    public void outAGtRelationalOperator(AGtRelationalOperator node)
    {
        defaultOut(node);
    }

    public void caseAGtRelationalOperator(AGtRelationalOperator node)
    {
        inAGtRelationalOperator(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtRelationalOperator(node);
    }

    public void inALtRelationalOperator(ALtRelationalOperator node)
    {
        defaultIn(node);
    }

    public void outALtRelationalOperator(ALtRelationalOperator node)
    {
        defaultOut(node);
    }

    public void caseALtRelationalOperator(ALtRelationalOperator node)
    {
        inALtRelationalOperator(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALtRelationalOperator(node);
    }

    public void inAGteqRelationalOperator(AGteqRelationalOperator node)
    {
        defaultIn(node);
    }

    public void outAGteqRelationalOperator(AGteqRelationalOperator node)
    {
        defaultOut(node);
    }

    public void caseAGteqRelationalOperator(AGteqRelationalOperator node)
    {
        inAGteqRelationalOperator(node);
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        outAGteqRelationalOperator(node);
    }

    public void inALteqRelationalOperator(ALteqRelationalOperator node)
    {
        defaultIn(node);
    }

    public void outALteqRelationalOperator(ALteqRelationalOperator node)
    {
        defaultOut(node);
    }

    public void caseALteqRelationalOperator(ALteqRelationalOperator node)
    {
        inALteqRelationalOperator(node);
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        outALteqRelationalOperator(node);
    }

    public void inAPlusAddOperator(APlusAddOperator node)
    {
        defaultIn(node);
    }

    public void outAPlusAddOperator(APlusAddOperator node)
    {
        defaultOut(node);
    }

    public void caseAPlusAddOperator(APlusAddOperator node)
    {
        inAPlusAddOperator(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusAddOperator(node);
    }

    public void inAMinusAddOperator(AMinusAddOperator node)
    {
        defaultIn(node);
    }

    public void outAMinusAddOperator(AMinusAddOperator node)
    {
        defaultOut(node);
    }

    public void caseAMinusAddOperator(AMinusAddOperator node)
    {
        inAMinusAddOperator(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusAddOperator(node);
    }

    public void inAMultMultiplyOperator(AMultMultiplyOperator node)
    {
        defaultIn(node);
    }

    public void outAMultMultiplyOperator(AMultMultiplyOperator node)
    {
        defaultOut(node);
    }

    public void caseAMultMultiplyOperator(AMultMultiplyOperator node)
    {
        inAMultMultiplyOperator(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMultMultiplyOperator(node);
    }

    public void inADivMultiplyOperator(ADivMultiplyOperator node)
    {
        defaultIn(node);
    }

    public void outADivMultiplyOperator(ADivMultiplyOperator node)
    {
        defaultOut(node);
    }

    public void caseADivMultiplyOperator(ADivMultiplyOperator node)
    {
        inADivMultiplyOperator(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivMultiplyOperator(node);
    }

    public void inAMinusUnaryOperator(AMinusUnaryOperator node)
    {
        defaultIn(node);
    }

    public void outAMinusUnaryOperator(AMinusUnaryOperator node)
    {
        defaultOut(node);
    }

    public void caseAMinusUnaryOperator(AMinusUnaryOperator node)
    {
        inAMinusUnaryOperator(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusUnaryOperator(node);
    }

    public void inANotUnaryOperator(ANotUnaryOperator node)
    {
        defaultIn(node);
    }

    public void outANotUnaryOperator(ANotUnaryOperator node)
    {
        defaultOut(node);
    }

    public void caseANotUnaryOperator(ANotUnaryOperator node)
    {
        inANotUnaryOperator(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANotUnaryOperator(node);
    }
}
