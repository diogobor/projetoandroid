/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.andromda.translation.ocl.node;

import java.util.*;
import org.andromda.translation.ocl.analysis.*;

public final class AFeatureCallParameters extends PFeatureCallParameters
{
    private TLParen _lParen_;
    private PDeclarator _declarator_;
    private PActualParameterList _actualParameterList_;
    private TRParen _rParen_;

    public AFeatureCallParameters()
    {
    }

    public AFeatureCallParameters(
        TLParen _lParen_,
        PDeclarator _declarator_,
        PActualParameterList _actualParameterList_,
        TRParen _rParen_)
    {
        setLParen(_lParen_);

        setDeclarator(_declarator_);

        setActualParameterList(_actualParameterList_);

        setRParen(_rParen_);

    }
    public Object clone()
    {
        return new AFeatureCallParameters(
            (TLParen) cloneNode(_lParen_),
            (PDeclarator) cloneNode(_declarator_),
            (PActualParameterList) cloneNode(_actualParameterList_),
            (TRParen) cloneNode(_rParen_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFeatureCallParameters(this);
    }

    public TLParen getLParen()
    {
        return _lParen_;
    }

    public void setLParen(TLParen node)
    {
        if(_lParen_ != null)
        {
            _lParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lParen_ = node;
    }

    public PDeclarator getDeclarator()
    {
        return _declarator_;
    }

    public void setDeclarator(PDeclarator node)
    {
        if(_declarator_ != null)
        {
            _declarator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _declarator_ = node;
    }

    public PActualParameterList getActualParameterList()
    {
        return _actualParameterList_;
    }

    public void setActualParameterList(PActualParameterList node)
    {
        if(_actualParameterList_ != null)
        {
            _actualParameterList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _actualParameterList_ = node;
    }

    public TRParen getRParen()
    {
        return _rParen_;
    }

    public void setRParen(TRParen node)
    {
        if(_rParen_ != null)
        {
            _rParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rParen_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lParen_)
            + toString(_declarator_)
            + toString(_actualParameterList_)
            + toString(_rParen_);
    }

    void removeChild(Node child)
    {
        if(_lParen_ == child)
        {
            _lParen_ = null;
            return;
        }

        if(_declarator_ == child)
        {
            _declarator_ = null;
            return;
        }

        if(_actualParameterList_ == child)
        {
            _actualParameterList_ = null;
            return;
        }

        if(_rParen_ == child)
        {
            _rParen_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lParen_ == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(_declarator_ == oldChild)
        {
            setDeclarator((PDeclarator) newChild);
            return;
        }

        if(_actualParameterList_ == oldChild)
        {
            setActualParameterList((PActualParameterList) newChild);
            return;
        }

        if(_rParen_ == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

    }
}
