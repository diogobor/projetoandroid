/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.andromda.translation.ocl.lexer;

import java.io.*;
import java.util.*;
import org.andromda.translation.ocl.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            Token token = new57(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            Token token = new58(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            Token token = new59(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            Token token = new60(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            Token token = new61(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 62:
                        {
                            Token token = new62(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 63:
                        {
                            Token token = new63(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 64:
                        {
                            Token token = new64(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 65:
                        {
                            Token token = new65(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 66:
                        {
                            Token token = new66(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 67:
                        {
                            Token token = new67(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 68:
                        {
                            Token token = new68(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 69:
                        {
                            Token token = new69(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TSingleLineComment(text, line, pos); }
    Token new1(String text, int line, int pos) { return new TMultiLineComment(text, line, pos); }
    Token new2(int line, int pos) { return new TDot(line, pos); }
    Token new3(int line, int pos) { return new TArrow(line, pos); }
    Token new4(int line, int pos) { return new TIsSentOperator(line, pos); }
    Token new5(int line, int pos) { return new TMessageOperator(line, pos); }
    Token new6(int line, int pos) { return new TNot(line, pos); }
    Token new7(int line, int pos) { return new TMult(line, pos); }
    Token new8(int line, int pos) { return new TDiv(line, pos); }
    Token new9(int line, int pos) { return new TPlus(line, pos); }
    Token new10(int line, int pos) { return new TMinus(line, pos); }
    Token new11(int line, int pos) { return new TPackage(line, pos); }
    Token new12(int line, int pos) { return new TEndpackage(line, pos); }
    Token new13(int line, int pos) { return new TInit(line, pos); }
    Token new14(int line, int pos) { return new TDerive(line, pos); }
    Token new15(int line, int pos) { return new TDef(line, pos); }
    Token new16(int line, int pos) { return new TAttr(line, pos); }
    Token new17(int line, int pos) { return new TOper(line, pos); }
    Token new18(int line, int pos) { return new TContext(line, pos); }
    Token new19(int line, int pos) { return new TEnum(line, pos); }
    Token new20(int line, int pos) { return new TPre(line, pos); }
    Token new21(int line, int pos) { return new TPost(line, pos); }
    Token new22(int line, int pos) { return new TInv(line, pos); }
    Token new23(int line, int pos) { return new TBody(line, pos); }
    Token new24(int line, int pos) { return new TEqual(line, pos); }
    Token new25(int line, int pos) { return new TNotEqual(line, pos); }
    Token new26(int line, int pos) { return new TLt(line, pos); }
    Token new27(int line, int pos) { return new TGt(line, pos); }
    Token new28(int line, int pos) { return new TLteq(line, pos); }
    Token new29(int line, int pos) { return new TGteq(line, pos); }
    Token new30(int line, int pos) { return new TAnd(line, pos); }
    Token new31(int line, int pos) { return new TOr(line, pos); }
    Token new32(int line, int pos) { return new TXor(line, pos); }
    Token new33(int line, int pos) { return new TImplies(line, pos); }
    Token new34(int line, int pos) { return new TLParen(line, pos); }
    Token new35(int line, int pos) { return new TRParen(line, pos); }
    Token new36(int line, int pos) { return new TLBracket(line, pos); }
    Token new37(int line, int pos) { return new TRBracket(line, pos); }
    Token new38(int line, int pos) { return new TLBrace(line, pos); }
    Token new39(int line, int pos) { return new TRBrace(line, pos); }
    Token new40(int line, int pos) { return new TSemicolon(line, pos); }
    Token new41(int line, int pos) { return new TScopeOperator(line, pos); }
    Token new42(int line, int pos) { return new TColon(line, pos); }
    Token new43(int line, int pos) { return new TComma(line, pos); }
    Token new44(int line, int pos) { return new TCommercialAt(line, pos); }
    Token new45(int line, int pos) { return new TBar(line, pos); }
    Token new46(int line, int pos) { return new TRange(line, pos); }
    Token new47(int line, int pos) { return new TApostrophe(line, pos); }
    Token new48(int line, int pos) { return new TUnknown(line, pos); }
    Token new49(int line, int pos) { return new TLet(line, pos); }
    Token new50(int line, int pos) { return new TIn(line, pos); }
    Token new51(int line, int pos) { return new TIf(line, pos); }
    Token new52(int line, int pos) { return new TThen(line, pos); }
    Token new53(int line, int pos) { return new TElse(line, pos); }
    Token new54(int line, int pos) { return new TEndif(line, pos); }
    Token new55(String text, int line, int pos) { return new TSet(text, line, pos); }
    Token new56(String text, int line, int pos) { return new TBag(text, line, pos); }
    Token new57(String text, int line, int pos) { return new TSequence(text, line, pos); }
    Token new58(String text, int line, int pos) { return new TCollection(text, line, pos); }
    Token new59(String text, int line, int pos) { return new TOrderedset(text, line, pos); }
    Token new60(String text, int line, int pos) { return new TTuple(text, line, pos); }
    Token new61(String text, int line, int pos) { return new TTupletype(text, line, pos); }
    Token new62(String text, int line, int pos) { return new TBoolean(text, line, pos); }
    Token new63(String text, int line, int pos) { return new TName(text, line, pos); }
    Token new64(String text, int line, int pos) { return new TNewLine(text, line, pos); }
    Token new65(String text, int line, int pos) { return new TInt(text, line, pos); }
    Token new66(String text, int line, int pos) { return new TReal(text, line, pos); }
    Token new67(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new68(String text, int line, int pos) { return new TTab(text, line, pos); }
    Token new69(String text, int line, int pos) { return new TStringLit(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {39, 39, 5}, {40, 40, 6}, {41, 41, 7}, {42, 42, 8}, {43, 43, 9}, {44, 44, 10}, {45, 45, 11}, {46, 46, 12}, {47, 47, 13}, {48, 57, 14}, {58, 58, 15}, {59, 59, 16}, {60, 60, 17}, {61, 61, 18}, {62, 62, 19}, {63, 63, 20}, {64, 64, 21}, {65, 65, 22}, {66, 66, 23}, {67, 67, 24}, {68, 78, 22}, {79, 79, 25}, {80, 82, 22}, {83, 83, 26}, {84, 84, 27}, {85, 90, 22}, {91, 91, 28}, {93, 93, 29}, {94, 94, 30}, {97, 97, 31}, {98, 98, 32}, {99, 99, 33}, {100, 100, 34}, {101, 101, 35}, {102, 102, 36}, {103, 104, 22}, {105, 105, 37}, {106, 107, 22}, {108, 108, 38}, {109, 109, 22}, {110, 110, 39}, {111, 111, 40}, {112, 112, 41}, {113, 115, 22}, {116, 116, 42}, {117, 119, 22}, {120, 120, 43}, {121, 122, 22}, {123, 123, 44}, {124, 124, 45}, {125, 125, 46}, },
            {},
            {},
            {{10, 10, 47}, },
            {{32, 32, 4}, },
            {{0, 9, 48}, {11, 12, 48}, {14, 38, 48}, {39, 39, 49}, {40, 91, 48}, {92, 92, 50}, {93, 127, 48}, },
            {},
            {},
            {},
            {},
            {},
            {{45, 45, 51}, {62, 62, 52}, },
            {{46, 46, 53}, },
            {{42, 42, 54}, },
            {{46, 46, 55}, {48, 57, 14}, },
            {{58, 58, 56}, },
            {},
            {{61, 61, 57}, {62, 62, 58}, },
            {},
            {{61, 61, 59}, },
            {},
            {},
            {{48, 57, 60}, {65, 90, 60}, {95, 95, 60}, {97, 122, 60}, },
            {{48, 95, -24}, {97, 97, 61}, {98, 122, 60}, },
            {{48, 95, -24}, {97, 110, 60}, {111, 111, 62}, {112, 122, 60}, },
            {{48, 95, -24}, {97, 113, 60}, {114, 114, 63}, {115, 122, 60}, },
            {{48, 95, -24}, {97, 100, 60}, {101, 101, 64}, {102, 122, 60}, },
            {{48, 95, -24}, {97, 116, 60}, {117, 117, 65}, {118, 122, 60}, },
            {},
            {},
            {{94, 94, 66}, },
            {{48, 95, -24}, {97, 109, 60}, {110, 110, 67}, {111, 115, 60}, {116, 116, 68}, {117, 122, 60}, },
            {{48, 110, -26}, {111, 111, 69}, {112, 122, 60}, },
            {{48, 110, -26}, {111, 111, 70}, {112, 122, 60}, },
            {{48, 100, -28}, {101, 101, 71}, {102, 122, 60}, },
            {{48, 95, -24}, {97, 107, 60}, {108, 108, 72}, {109, 109, 60}, {110, 110, 73}, {111, 122, 60}, },
            {{48, 95, -24}, {97, 97, 74}, {98, 122, 60}, },
            {{48, 95, -24}, {97, 101, 60}, {102, 102, 75}, {103, 108, 60}, {109, 109, 76}, {110, 110, 77}, {111, 122, 60}, },
            {{48, 100, -28}, {101, 101, 78}, {102, 122, 60}, },
            {{48, 110, -26}, {111, 111, 79}, {112, 122, 60}, },
            {{48, 95, -24}, {97, 111, 60}, {112, 112, 80}, {113, 113, 60}, {114, 114, 81}, {115, 122, 60}, },
            {{48, 95, -24}, {97, 97, 82}, {98, 110, 60}, {111, 111, 83}, {112, 113, 60}, {114, 114, 84}, {115, 122, 60}, },
            {{48, 95, -24}, {97, 103, 60}, {104, 104, 85}, {105, 113, 60}, {114, 114, 86}, {115, 122, 60}, },
            {{48, 110, -26}, {111, 111, 87}, {112, 122, 60}, },
            {},
            {},
            {},
            {},
            {{0, 127, -7}, },
            {},
            {{34, 34, 88}, {39, 39, 89}, {48, 55, 90}, {63, 63, 91}, {92, 92, 92}, {97, 97, 93}, {98, 98, 94}, {102, 102, 95}, {110, 110, 96}, {114, 114, 97}, {116, 116, 98}, {118, 118, 99}, {120, 120, 100}, },
            {{0, 9, 101}, {10, 10, 102}, {11, 12, 101}, {13, 13, 102}, {14, 127, 101}, },
            {},
            {},
            {{0, 9, 103}, {10, 10, 104}, {11, 12, 103}, {13, 13, 105}, {14, 41, 103}, {43, 127, 103}, },
            {{48, 57, 106}, },
            {},
            {},
            {},
            {},
            {{48, 122, -24}, },
            {{48, 95, -24}, {97, 102, 60}, {103, 103, 107}, {104, 122, 60}, },
            {{48, 107, -37}, {108, 108, 108}, {109, 122, 60}, },
            {{48, 95, -24}, {97, 99, 60}, {100, 100, 109}, {101, 122, 60}, },
            {{48, 95, -24}, {97, 112, 60}, {113, 113, 110}, {114, 115, 60}, {116, 116, 111}, {117, 122, 60}, },
            {{48, 111, -42}, {112, 112, 112}, {113, 122, 60}, },
            {},
            {{48, 99, -65}, {100, 100, 113}, {101, 122, 60}, },
            {{48, 95, -24}, {97, 115, 60}, {116, 116, 114}, {117, 122, 60}, },
            {{48, 99, -65}, {100, 100, 115}, {101, 122, 60}, },
            {{48, 109, -33}, {110, 110, 116}, {111, 122, 60}, },
            {{48, 101, -39}, {102, 102, 117}, {103, 113, 60}, {114, 114, 118}, {115, 122, 60}, },
            {{48, 95, -24}, {97, 114, 60}, {115, 115, 119}, {116, 122, 60}, },
            {{48, 99, -65}, {100, 100, 120}, {101, 116, 60}, {117, 117, 121}, {118, 122, 60}, },
            {{48, 107, -37}, {108, 108, 122}, {109, 122, 60}, },
            {{48, 122, -24}, },
            {{48, 111, -42}, {112, 112, 123}, {113, 122, 60}, },
            {{48, 95, -24}, {97, 104, 60}, {105, 105, 124}, {106, 117, 60}, {118, 118, 125}, {119, 122, 60}, },
            {{48, 115, -70}, {116, 116, 126}, {117, 122, 60}, },
            {{48, 115, -70}, {116, 116, 127}, {117, 122, 60}, },
            {{48, 100, -28}, {101, 101, 128}, {102, 122, 60}, },
            {{48, 122, -24}, },
            {{48, 95, -24}, {97, 98, 60}, {99, 99, 129}, {100, 122, 60}, },
            {{48, 114, -74}, {115, 115, 130}, {116, 122, 60}, },
            {{48, 100, -28}, {101, 101, 131}, {102, 122, 60}, },
            {{48, 100, -28}, {101, 101, 132}, {102, 122, 60}, },
            {{48, 116, -29}, {117, 117, 133}, {118, 122, 60}, },
            {{48, 113, -27}, {114, 114, 134}, {115, 122, 60}, },
            {{0, 127, -7}, },
            {{0, 127, -7}, },
            {{0, 39, -7}, {40, 47, 48}, {48, 55, 135}, {56, 91, 48}, {92, 127, -7}, },
            {{0, 127, -7}, },
            {{0, 127, -7}, },
            {{0, 127, -7}, },
            {{0, 127, -7}, },
            {{0, 127, -7}, },
            {{0, 127, -7}, },
            {{0, 127, -7}, },
            {{0, 127, -7}, },
            {{0, 127, -7}, },
            {{48, 57, 136}, {65, 70, 136}, {97, 102, 136}, },
            {{0, 127, -53}, },
            {},
            {{0, 41, -56}, {42, 42, 137}, {43, 127, 103}, },
            {{0, 127, -105}, },
            {{0, 9, 103}, {10, 10, 138}, {11, 127, -105}, },
            {{48, 57, 106}, },
            {{48, 122, -24}, },
            {{48, 107, -37}, {108, 108, 139}, {109, 122, 60}, },
            {{48, 100, -28}, {101, 101, 140}, {102, 122, 60}, },
            {{48, 116, -29}, {117, 117, 141}, {118, 122, 60}, },
            {{48, 122, -24}, },
            {{48, 107, -37}, {108, 108, 142}, {109, 122, 60}, },
            {{48, 122, -24}, },
            {{48, 113, -27}, {114, 114, 143}, {115, 122, 60}, },
            {{48, 95, -24}, {97, 120, 60}, {121, 121, 144}, {122, 122, 60}, },
            {{48, 115, -70}, {116, 116, 145}, {117, 122, 60}, },
            {{48, 122, -24}, },
            {{48, 104, -79}, {105, 105, 146}, {106, 122, 60}, },
            {{48, 100, -28}, {101, 101, 147}, {102, 122, 60}, },
            {{48, 104, -79}, {105, 105, 148}, {106, 111, 60}, {112, 112, 149}, {113, 122, 60}, },
            {{48, 95, -24}, {97, 108, 60}, {109, 109, 150}, {110, 122, 60}, },
            {{48, 114, -74}, {115, 115, 151}, {116, 122, 60}, },
            {{48, 107, -37}, {108, 108, 152}, {109, 122, 60}, },
            {{48, 115, -70}, {116, 116, 153}, {117, 122, 60}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 113, -27}, {114, 114, 154}, {115, 122, 60}, },
            {{48, 95, -24}, {97, 106, 60}, {107, 107, 155}, {108, 122, 60}, },
            {{48, 115, -70}, {116, 116, 156}, {117, 122, 60}, },
            {{48, 122, -24}, },
            {{48, 109, -33}, {110, 110, 157}, {111, 122, 60}, },
            {{48, 100, -28}, {101, 101, 158}, {102, 122, 60}, },
            {{48, 122, -24}, },
            {{0, 47, -92}, {48, 55, 159}, {56, 127, -92}, },
            {{0, 47, -92}, {48, 57, 160}, {58, 64, 48}, {65, 70, 160}, {71, 91, 48}, {92, 92, 50}, {93, 96, 48}, {97, 102, 160}, {103, 127, 48}, },
            {{0, 9, 161}, {10, 10, 162}, {11, 12, 161}, {13, 13, 163}, {14, 41, 161}, {42, 42, 137}, {43, 46, 161}, {47, 47, 164}, {48, 127, 161}, },
            {{0, 127, -105}, },
            {{48, 100, -28}, {101, 101, 165}, {102, 122, 60}, },
            {{48, 113, -27}, {114, 114, 166}, {115, 122, 60}, },
            {{48, 100, -28}, {101, 101, 167}, {102, 122, 60}, },
            {{48, 100, -28}, {101, 101, 168}, {102, 122, 60}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 100, -28}, {101, 101, 169}, {102, 122, 60}, },
            {{48, 95, -24}, {97, 117, 60}, {118, 118, 170}, {119, 122, 60}, },
            {{48, 122, -24}, },
            {{48, 101, -39}, {102, 102, 171}, {103, 122, 60}, },
            {{48, 95, -24}, {97, 97, 172}, {98, 122, 60}, },
            {{48, 122, -24}, },
            {{48, 100, -28}, {101, 101, 173}, {102, 122, 60}, },
            {{48, 104, -79}, {105, 105, 174}, {106, 122, 60}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 95, -24}, {97, 97, 175}, {98, 122, 60}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{0, 127, -7}, },
            {{0, 127, -138}, },
            {{0, 9, 176}, {10, 10, 177}, {11, 12, 176}, {13, 13, 178}, {14, 41, 176}, {42, 42, 179}, {43, 127, 176}, },
            {{0, 127, -163}, },
            {{0, 9, 176}, {10, 10, 180}, {11, 127, -163}, },
            {},
            {{48, 98, -84}, {99, 99, 181}, {100, 122, 60}, },
            {{48, 100, -28}, {101, 101, 182}, {102, 122, 60}, },
            {{48, 109, -33}, {110, 110, 183}, {111, 122, 60}, },
            {{48, 57, 60}, {65, 83, 60}, {84, 84, 184}, {85, 90, 60}, {95, 122, -24}, },
            {{48, 95, -24}, {97, 119, 60}, {120, 120, 185}, {121, 122, 60}, },
            {{48, 100, -28}, {101, 101, 186}, {102, 122, 60}, },
            {{48, 122, -24}, },
            {{48, 98, -84}, {99, 99, 187}, {100, 122, 60}, },
            {{48, 122, -24}, },
            {{48, 100, -28}, {101, 101, 188}, {102, 122, 60}, },
            {{48, 102, -63}, {103, 103, 189}, {104, 122, 60}, },
            {{0, 127, -163}, },
            {{0, 127, -163}, },
            {{0, 9, 176}, {10, 10, 190}, {11, 127, -163}, },
            {{0, 41, -139}, {42, 42, 179}, {43, 127, -139}, },
            {{0, 127, -163}, },
            {{48, 115, -70}, {116, 116, 191}, {117, 122, 60}, },
            {{48, 99, -65}, {100, 100, 192}, {101, 122, 60}, },
            {{48, 98, -84}, {99, 99, 193}, {100, 122, 60}, },
            {{48, 120, -117}, {121, 121, 194}, {122, 122, 60}, },
            {{48, 115, -70}, {116, 116, 195}, {117, 122, 60}, },
            {{48, 122, -24}, },
            {{48, 106, -131}, {107, 107, 196}, {108, 122, 60}, },
            {{48, 114, -74}, {115, 115, 197}, {116, 122, 60}, },
            {{48, 100, -28}, {101, 101, 198}, {102, 122, 60}, },
            {{0, 127, -163}, },
            {{48, 104, -79}, {105, 105, 199}, {106, 122, 60}, },
            {{48, 57, 60}, {65, 82, 60}, {83, 83, 200}, {84, 90, 60}, {95, 122, -24}, },
            {{48, 100, -28}, {101, 101, 201}, {102, 122, 60}, },
            {{48, 111, -42}, {112, 112, 202}, {113, 122, 60}, },
            {{48, 122, -24}, },
            {{48, 95, -24}, {97, 97, 203}, {98, 122, 60}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 110, -26}, {111, 111, 204}, {112, 122, 60}, },
            {{48, 100, -28}, {101, 101, 205}, {102, 122, 60}, },
            {{48, 122, -24}, },
            {{48, 100, -28}, {101, 101, 206}, {102, 122, 60}, },
            {{48, 102, -63}, {103, 103, 207}, {104, 122, 60}, },
            {{48, 109, -33}, {110, 110, 208}, {111, 122, 60}, },
            {{48, 115, -70}, {116, 116, 209}, {117, 122, 60}, },
            {{48, 122, -24}, },
            {{48, 100, -28}, {101, 101, 210}, {102, 122, 60}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {67, 67, 64, 64, 67, 47, 34, 35, 7, 9, 43, 10, 2, 8, 65, 42, 40, 26, 24, 27, 48, 44, 63, 63, 63, 63, 63, 63, 36, 37, 4, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 38, 45, 39, 64, -1, 69, -1, 0, 3, 46, -1, -1, 41, 28, 25, 29, 63, 63, 63, 63, 63, 63, 5, 63, 63, 63, 63, 63, 63, 63, 63, 51, 63, 50, 63, 63, 63, 31, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, 66, 56, 63, 63, 63, 55, 63, 30, 63, 63, 63, 15, 63, 63, 63, 63, 63, 63, 63, 22, 49, 6, 63, 63, 63, 20, 63, 63, 32, -1, -1, -1, -1, 63, 63, 63, 63, 16, 23, 63, 63, 53, 63, 63, 19, 63, 63, 13, 17, 63, 21, 52, 62, -1, -1, -1, -1, -1, 1, 63, 63, 63, 60, 63, 63, 54, 63, 62, 63, 63, -1, -1, -1, -1, -1, 63, 63, 63, 63, 63, 14, 63, 63, 63, -1, 63, 63, 63, 63, 18, 63, 33, 11, 63, 63, 57, 63, 63, 63, 63, 61, 63, 58, 59, 12, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
