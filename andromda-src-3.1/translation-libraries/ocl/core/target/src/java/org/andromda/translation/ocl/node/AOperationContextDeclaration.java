/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.andromda.translation.ocl.node;

import java.util.*;
import org.andromda.translation.ocl.analysis.*;

public final class AOperationContextDeclaration extends PContextDeclaration
{
    private TContext _context_;
    private TName _name_;
    private final LinkedList _pathNameTail_ = new TypedLinkedList(new PathNameTail_Cast());
    private TScopeOperator _scopeOperator_;
    private POperation _operation_;
    private final LinkedList _operationExpressionBody_ = new TypedLinkedList(new OperationExpressionBody_Cast());

    public AOperationContextDeclaration()
    {
    }

    public AOperationContextDeclaration(
        TContext _context_,
        TName _name_,
        List _pathNameTail_,
        TScopeOperator _scopeOperator_,
        POperation _operation_,
        List _operationExpressionBody_)
    {
        setContext(_context_);

        setName(_name_);

        {
            this._pathNameTail_.clear();
            this._pathNameTail_.addAll(_pathNameTail_);
        }

        setScopeOperator(_scopeOperator_);

        setOperation(_operation_);

        {
            this._operationExpressionBody_.clear();
            this._operationExpressionBody_.addAll(_operationExpressionBody_);
        }

    }

    public AOperationContextDeclaration(
        TContext _context_,
        TName _name_,
        XPPathNameTail _pathNameTail_,
        TScopeOperator _scopeOperator_,
        POperation _operation_,
        XPOperationExpressionBody _operationExpressionBody_)
    {
        setContext(_context_);

        setName(_name_);

        if(_pathNameTail_ != null)
        {
            while(_pathNameTail_ instanceof X1PPathNameTail)
            {
                this._pathNameTail_.addFirst(((X1PPathNameTail) _pathNameTail_).getPPathNameTail());
                _pathNameTail_ = ((X1PPathNameTail) _pathNameTail_).getXPPathNameTail();
            }
            this._pathNameTail_.addFirst(((X2PPathNameTail) _pathNameTail_).getPPathNameTail());
        }

        setScopeOperator(_scopeOperator_);

        setOperation(_operation_);

        if(_operationExpressionBody_ != null)
        {
            while(_operationExpressionBody_ instanceof X1POperationExpressionBody)
            {
                this._operationExpressionBody_.addFirst(((X1POperationExpressionBody) _operationExpressionBody_).getPOperationExpressionBody());
                _operationExpressionBody_ = ((X1POperationExpressionBody) _operationExpressionBody_).getXPOperationExpressionBody();
            }
            this._operationExpressionBody_.addFirst(((X2POperationExpressionBody) _operationExpressionBody_).getPOperationExpressionBody());
        }

    }
    public Object clone()
    {
        return new AOperationContextDeclaration(
            (TContext) cloneNode(_context_),
            (TName) cloneNode(_name_),
            cloneList(_pathNameTail_),
            (TScopeOperator) cloneNode(_scopeOperator_),
            (POperation) cloneNode(_operation_),
            cloneList(_operationExpressionBody_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOperationContextDeclaration(this);
    }

    public TContext getContext()
    {
        return _context_;
    }

    public void setContext(TContext node)
    {
        if(_context_ != null)
        {
            _context_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _context_ = node;
    }

    public TName getName()
    {
        return _name_;
    }

    public void setName(TName node)
    {
        if(_name_ != null)
        {
            _name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _name_ = node;
    }

    public LinkedList getPathNameTail()
    {
        return _pathNameTail_;
    }

    public void setPathNameTail(List list)
    {
        _pathNameTail_.clear();
        _pathNameTail_.addAll(list);
    }

    public TScopeOperator getScopeOperator()
    {
        return _scopeOperator_;
    }

    public void setScopeOperator(TScopeOperator node)
    {
        if(_scopeOperator_ != null)
        {
            _scopeOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _scopeOperator_ = node;
    }

    public POperation getOperation()
    {
        return _operation_;
    }

    public void setOperation(POperation node)
    {
        if(_operation_ != null)
        {
            _operation_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _operation_ = node;
    }

    public LinkedList getOperationExpressionBody()
    {
        return _operationExpressionBody_;
    }

    public void setOperationExpressionBody(List list)
    {
        _operationExpressionBody_.clear();
        _operationExpressionBody_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_context_)
            + toString(_name_)
            + toString(_pathNameTail_)
            + toString(_scopeOperator_)
            + toString(_operation_)
            + toString(_operationExpressionBody_);
    }

    void removeChild(Node child)
    {
        if(_context_ == child)
        {
            _context_ = null;
            return;
        }

        if(_name_ == child)
        {
            _name_ = null;
            return;
        }

        if(_pathNameTail_.remove(child))
        {
            return;
        }

        if(_scopeOperator_ == child)
        {
            _scopeOperator_ = null;
            return;
        }

        if(_operation_ == child)
        {
            _operation_ = null;
            return;
        }

        if(_operationExpressionBody_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_context_ == oldChild)
        {
            setContext((TContext) newChild);
            return;
        }

        if(_name_ == oldChild)
        {
            setName((TName) newChild);
            return;
        }

        for(ListIterator i = _pathNameTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_scopeOperator_ == oldChild)
        {
            setScopeOperator((TScopeOperator) newChild);
            return;
        }

        if(_operation_ == oldChild)
        {
            setOperation((POperation) newChild);
            return;
        }

        for(ListIterator i = _operationExpressionBody_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class PathNameTail_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PPathNameTail node = (PPathNameTail) o;

            if((node.parent() != null) &&
                (node.parent() != AOperationContextDeclaration.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AOperationContextDeclaration.this))
            {
                node.parent(AOperationContextDeclaration.this);
            }

            return node;
        }
    }

    private class OperationExpressionBody_Cast implements Cast
    {
        public Object cast(Object o)
        {
            POperationExpressionBody node = (POperationExpressionBody) o;

            if((node.parent() != null) &&
                (node.parent() != AOperationContextDeclaration.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AOperationContextDeclaration.this))
            {
                node.parent(AOperationContextDeclaration.this);
            }

            return node;
        }
    }
}
