/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.andromda.translation.ocl.node;

import java.util.*;
import org.andromda.translation.ocl.analysis.*;

public final class AInitInitialOrDerivedValue extends PInitialOrDerivedValue
{
    private TInit _init_;
    private TColon _colon_;
    private PExpression _expression_;
    private PInitialOrDerivedValue _initialOrDerivedValue_;

    public AInitInitialOrDerivedValue()
    {
    }

    public AInitInitialOrDerivedValue(
        TInit _init_,
        TColon _colon_,
        PExpression _expression_,
        PInitialOrDerivedValue _initialOrDerivedValue_)
    {
        setInit(_init_);

        setColon(_colon_);

        setExpression(_expression_);

        setInitialOrDerivedValue(_initialOrDerivedValue_);

    }
    public Object clone()
    {
        return new AInitInitialOrDerivedValue(
            (TInit) cloneNode(_init_),
            (TColon) cloneNode(_colon_),
            (PExpression) cloneNode(_expression_),
            (PInitialOrDerivedValue) cloneNode(_initialOrDerivedValue_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInitInitialOrDerivedValue(this);
    }

    public TInit getInit()
    {
        return _init_;
    }

    public void setInit(TInit node)
    {
        if(_init_ != null)
        {
            _init_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _init_ = node;
    }

    public TColon getColon()
    {
        return _colon_;
    }

    public void setColon(TColon node)
    {
        if(_colon_ != null)
        {
            _colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _colon_ = node;
    }

    public PExpression getExpression()
    {
        return _expression_;
    }

    public void setExpression(PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression_ = node;
    }

    public PInitialOrDerivedValue getInitialOrDerivedValue()
    {
        return _initialOrDerivedValue_;
    }

    public void setInitialOrDerivedValue(PInitialOrDerivedValue node)
    {
        if(_initialOrDerivedValue_ != null)
        {
            _initialOrDerivedValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _initialOrDerivedValue_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_init_)
            + toString(_colon_)
            + toString(_expression_)
            + toString(_initialOrDerivedValue_);
    }

    void removeChild(Node child)
    {
        if(_init_ == child)
        {
            _init_ = null;
            return;
        }

        if(_colon_ == child)
        {
            _colon_ = null;
            return;
        }

        if(_expression_ == child)
        {
            _expression_ = null;
            return;
        }

        if(_initialOrDerivedValue_ == child)
        {
            _initialOrDerivedValue_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_init_ == oldChild)
        {
            setInit((TInit) newChild);
            return;
        }

        if(_colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(_expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(_initialOrDerivedValue_ == oldChild)
        {
            setInitialOrDerivedValue((PInitialOrDerivedValue) newChild);
            return;
        }

    }
}
