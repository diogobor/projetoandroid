/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.andromda.translation.ocl.node;

import java.util.*;
import org.andromda.translation.ocl.analysis.*;

public final class AMessageMessageExp extends PMessageExp
{
    private PExpression _expression_;
    private TMessageOperator _messageOperator_;
    private TName _name_;
    private TLParen _lParen_;
    private PMessageArguments _messageArguments_;
    private TRParen _rParen_;

    public AMessageMessageExp()
    {
    }

    public AMessageMessageExp(
        PExpression _expression_,
        TMessageOperator _messageOperator_,
        TName _name_,
        TLParen _lParen_,
        PMessageArguments _messageArguments_,
        TRParen _rParen_)
    {
        setExpression(_expression_);

        setMessageOperator(_messageOperator_);

        setName(_name_);

        setLParen(_lParen_);

        setMessageArguments(_messageArguments_);

        setRParen(_rParen_);

    }
    public Object clone()
    {
        return new AMessageMessageExp(
            (PExpression) cloneNode(_expression_),
            (TMessageOperator) cloneNode(_messageOperator_),
            (TName) cloneNode(_name_),
            (TLParen) cloneNode(_lParen_),
            (PMessageArguments) cloneNode(_messageArguments_),
            (TRParen) cloneNode(_rParen_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMessageMessageExp(this);
    }

    public PExpression getExpression()
    {
        return _expression_;
    }

    public void setExpression(PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression_ = node;
    }

    public TMessageOperator getMessageOperator()
    {
        return _messageOperator_;
    }

    public void setMessageOperator(TMessageOperator node)
    {
        if(_messageOperator_ != null)
        {
            _messageOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _messageOperator_ = node;
    }

    public TName getName()
    {
        return _name_;
    }

    public void setName(TName node)
    {
        if(_name_ != null)
        {
            _name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _name_ = node;
    }

    public TLParen getLParen()
    {
        return _lParen_;
    }

    public void setLParen(TLParen node)
    {
        if(_lParen_ != null)
        {
            _lParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lParen_ = node;
    }

    public PMessageArguments getMessageArguments()
    {
        return _messageArguments_;
    }

    public void setMessageArguments(PMessageArguments node)
    {
        if(_messageArguments_ != null)
        {
            _messageArguments_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _messageArguments_ = node;
    }

    public TRParen getRParen()
    {
        return _rParen_;
    }

    public void setRParen(TRParen node)
    {
        if(_rParen_ != null)
        {
            _rParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rParen_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_expression_)
            + toString(_messageOperator_)
            + toString(_name_)
            + toString(_lParen_)
            + toString(_messageArguments_)
            + toString(_rParen_);
    }

    void removeChild(Node child)
    {
        if(_expression_ == child)
        {
            _expression_ = null;
            return;
        }

        if(_messageOperator_ == child)
        {
            _messageOperator_ = null;
            return;
        }

        if(_name_ == child)
        {
            _name_ = null;
            return;
        }

        if(_lParen_ == child)
        {
            _lParen_ = null;
            return;
        }

        if(_messageArguments_ == child)
        {
            _messageArguments_ = null;
            return;
        }

        if(_rParen_ == child)
        {
            _rParen_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(_messageOperator_ == oldChild)
        {
            setMessageOperator((TMessageOperator) newChild);
            return;
        }

        if(_name_ == oldChild)
        {
            setName((TName) newChild);
            return;
        }

        if(_lParen_ == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(_messageArguments_ == oldChild)
        {
            setMessageArguments((PMessageArguments) newChild);
            return;
        }

        if(_rParen_ == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

    }
}
