/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.andromda.translation.ocl.node;

import java.util.*;
import org.andromda.translation.ocl.analysis.*;

public final class AConcreteFeatureCallParameters extends PFeatureCallParameters
{
    private TLParen _lParen_;
    private PExpression _expression_;
    private final LinkedList _featureCallParameterOption_ = new TypedLinkedList(new FeatureCallParameterOption_Cast());
    private TRParen _rParen_;

    public AConcreteFeatureCallParameters()
    {
    }

    public AConcreteFeatureCallParameters(
        TLParen _lParen_,
        PExpression _expression_,
        List _featureCallParameterOption_,
        TRParen _rParen_)
    {
        setLParen(_lParen_);

        setExpression(_expression_);

        {
            this._featureCallParameterOption_.clear();
            this._featureCallParameterOption_.addAll(_featureCallParameterOption_);
        }

        setRParen(_rParen_);

    }

    public AConcreteFeatureCallParameters(
        TLParen _lParen_,
        PExpression _expression_,
        XPFeatureCallParameterOption _featureCallParameterOption_,
        TRParen _rParen_)
    {
        setLParen(_lParen_);

        setExpression(_expression_);

        if(_featureCallParameterOption_ != null)
        {
            while(_featureCallParameterOption_ instanceof X1PFeatureCallParameterOption)
            {
                this._featureCallParameterOption_.addFirst(((X1PFeatureCallParameterOption) _featureCallParameterOption_).getPFeatureCallParameterOption());
                _featureCallParameterOption_ = ((X1PFeatureCallParameterOption) _featureCallParameterOption_).getXPFeatureCallParameterOption();
            }
            this._featureCallParameterOption_.addFirst(((X2PFeatureCallParameterOption) _featureCallParameterOption_).getPFeatureCallParameterOption());
        }

        setRParen(_rParen_);

    }
    public Object clone()
    {
        return new AConcreteFeatureCallParameters(
            (TLParen) cloneNode(_lParen_),
            (PExpression) cloneNode(_expression_),
            cloneList(_featureCallParameterOption_),
            (TRParen) cloneNode(_rParen_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConcreteFeatureCallParameters(this);
    }

    public TLParen getLParen()
    {
        return _lParen_;
    }

    public void setLParen(TLParen node)
    {
        if(_lParen_ != null)
        {
            _lParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lParen_ = node;
    }

    public PExpression getExpression()
    {
        return _expression_;
    }

    public void setExpression(PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression_ = node;
    }

    public LinkedList getFeatureCallParameterOption()
    {
        return _featureCallParameterOption_;
    }

    public void setFeatureCallParameterOption(List list)
    {
        _featureCallParameterOption_.clear();
        _featureCallParameterOption_.addAll(list);
    }

    public TRParen getRParen()
    {
        return _rParen_;
    }

    public void setRParen(TRParen node)
    {
        if(_rParen_ != null)
        {
            _rParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rParen_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lParen_)
            + toString(_expression_)
            + toString(_featureCallParameterOption_)
            + toString(_rParen_);
    }

    void removeChild(Node child)
    {
        if(_lParen_ == child)
        {
            _lParen_ = null;
            return;
        }

        if(_expression_ == child)
        {
            _expression_ = null;
            return;
        }

        if(_featureCallParameterOption_.remove(child))
        {
            return;
        }

        if(_rParen_ == child)
        {
            _rParen_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lParen_ == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(_expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        for(ListIterator i = _featureCallParameterOption_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_rParen_ == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

    }

    private class FeatureCallParameterOption_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PFeatureCallParameterOption node = (PFeatureCallParameterOption) o;

            if((node.parent() != null) &&
                (node.parent() != AConcreteFeatureCallParameters.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AConcreteFeatureCallParameters.this))
            {
                node.parent(AConcreteFeatureCallParameters.this);
            }

            return node;
        }
    }
}
